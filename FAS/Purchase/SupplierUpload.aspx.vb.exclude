Imports System
Imports System.Data
Imports BusinesLayer
Imports Microsoft.Reporting.WebForms
Imports Microsoft.Office.Interop
Imports DatabaseLayer
Partial Class Purchase_SupplierUpload
    Inherits System.Web.UI.Page
    Private sFormName As String = "Sales_UploadSalesOrders"
    Dim objGen As New clsFASGeneral
    Private objErrorClass As New BusinesLayer.Components.ErrorClass
    Private Shared sSession As AllSession
    Dim objGenFun As New clsGeneralFunctions
    Dim objSU As New clsSupplierUpload
    Private Shared sFile As String
    Private objDBL As New DBHelper
    Private Shared sExcelSave As String

    Protected Overloads Overrides Sub OnPreRender(ByVal e As EventArgs)
        MyBase.OnPreRender(e)
        Dim strDisAbleBackButton As String
        strDisAbleBackButton = "<script language=javascript>window.history.forward(1);</script>"
        Page.ClientScript.RegisterStartupScript(Me.GetType(), "clientScript", strDisAbleBackButton)
        imgbtnSave.ImageUrl = "~/Images/Save24.png"
    End Sub
    Protected Sub Page_Load(sender As Object, e As EventArgs) Handles Me.Load
        Try
            sSession = Session("AllSession")
            If IsPostBack = False Then
                imgbtnSave.Visible = False
                lblErrorup.Text = ""
                Me.imgbtnSave.Attributes.Add("OnClick", "return validationSave()")
            End If
        Catch ex As Exception
            lblErrorup.Text = ex.Message
            Components.AppException.LogError(sSession.AccessCode, ex.Message, sFormName, "Page_Load")
        End Try
    End Sub
    Public Function ReadExcel(ByVal sSql As String) As DataTable
        Dim con As New OleDb.OleDbConnection
        Dim da As OleDb.OleDbDataAdapter
        Dim ds As New DataSet
        Try
            con = MSAccessOpenConnection()
            If IsNothing(con) = False Then
                da = New OleDb.OleDbDataAdapter(sSql, con)
                da.Fill(ds)
                con.Close()
                Return ds.Tables(0)
            End If
        Catch ex As Exception
        Finally
            da.Dispose()
        End Try
    End Function
    Private Function MSAccessOpenConnection() As OleDb.OleDbConnection
        Dim con As New OleDb.OleDbConnection
        Try
            con.ConnectionString = "Provider=Microsoft.Jet.OLEDB.8.0;Data Source=" & sFile & ";Extended Properties=Excel 8.0;"
            con.Open()
            Return con
        Catch ex As Exception
        End Try
        Try
            con.ConnectionString = "Data Source=" & sFile & ";Provider=Microsoft.ACE.OLEDB.12.0; Extended Properties=Excel 12.0;"
            con.Open()
            Return con
        Catch ex As Exception
        End Try
    End Function

    Private Sub imgbtnSave_Click(sender As Object, e As ImageClickEventArgs) Handles imgbtnSave.Click
        Dim dt As New DataTable
        Dim Tin As String = ""
        Try
            dt = Session("dtUpload")
            For i = 0 To dt.Rows.Count - 1
                If dt.Rows(i)(0).ToString() = "" Then
                    lblErrorup.Text = "Code cannot be blank" & " Line No - " & i + 1
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    Exit Sub
                End If

                If dt.Rows(i)(1).ToString() = "" Then
                    lblErrorup.Text = "Name cannot be blank" & " Line No - " & i + 1
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    Exit Sub
                End If

                If dt.Rows(i)(2).ToString() = "" Then
                    lblErrorup.Text = "Contact Person cannot be blank" & " Line No - " & i + 1
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    Exit Sub
                End If

                If dt.Rows(i)(3).ToString() = "" Then
                    lblErrorup.Text = "Email ID cannot be blank" & " Line No - " & i + 1
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    Exit Sub
                End If

                If dt.Rows(i)(4).ToString() = "" Then
                    lblErrorup.Text = "Mobile No cannot be blank" & " Line No - " & i + 1
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    Exit Sub
                End If

                'City
                If dt.Rows(i)(12).ToString() <> "" Then
                    Dim iRet As Integer = objSU.CheckCityExistOrNot(sSession.AccessCode, sSession.AccessCodeID, dt.Rows(i)(12).ToString(), 0)
                    If iRet = 0 Then
                        lblErrorup.Text = "Create " & dt.Rows(i)(12).ToString() & " - city in General Master " & " Line No - " & i + 1
                        lblCustomerValidationMsg.Text = lblErrorup.Text
                        ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                        Exit Sub
                    End If
                End If
                'State
                If dt.Rows(i)(13).ToString() <> "" Then
                    Dim iRet As Integer = objSU.CheckCityExistOrNot(sSession.AccessCode, sSession.AccessCodeID, dt.Rows(i)(13).ToString(), 1)
                    If iRet = 0 Then
                        lblErrorup.Text = "Create " & dt.Rows(i)(13).ToString() & " - State in General Master " & " Line No - " & i + 1
                        lblCustomerValidationMsg.Text = lblErrorup.Text
                        ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                        Exit Sub
                    End If
                End If
            Next

            Dim dtUpload As New DataTable
            dtUpload = Session("dtUpload")

            If (dtUpload.Rows.Count > 0) Then
                For i = 0 To dtUpload.Rows.Count - 1
                    objSU.CSM_ID = 0
                    objSU.CSM_IndType = 0
                    objSU.CSM_Inventry = 0
                    objSU.CSM_Code = dtUpload.Rows(i)(0).ToString()
                    objSU.CSM_Name = dtUpload.Rows(i)(1).ToString()

                    objSU.CSM_ContactPerson = dtUpload.Rows(i)(2).ToString()
                    objSU.CSM_EmailID = dtUpload.Rows(i)(3).ToString()
                    objSU.CSM_MobileNo = dtUpload.Rows(i)(4).ToString()
                    objSU.CSM_LandLineNo = dtUpload.Rows(i)(5).ToString()
                    objSU.CSM_Fax = dtUpload.Rows(i)(6).ToString()

                    objSU.CSM_Address = dtUpload.Rows(i)(7).ToString()
                    objSU.CSM_Address1 = dtUpload.Rows(i)(8).ToString()
                    objSU.CSM_Address2 = dtUpload.Rows(i)(9).ToString()
                    objSU.CSM_Address3 = dtUpload.Rows(i)(10).ToString()
                    objSU.CSM_Pincode = dtUpload.Rows(i)(11).ToString()

                    Dim iRet As Integer = objSU.CheckCityExistOrNot(sSession.AccessCode, sSession.AccessCodeID, dtUpload.Rows(i)(12).ToString(), 0)
                    If iRet > 0 Then
                        objSU.CSM_City = iRet
                    Else
                        objSU.CSM_City = 0
                    End If

                    iRet = objSU.CheckCityExistOrNot(sSession.AccessCode, sSession.AccessCodeID, dtUpload.Rows(i)(13).ToString(), 1)
                    If iRet > 0 Then
                        objSU.CSM_State = iRet
                    Else
                        objSU.CSM_State = 0
                    End If

                    objSU.CSM_Delflag = "A"
                    objSU.CSM_CompID = sSession.AccessCodeID
                    objSU.CSM_Status = "A"
                    objSU.CSM_Operation = "C"
                    objSU.CSM_IPAddress = sSession.IPAddress
                    objSU.CSM_CreatedBy = sSession.UserID
                    objSU.CSM_ProductDescription = ""
                    objSU.CSM_CreatedOn = Date.Today
                    objSU.CSM_ApprovedBy = Nothing
                    objSU.CSM_ApprovedOn = Date.Today
                    objSU.CSM_DeletedBy = Nothing
                    objSU.CSM_DeletedOn = Date.Today
                    objSU.CSM_UpdatedBy = sSession.UserID
                    objSU.CSM_UpdatedOn = Date.Today

                    'Saving Supplier to chart of accounts and taking the ID'
                    Dim sPerm As String = ""
                    Dim sArray1 As Array
                    sPerm = objSU.LoadDetailsSetttings(sSession.AccessCode, sSession.AccessCodeID, "Supplier", "Supplier")
                    sPerm = sPerm.Remove(0, 1)
                    sArray1 = sPerm.Split(",")

                    Dim iHead, iGroup, iSubGroup, iGL, iSubGL As Integer
                    iHead = sArray1(0)
                    iGroup = sArray1(1)
                    iSubGroup = sArray1(2)
                    iGL = sArray1(3)
                    iSubGL = CreateChartOfAccounts(objSU.CSM_Name, 3, sArray1(3), 4)
                    'Saving Supplier to chart of accounts and taking the ID'

                    objSU.CSM_Group = iGroup
                    objSU.CSM_SubGroup = iSubGroup
                    objSU.CSM_GL = iGL
                    objSU.CSM_SubGL = iSubGL

                    objSU.SaveCumsterSupplierDetails(sSession.AccessCode, objSU)

                    Dim iid As Integer
                    'Tin
                    If dtUpload.Rows(i)(14).ToString() = "" Then
                        Tin = "0"
                    Else
                        Tin = objSU.CheckCityExistOrNot(sSession.AccessCode, sSession.AccessCodeID, dtUpload.Rows(i)(14).ToString(), 1)
                        iid = objSU.GetStatutoryNameValueID(sSession.AccessCode, sSession.AccessCodeID, "Tin")
                        objSU.SaveStatutoryNameValue(sSession.AccessCode, sSession.AccessCodeID, "Tin", dtUpload.Rows(i)(14).ToString(), iid)
                    End If

                Next
            End If

            lblErrorup.Text = "Successfully Uploaded."
            lblCustomerValidationMsg.Text = lblErrorup.Text
            ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
        Catch ex As Exception
            lblErrorup.Text = ex.Message
            Components.AppException.LogError(sSession.AccessCode, ex.Message, sFormName, "Page_Load")
        End Try
    End Sub
    Private Function CreateChartOfAccounts(ByVal sName As String, ByVal iHead As Integer, ByVal iParent As Integer, ByVal iAccHead As Integer) As Integer
        Dim sRet As String
        Dim sArray As Array
        Dim objCOA As New clsChartOfAccounts
        Try

            objCOA.igl_id = 0
            objCOA.igl_head = iHead
            objCOA.igl_Parent = iParent
            objCOA.sgl_glcode = objCOA.GenerateSubGLCode(sSession.AccessCode, sSession.AccessCodeID, iAccHead, iParent)
            objCOA.sgl_Desc = objGen.SafeSQL(sName)
            objCOA.sgl_reason_Creation = objGen.SafeSQL(sName)
            objCOA.sgl_Delflag = "C"
            objCOA.igl_AccHead = iAccHead
            objCOA.igl_Crby = sSession.UserID
            objCOA.igl_CompId = sSession.AccessCodeID
            objCOA.sgl_Status = "A"
            objCOA.sgl_IPAddress = sSession.IPAddress
            sRet = objCOA.SaveChartofACC(sSession.AccessCode, sSession.AccessCodeID, objCOA)
            sArray = sRet.Split(",")
            Return sArray(0)
        Catch ex As Exception
            Throw
        End Try
    End Function
    Private Sub btnExcelSheetName_Click(sender As Object, e As EventArgs) Handles btnExcelSheetName.Click
        Dim dt As New DataTable
        Dim sFileName As String, sExt As String, sPath As String
        Try
            imgbtnSave.Visible = False
            dgUpload.Visible = False
            If FULoad.FileName <> String.Empty Then
                sExt = IO.Path.GetExtension(FULoad.PostedFile.FileName)
                Session("sExt") = sExt
                If UCase(sExt) = ".XLS" Or UCase(sExt) = ".XLSX" Then
                    sFileName = System.IO.Path.GetFileName(FULoad.PostedFile.FileName)
                    Session("sFileName") = sFileName
                    sPath = objGenFun.CreateWorkingDir(sSession.AccessCode, sSession.AccessCodeID, sSession.UserLoginName)
                    If sPath.EndsWith("\") = False Then
                        sFile = sPath & "\" & sFileName
                    Else
                        sFile = sPath & sFileName
                    End If
                    FULoad.PostedFile.SaveAs(sFile)
                    ddlSheetName.Items.Clear()
                    dt = ExcelSheetNames(sFile)
                    ddlSheetName.DataSource = dt
                    ddlSheetName.DataTextField = "Name"
                    ddlSheetName.DataValueField = "ID"
                    ddlSheetName.DataBind()
                    ddlSheetName.Items.Insert(0, "Select Sheet")
                Else
                    lblErrorup.Text = "Select Excel file only."
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    Exit Sub
                End If
            End If
        Catch ex As Exception
            lblErrorup.Text = ex.Message
            Components.AppException.LogError(sSession.AccessCode, ex.Message, sFormName, "btnExcelSheetName_Click")
        End Try
    End Sub
    Public Function ExcelSheetNames(ByVal sPath As String) As DataTable
        Dim da As OleDb.OleDbDataAdapter
        Dim ds As New DataSet
        Dim dt As New DataTable
        Dim XLCon As OleDb.OleDbConnection
        Dim dtTab As New DataTable
        Dim drow As DataRow
        Dim i As Integer
        Try
            XLCon = MSAccessOpenConnection(sPath)
            dt = XLCon.GetOleDbSchemaTable(OleDb.OleDbSchemaGuid.Tables,
                   New Object() {Nothing, Nothing, Nothing, "TABLE"})
            If dt.Rows.Count > 0 Then
                dtTab.Columns.Add("ID")
                dtTab.Columns.Add("Name")
                For i = 0 To dt.Rows.Count - 1
                    drow = dtTab.NewRow
                    drow("ID") = i + 1
                    drow("Name") = dt.Rows(i)(2)
                    dtTab.Rows.Add(drow)
                Next
            End If
            XLCon.Close()
            Return dtTab
        Catch ex As Exception
            Throw
        End Try
    End Function
    Private Function MSAccessOpenConnection(ByVal sFile As String) As OleDb.OleDbConnection
        Dim con As New OleDb.OleDbConnection
        Try
            con.ConnectionString = "Provider=Microsoft.Jet.OLEDB.8.0;Data Source=" & sFile & ";Extended Properties=Excel 8.0;"
            con.Open()
            Return con
        Catch ex As Exception
        End Try
        Try
            con.ConnectionString = "Data Source=" & sFile & ";Provider=Microsoft.ACE.OLEDB.12.0; Extended Properties=Excel 12.0;"
            con.Open()
            Return con
        Catch ex As Exception
        End Try
    End Function
    Private Sub ddlSheetName_SelectedIndexChanged(sender As Object, e As EventArgs) Handles ddlSheetName.SelectedIndexChanged
        Dim dttable As New DataTable
        Try
            lblErrorup.Text = ""
            If ddlSheetName.SelectedIndex > 0 Then
                dttable = LoadExcelTable(sFile)
                If IsNothing(dttable) Then
                    lblErrorup.Text = "Invalid Excel format in selected sheet."
                    lblCustomerValidationMsg.Text = lblErrorup.Text
                    ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                    ddlSheetName.Items.Clear()
                    Exit Sub
                End If
                dgUpload.DataSource = dttable
                dgUpload.DataBind()
                dgUpload.Visible = True
                Session("dtUpload") = dttable
                imgbtnSave.Visible = True : imgbtnSave.Enabled = True
            End If
        Catch ex As Exception
            If ex.Message.Contains("Cannot find column ") = True Then
                lblErrorup.Text = "Invalid Excel format in selected sheet."
                ddlSheetName.Items.Clear()
                imgbtnSave.Enabled = False
            Else
                lblErrorup.Text = ex.Message
            End If
            Components.AppException.LogError(sSession.AccessCode, ex.Message, sFormName, "ddlSheetName_SelectedIndexChanged")
        End Try
    End Sub
    Private Function LoadExcelTable(ByVal sFile As String) As DataTable
        'Dim objphysicalstock As New clsPhysicalStockExcelUpload
        Dim dtTable As New DataTable, dtStock As New DataTable
        Dim dRow As DataRow
        Dim i As Integer
        'Dim objclsBCMUploads As New clsPhysicalStockExcelUpload
        Try
            dtTable.Columns.Add("Code")
            dtTable.Columns.Add("Name")
            dtTable.Columns.Add("ContactPerson")
            dtTable.Columns.Add("Email")
            dtTable.Columns.Add("Mobile No")
            dtTable.Columns.Add("Land Line No")
            dtTable.Columns.Add("Fax")
            dtTable.Columns.Add("Address")
            dtTable.Columns.Add("Address1")
            dtTable.Columns.Add("Address2")
            dtTable.Columns.Add("Address3")
            dtTable.Columns.Add("PinCode")
            dtTable.Columns.Add("City")
            dtTable.Columns.Add("State")
            dtTable.Columns.Add("Tin")
            dtStock = objDBL.ReadExcel("Select * from [" & Trim(ddlSheetName.SelectedItem.Text) & "] ", sFile)
            If IsNothing(dtStock) = True Then
                lblErrorup.Text = "Invalid Excel format in selected sheet."
                ddlSheetName.Items.Clear()
                Return dtStock
                lblCustomerValidationMsg.Text = lblErrorup.Text
                ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
            End If

            If dtStock.Columns.Count > 15 Then
                lblErrorup.Text = "Invalid Excel format in selected sheet."
                ddlSheetName.Items.Clear()
                lblCustomerValidationMsg.Text = lblErrorup.Text
                ScriptManager.RegisterStartupScript(Me, Me.GetType(), "Modal", "$('#divMsgType').addClass('alert alert-success');$('#ModalFASCompanyValidation').modal('show');", True)
                Exit Function
            End If

            For i = 0 To dtStock.Rows.Count - 1
                dRow = dtTable.NewRow

                If IsDBNull(dtStock.Rows(i).Item(0)) = False Then
                    If dtStock.Rows(i).Item(0).ToString <> "&nbsp;" Then
                        dRow("Code") = objGen.SafeSQL(dtStock.Rows(i).Item(0))
                    End If
                End If

                If IsDBNull(dtStock.Rows(i).Item(1)) = False Then
                    If dtStock.Rows(i).Item(1).ToString <> "&nbsp;" Then
                        dRow("Name") = objGen.SafeSQL(dtStock.Rows(i).Item(1))
                    End If
                End If

                If IsDBNull(dtStock.Rows(i).Item(2)) = False Then
                    If dtStock.Rows(i).Item(2).ToString <> "&nbsp;" Then
                        dRow("ContactPerson") = objGen.SafeSQL(dtStock.Rows(i).Item(2))
                    End If
                End If

                If IsDBNull(dtStock.Rows(i).Item(3)) = False Then
                    If dtStock.Rows(i).Item(3).ToString <> "&nbsp;" Then
                        dRow("Email") = objGen.SafeSQL(dtStock.Rows(i).Item(3))
                    End If
                End If


                If IsDBNull(dtStock.Rows(i).Item(4)) = False Then
                    dRow("Mobile No") = objGen.SafeSQL(dtStock.Rows(i).Item(4))
                Else
                    dRow("Mobile No") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(5)) = False Then
                    dRow("Land Line No") = objGen.SafeSQL(dtStock.Rows(i).Item(5))
                Else
                    dRow("Land Line No") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(6)) = False Then

                    dRow("Fax") = objGen.SafeSQL(dtStock.Rows(i).Item(6))
                Else
                    dRow("Fax") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(7)) = False Then

                    dRow("Address") = objGen.SafeSQL(dtStock.Rows(i).Item(7))
                Else
                    dRow("Address") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(8)) = False Then

                    dRow("Address1") = objGen.SafeSQL(dtStock.Rows(i).Item(8))
                Else
                    dRow("Address1") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(9)) = False Then

                    dRow("Address2") = objGen.SafeSQL(dtStock.Rows(i).Item(9))
                Else
                    dRow("Address2") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(10)) = False Then

                    dRow("Address3") = objGen.SafeSQL(dtStock.Rows(i).Item(10))
                Else
                    dRow("Address3") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(11)) = False Then
                    dRow("PinCode") = objGen.SafeSQL(dtStock.Rows(i).Item(11))
                Else
                    dRow("PinCode") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(12)) = False Then
                    dRow("City") = objGen.SafeSQL(dtStock.Rows(i).Item(12))
                Else
                    dRow("City") = ""
                End If

                If IsDBNull(dtStock.Rows(i).Item(13)) = False Then
                    dRow("State") = objGen.SafeSQL(dtStock.Rows(i).Item(13))
                Else
                    dRow("State") = ""
                End If
                If IsDBNull(dtStock.Rows(i).Item(14)) = False Then
                    dRow("Tin") = objGen.SafeSQL(dtStock.Rows(i).Item(14))
                Else
                    dRow("Tin") = ""
                End If

                dtTable.Rows.Add(dRow)
            Next
            Return dtTable
        Catch ex As Exception
            Throw
        End Try
    End Function
    Private Sub LnkbtnExcel_Click(sender As Object, e As EventArgs) Handles LnkbtnExcel.Click
        Try
            Response.ContentType = "application/vnd.ms-excel"
            Response.AppendHeader("Content-Disposition", "attachment; filename=SupplierMaster.xlsx")
            Response.TransmitFile(Server.MapPath("../") & "SampleExcels\SupplierMaster.xlsx")
            Response.End()
        Catch ex As Exception
            Throw
        End Try
    End Sub
    Private Sub DownloadFile(ByVal pstrFileNameAndPath As String)
        Dim file As System.IO.FileInfo
        Try
            file = New System.IO.FileInfo(pstrFileNameAndPath)
            If file.Exists Then
                Response.Clear()
                Response.AddHeader("Content-Disposition", "attachment; filename=" & file.Name)
                Response.AddHeader("Content-Length", file.Length.ToString())
                Response.ContentType = "application/octet-stream"
                Response.WriteFile(file.FullName)
                Response.End()
            End If
        Catch ex As Exception
            Throw
        End Try
    End Sub
    Private Sub dgUpload_PreRender(sender As Object, e As EventArgs) Handles dgUpload.PreRender
        Dim dt As New DataTable
        Try
            If dgUpload.Rows.Count > 0 Then
                dgUpload.UseAccessibleHeader = True
                dgUpload.HeaderRow.TableSection = TableRowSection.TableHeader
                dgUpload.FooterRow.TableSection = TableRowSection.TableFooter
            End If
        Catch ex As Exception
            Components.AppException.LogError(sSession.AccessCode, ex.Message, sFormName, "dgUpload_PreRender")
        End Try
    End Sub
End Class
