

CREATE PROCEDURE spDispatch_Master        
(                
@DM_ID int,  
@DM_OrderID int,  
@DM_OrderDate datetime,  
@DM_SupplierID int,  
@DM_DispatchDate datetime,  
@DM_ModeOfShipping int,  
@DM_ExpectedDays int,  
@DM_PaymentType int,  
@DM_CreatedBy int,  
@DM_CreatedOn datetime,  
@DM_Status varchar(1),  
@DM_YearID int,  
@DM_CompID int,
@DM_ShippingRate money,
@DM_ChequeNo Varchar(50),
@DM_ChequeDate DateTime,
@DM_IFSCCode Varchar(100),
@DM_BankName Varchar(500),
@DM_Branch Varchar(500),
@DM_Operation char(1),
@DM_IPAddress Varchar(25),
@DM_GrandDiscount money,
@DM_GrandDiscountAmt money,
@DM_GrandTotal money,
@DM_GrandTotalAmt money,
@DM_Code Varchar(100),
@DM_SalesManID int,
@DM_DispatchRefNo Varchar(1000),
@DM_ESugamNo Varchar(1000),
@DM_Remarks Varchar(8000),
@DM_SaleType Int,   
@DM_OtherType Int,
@DM_AllocateID Int,
@DM_TrType Int,
@DM_CompanyAddress Varchar(200),
@DM_CompanyGSTNRegNo  Varchar(15),
@DM_BillingAddress Varchar(200),
@DM_BillingGSTNRegNo Varchar(15),
@DM_DeliveryFrom  Varchar(200),
@DM_DeliveryFromGSTNRegNo Varchar(15),
@DM_DeliveryAddress Varchar(200),
@DM_DeliveryGSTNRegNo Varchar(15),
@DM_DispatchStatus Varchar(25),
@DM_CompanyType int,
@DM_GSTNCategory int, 
@DM_State Varchar(50),
@DM_OrderNo Varchar(50),
@DM_AllocationNo Varchar(50),
@DM_BatchNo int,
@DM_BaseName int,        
@iUpdateOrSave int Output,              
@iOper int Output             
)                   
AS        
If exists(select DM_ID from Dispatch_Master where DM_AllocateID=@DM_AllocateID And DM_OrderID=@DM_OrderID And DM_CompID = @DM_CompID)         
 Begin          
Set @iUpdateOrSave=2          
Set @iOper = (select DM_ID from Dispatch_Master where DM_AllocateID=@DM_AllocateID And DM_OrderID=@DM_OrderID And DM_CompID = @DM_CompID)        
End        
Else               
BEGIN        
set @DM_ID=(select isnull(max(DM_ID)+1,1) from Dispatch_Master)        
Insert into Dispatch_Master(DM_ID,DM_OrderID,DM_OrderDate,DM_SupplierID,DM_DispatchDate,DM_ModeOfShipping,DM_ExpectedDays,DM_PaymentType,DM_CreatedBy,DM_CreatedOn,DM_Status,DM_YearID,DM_CompID,DM_ShippingRate,DM_ChequeNo,DM_ChequeDate,
DM_IFSCCode,DM_BankName,DM_Branch,DM_Operation,DM_IPAddress,DM_GrandDiscount,DM_GrandDiscountAmt,DM_GrandTotal,DM_GrandTotalAmt,DM_Code,DM_SalesManID,DM_DispatchRefNo,DM_ESugamNo,DM_Remarks,DM_SaleType,DM_OtherType,DM_AllocateID,DM_TrType,
DM_CompanyAddress,DM_CompanyGSTNRegNo,DM_BillingAddress,DM_BillingGSTNRegNo,DM_DeliveryFrom,DM_DeliveryFromGSTNRegNo,DM_DeliveryAddress,DM_DeliveryGSTNRegNo,DM_DispatchStatus,DM_CompanyType,DM_GSTNCategory,DM_State,DM_OrderNo,DM_AllocationNo,DM_BatchNo,DM_BaseName)        

Values(@DM_ID,@DM_OrderID,@DM_OrderDate,@DM_SupplierID,@DM_DispatchDate,@DM_ModeOfShipping,@DM_ExpectedDays,@DM_PaymentType,@DM_CreatedBy,@DM_CreatedOn,@DM_Status,@DM_YearID,@DM_CompID,@DM_ShippingRate,@DM_ChequeNo,@DM_ChequeDate,
@DM_IFSCCode,@DM_BankName,@DM_Branch,@DM_Operation,@DM_IPAddress,@DM_GrandDiscount,@DM_GrandDiscountAmt,@DM_GrandTotal,@DM_GrandTotalAmt,@DM_Code,@DM_SalesManID,@DM_DispatchRefNo,@DM_ESugamNo,@DM_Remarks,@DM_SaleType,@DM_OtherType,@DM_AllocateID,@DM_TrType,
@DM_CompanyAddress,@DM_CompanyGSTNRegNo,@DM_BillingAddress,@DM_BillingGSTNRegNo,@DM_DeliveryFrom,@DM_DeliveryFromGSTNRegNo,@DM_DeliveryAddress,@DM_DeliveryGSTNRegNo,@DM_DispatchStatus,@DM_CompanyType,@DM_GSTNCategory,@DM_State,@DM_OrderNo,@DM_AllocationNo,@DM_BatchNo,@DM_BaseName)      
  
    set @iUpdateOrSave=3               
    set @iOper = @DM_ID        
END

/

Create procedure [dbo].[spHoliday_master]       
(          
@Hol_YearId integer,  
@Hol_Date datetime,  
@Hol_Remarks varchar(500),  
@Hol_Createdby integer,  
@Hol_UpdatedBy integer,  
@Hol_Delflag varchar(3), 
@Hol_Status varchar(3),  
@Hol_IPAddress varchar(25),  
@Hol_CompID integer,  
@iUpdateOrSave int Output          
)          
         
as                 
  if exists(select Hol_Date from Holiday_master where Hol_Date=@Hol_Date And Hol_YearId=@Hol_YearId and Hol_CompID=@Hol_CompID)            
  begin      
  Set @Hol_Status='U'          
   update holiday_master set Hol_Remarks=@Hol_Remarks,Hol_UpdatedBy=@Hol_UpdatedBy,Hol_UpdatedOn=GetDate(),      
 Hol_CompID=@Hol_CompID ,Hol_IPAddress=@Hol_IPAddress,Hol_Status=@Hol_Status,Hol_Delflag=@Hol_Delflag       
  where Hol_Date=@Hol_Date and Hol_CompID=@Hol_CompID and Hol_YearId=@Hol_YearId           
   set @iUpdateOrSave=2                
       end            
 else             
 begin            
  insert into holiday_master (Hol_YearId,Hol_Date,Hol_Remarks,      
  Hol_CompID,Hol_IPAddress,Hol_Status,Hol_Delflag,Hol_Createdby,Hol_CreatedOn)         
  values            
  (@Hol_YearId,@Hol_Date,@Hol_Remarks,      
  @Hol_CompID,@Hol_IPAddress,@Hol_Status,@Hol_Delflag ,@Hol_Createdby,GetDate())            
    set @iUpdateOrSave=3              
  end 
  /

CREATE procedure [dbo].[spSAD_UsrOrGrp_Permission]
(	
@SGP_ID int,
@SGP_ModID int,
@SGP_LevelGroup varchar(1),
@SGP_LevelGroupID int,
@SGP_View int,
@SGP_New int,
@SGP_SaveOrUpdate int,
@SGP_Approve int,
@SGP_ActivateOrDeactivate int,
@SGP_Report int,
@SGP_Download int,
@SGP_Annotaion int,
@SGP_Exception int,
@SGP_CreatedBy int,
@SGP_CreatedOn datetime,
@SGP_ApprovedBy int,
@SGP_ApprovedOn datetime,
@SGP_UpdatedBy int,
@SGP_UpdatedOn datetime,
@SGP_Status Varchar(2),
@SGP_DelFlag varchar(1),
@SGP_CompID int,
@iUpdateOrSave int Output,
@iOper int Output
)
 as
  if exists(Select Sgp_Id from Sad_UsrOrGrp_permission where  Sgp_ModId=@Sgp_ModId and  SGP_LevelGroup=@SGP_LevelGroup and SGP_LevelGroupID=@SGP_LevelGroupID )
   begin
    Update Sad_UsrOrGrp_permission set Sgp_ModId=@Sgp_ModId, SGP_LevelGroup=@SGP_LevelGroup, SGP_LevelGroupID=@SGP_LevelGroupID, SGP_View=@SGP_View, SGP_New=@SGP_New,
	SGP_SaveOrUpdate=@SGP_SaveOrUpdate,SGP_Approve=@SGP_Approve,SGP_ActivateOrDeactivate=@SGP_ActivateOrDeactivate,SGP_Report=@SGP_Report,SGP_Download=@SGP_Download,SGP_Annotaion=@SGP_Annotaion,
	SGP_Exception=@SGP_Exception,SGP_UpdatedBy=@SGP_UpdatedBy,SGP_UpdatedOn=GetDate(), SGP_Status=@SGP_Status	
	where Sgp_ModId=@Sgp_ModId and SGP_LevelGroup=@SGP_LevelGroup and SGP_LevelGroupID=@SGP_LevelGroupID and SGP_CompID=@SGP_CompID
	set @iUpdateOrSave=2
	set @iOper = @Sgp_Id
  end
else
	begin
	set @Sgp_Id=(select isnull(max(SGP_ID)+1,1) from Sad_UsrOrGrp_permission)
	Insert into Sad_UsrOrGrp_permission (Sgp_Id,Sgp_ModId,SGP_LevelGroup, SGP_LevelGroupID,SGP_View,SGP_New,SGP_SaveOrUpdate,SGP_Approve,SGP_ActivateOrDeactivate,SGP_Report,
	SGP_CreatedBy,SGP_CreatedOn,SGP_Status,SGP_DelFlag,SGP_CompID,SGP_Download,SGP_Annotaion,SGP_Exception) values
	(@Sgp_Id, @Sgp_ModId, @SGP_LevelGroup, @SGP_LevelGroupID,@SGP_View,@SGP_New,@SGP_SaveOrUpdate,@SGP_Approve,@SGP_ActivateOrDeactivate,@SGP_Report,
	@SGP_CreatedBy, getdate(),@SGP_Status,@SGP_DelFlag,@SGP_CompID,@SGP_Download,@SGP_Annotaion,@SGP_Exception)
	set @iUpdateOrSave=3
	set @iOper = @Sgp_Id
	end

 /

 CREATE Procedure [dbo].[SpAudit_Log_Form_Operations]          
(                
@ALFO_UserID int,
@ALFO_Module varchar(50),
@ALFO_Form varchar(500),
@ALFO_Event varchar(500),
@ALFO_MasterID int,
@ALFO_MasterName varchar(8000),
@ALFO_SubMasterID int,
@ALFO_SubMasterName varchar(8000),
@ALFO_IPAddress varchar(25),
@ALFO_CompID int                                     
)                      
As
Begin
Declare @ALFO_PKID int
set @ALFO_PKID=(select isnull(max(ALFO_PKID)+1,1) from Audit_Log_Form_Operations)
insert into Audit_Log_Form_Operations(ALFO_PKID,ALFO_UserID,ALFO_Date,ALFO_Module,ALFO_Form,ALFO_Event,ALFO_MasterID,ALFO_MasterName,ALFO_SubMasterID,ALFO_SubMasterName,ALFO_IPAddress,ALFO_CompID)
Values(@ALFO_PKID,@ALFO_UserID,GetDate(),@ALFO_Module,@ALFO_Form,@ALFO_Event,@ALFO_MasterID,@ALFO_MasterName,@ALFO_SubMasterID,@ALFO_SubMasterName,@ALFO_IPAddress,@ALFO_CompID)
End 

/

CREATE Procedure [dbo].[spGeneralMaster]        
(        
@Mas_ID int,          
@Mas_Desc Varchar(5000),  
@Mas_Delflag Varchar(1),  
@Mas_Master int,  
@Mas_Remarks varchar(5000),  
@Mas_CompID int,  
@Mas_CrBy int,  
@Mas_CrOn datetime,  
@Mas_Status VarChar (200),  
@Mas_Operation char(1), 
@Mas_IPAddress Varchar(25),
@iUpdateOrSave int Output,      
@iOper int Output      

)         
 as             
   if exists(select Mas_ID from acc_general_master where Mas_ID=@Mas_ID and Mas_CompID = @Mas_CompID)              
     begin           
       Update acc_general_master set mas_desc=@mas_desc,mas_remarks=@mas_remarks,Mas_Status='U',Mas_Operation='U',Mas_IPAddress=@Mas_IPAddress 
	   Where Mas_ID=@Mas_ID and Mas_CompID = @Mas_CompID  and Mas_Master=@Mas_Master 
	   set @iUpdateOrSave=2          
       set @iOper = (select Mas_ID from acc_general_master where Mas_Master=@Mas_Master and Mas_Desc=@Mas_Desc and Mas_CompID = @Mas_CompID)
	 end                    
   else         
     begin    
		set @Mas_ID=(select isnull(max(Mas_ID)+1,1) from acc_general_master)        
	    Insert into acc_general_master (Mas_ID,Mas_Desc,Mas_Delflag,Mas_Master,mas_remarks,Mas_CompID,Mas_CrBy,Mas_CrOn,Mas_Status,Mas_Operation,Mas_IPAddress)
		values(@Mas_ID,@Mas_Desc,@Mas_Delflag,@Mas_Master,@mas_remarks,@Mas_CompID,@Mas_CrBy,GetDate(),@Mas_Status,@Mas_Operation,@Mas_IPAddress)        
	    set @iUpdateOrSave=3       
	    set @iOper = @Mas_ID          
     end 

/

CREATE Procedure [dbo].[spMSTCustomerMaster]( 
@CUST_ID int ,
@CUST_NAME varchar(150),
@CUST_CODE	varchar	(50),
@CUST_EMAIL	varchar	(50),
@CUST_INDTYPEID	int,
@CUST_COMM_ADDRESS varchar(1000),
@CUST_COMM_CITY	varchar	(100),
@CUST_COMM_PIN	varchar(10),
@CUST_COMM_STATE varchar(100),
@CUST_COMM_COUNTRY varchar(100),
@CUST_COMM_FAX	varchar	(50),
@CUST_COMM_TEL	varchar(50),
@CUST_ADDRESS	varchar(1000),
@CUST_CITY	varchar(100),
@CUST_PIN	varchar(10),
@CUST_STATE	varchar(100),
@CUST_COUNTRY	varchar(100),
@CUST_FAX	varchar(50),
@CUST_TELPHONE	varchar	(50),
@CUST_STATUS nchar(4),
@CUST_DELFLG varchar(1),
@CUST_CRON datetime,
@CUST_CRBY int,
@Cust_SaleType	int,
@CUST_CompID	int,
@CUST_UpdatedBy int ,
@CUST_UpdatedOn datetime,
@CUST_Operation varchar(20),
@CUST_IPAddress varchar(25),
@CUST_COMM_PhFirst varchar(50),
@CUST_COMM_PhSecond varchar(50),
@CUST_PhFirst varchar(50),
@CUST_PhSecond varchar(50),
@CUST_TAXPayableCategory Int,
@CUST_GSTRForm Int,
@CUST_Periodicity Int,
@CUST_ProvisionalNo Varchar(500),
@CUST_FinalNo Varchar(500),
@iUpdateOrSave int Output,    
@iOper int Output 
)
as  
 if exists(select CUST_ID from MST_Customer_Master where CUST_CODE=@CUST_CODE And CUST_CompID=@CUST_CompID)    
  begin 

Set @CUST_STATUS='U'
Set @CUST_DELFLG='U'
set @CUST_Operation='U'
  update MST_Customer_Master set  CUST_NAME=@CUST_NAME,CUST_EMAIL=@CUST_EMAIL,
CUST_INDTYPEID=@CUST_INDTYPEID,CUST_COMM_ADDRESS=@CUST_COMM_ADDRESS,CUST_COMM_CITY=@CUST_COMM_CITY,CUST_COMM_PIN=@CUST_COMM_PIN,
CUST_COMM_STATE =@CUST_COMM_STATE,CUST_COMM_COUNTRY=@CUST_COMM_COUNTRY,CUST_COMM_FAX=@CUST_COMM_FAX,CUST_COMM_TEL=@CUST_COMM_TEL,
CUST_ADDRESS=@CUST_ADDRESS,CUST_CITY=@CUST_CITY,CUST_PIN=@CUST_PIN,CUST_STATE=@CUST_STATE,CUST_COUNTRY=@CUST_COUNTRY,
CUST_FAX=@CUST_FAX,CUST_TELPHONE=@CUST_TELPHONE,
CUST_STATUS=@CUST_STATUS,CUST_DELFLG=@CUST_DELFLG,@Cust_SaleType=Cust_SaleType,
CUST_UpdatedBy=@CUST_UpdatedBy,CUST_UpdatedOn=GetDate(),
CUST_Operation =@CUST_Operation,CUST_IPAddress=@CUST_IPAddress,CUST_COMM_PhFirst=@CUST_COMM_PhFirst,CUST_COMM_PhSecond=@CUST_COMM_PhSecond,CUST_PhFirst=@CUST_PhFirst,CUST_PhSecond=@CUST_PhSecond,
CUST_TAXPayableCategory=@CUST_TAXPayableCategory,CUST_GSTRForm=@CUST_GSTRForm,CUST_Periodicity=@CUST_Periodicity,CUST_ProvisionalNo=@CUST_ProvisionalNo,CUST_FinalNo=@CUST_FinalNo 
 where  CUST_CODE=@CUST_CODE And CUST_CompID=@CUST_CompID
  set @iUpdateOrSave=2        
  set @iOper =(select CUST_ID from MST_Customer_Master where  CUST_CODE=@CUST_CODE And CUST_CompID=@CUST_CompID)
End
  else     
 begin 
 set @CUST_ID=(select isnull(max(CUST_ID)+1,1) from MST_Customer_Master)    
  insert into MST_Customer_Master (CUST_ID,CUST_NAME,CUST_CODE,CUST_EMAIL,
CUST_INDTYPEID,CUST_COMM_ADDRESS,CUST_COMM_CITY,CUST_COMM_PIN,CUST_COMM_STATE,
CUST_COMM_COUNTRY,CUST_COMM_FAX,CUST_COMM_TEL,
CUST_ADDRESS,CUST_CITY,CUST_PIN,CUST_STATE,CUST_COUNTRY,
CUST_FAX,CUST_TELPHONE,CUST_STATUS,CUST_DELFLG,CUST_CRON,CUST_CRBY,Cust_SaleType,CUST_CompID,
CUST_Operation,CUST_IPAddress,CUST_COMM_PhFirst,CUST_COMM_PhSecond,CUST_PhFirst,CUST_PhSecond,CUST_TAXPayableCategory,CUST_GSTRForm,CUST_Periodicity,CUST_ProvisionalNo,CUST_FinalNo)
 values  (@CUST_ID,@CUST_NAME,@CUST_CODE,@CUST_EMAIL,
@CUST_INDTYPEID,@CUST_COMM_ADDRESS,@CUST_COMM_CITY,@CUST_COMM_PIN,@CUST_COMM_STATE ,
@CUST_COMM_COUNTRY,@CUST_COMM_FAX,@CUST_COMM_TEL,
@CUST_ADDRESS,@CUST_CITY,@CUST_PIN,@CUST_STATE,@CUST_COUNTRY,
@CUST_FAX,@CUST_TELPHONE,@CUST_STATUS,@CUST_DELFLG,GetDate(),@CUST_CRBY,
@Cust_SaleType,@CUST_CompID,@CUST_Operation,@CUST_IPAddress,@CUST_COMM_PhFirst,@CUST_COMM_PhSecond,@CUST_PhFirst,@CUST_PhSecond,@CUST_TAXPayableCategory,@CUST_GSTRForm,@CUST_Periodicity,@CUST_ProvisionalNo,@CUST_FinalNo) 
   set @iUpdateOrSave=3     
   set @iOper = @CUST_ID  
End

/

CREATE Procedure [dbo].[spInventoryMaster]          
(          
@Inv_ID int,            
@Inv_Code Varchar(50),    
@Inv_Description  Varchar(5000),          
@Inv_Parent  int,    
@Inv_Flag Varchar(1),    
@Inv_Unit int,    
@Inv_AlterUnit int,    
@Inv_Price Varchar(100),    
@Inv_Excise Varchar(100),    
@Inv_Vat Varchar(100),    
@Inv_CreatedBy int,    
@Inv_CreatedOn  datetime,       
@Inv_CompID int,    
@Inv_PerPieces int, 
@INV_MRP Float,
@INV_Retail Float,
@INV_PreDeterminedPrice Float,
@INV_EffeFrom DateTime,
@INV_EffeTo DateTime,
@INV_Others Float,
@Inv_Size Varchar(50),   
@Inv_Color Varchar(50),   
@Inv_Acode Varchar(50),
@Inv_Operation char(1),
@Inv_IPAddress Varchar(25),   
@Inv_Ccode Varchar(25),
@Debug bit,    
@iUpdateOrSave int Output,        
@iOper int Output        
)            
 as         
 if @Debug=1  
 begin                  
 Update Inventory_Master set Inv_Code=@Inv_Code,Inv_Description=@Inv_Description,Inv_Unit=@Inv_Unit,Inv_AlterUnit=@Inv_AlterUnit,    
  Inv_Price=@Inv_Price,Inv_Excise=@Inv_Excise,Inv_Vat=@Inv_Vat,Inv_PerPieces=@Inv_PerPieces,INV_MRP=@INV_MRP,INV_Retail=@INV_Retail,    
  INV_PreDeterminedPrice=@INV_PreDeterminedPrice,INV_EffeFrom=@INV_EffeFrom,INV_EffeTo=@INV_EffeTo,INV_Others=@INV_Others,
  Inv_Size=@Inv_Size,Inv_Color=@Inv_Color,Inv_Acode=@Inv_Acode,INv_Operation=@INv_Operation,INV_IPAddress=@INV_IPAddress,INV_Ccode=@Inv_Ccode  
  Where Inv_ID=@Inv_ID and Inv_CompID = @Inv_CompID    
  set @iUpdateOrSave=2            
  set @iOper = @Inv_ID              
 end                  
else           
begin       
 set @Inv_ID=(select isnull(max(Inv_ID)+1,1) from Inventory_Master)          
  Insert into Inventory_Master (Inv_ID,Inv_Code,Inv_Description,Inv_Parent,Inv_Flag,     
  Inv_Unit,Inv_AlterUnit,Inv_Price,Inv_Excise,Inv_Vat,    
  Inv_CreatedBy,Inv_CreatedOn,Inv_CompID,Inv_PerPieces,INV_MRP,INV_Retail,INV_PreDeterminedPrice,INV_EffeFrom,INV_EffeTo,INV_Others,Inv_Size,Inv_Color,Inv_Acode,INv_Operation,INV_IPAddress,INV_Ccode)          
  values          
   (@Inv_ID,@Inv_Code,@Inv_Description,@Inv_Parent,@Inv_Flag,     
  @Inv_Unit,@Inv_AlterUnit,@Inv_Price,@Inv_Excise,@Inv_Vat,    
  @Inv_CreatedBy,GetDate(),@Inv_CompID,@Inv_PerPieces,@INV_MRP,@INV_Retail,@INV_PreDeterminedPrice,@INV_EffeFrom,@INV_EffeTo,@INV_Others,@Inv_Size,@Inv_Color,@Inv_Acode,@INv_Operation,@INV_IPAddress,@Inv_Ccode)     
  set @iUpdateOrSave=3         
  set @iOper = @Inv_ID             
  end 

/

CREATE Procedure [dbo].[spInventory_Master_History]                  
(                  
@InvH_ID int,   
@InvH_INV_ID int,
@InvH_Flag varchar(1),
@InvH_Unit int,
@InvH_AlterUnit int,
@InvH_CreatedBy int,
@InvH_CreatedOn datetime,
@InvH_CompID int,
@InvH_PerPieces int,
@INVH_MRP float,
@INVH_Retail float,
@INVH_PreDeterminedPrice float,
@INVH_EffeFrom datetime,
@INVH_EffeTo datetime,
@InvH_Operation char(1),
@InvH_IPAddress varchar(25),
@INVH_CategoryID varchar(200),
@INVH_RetailEffeFrom datetime,
@INVH_RetailEffeTo datetime,
@INVH_PurchaseEffeFrom datetime,
@INVH_PurchaseEffeTo datetime,
@iUpdateOrSave int Output,                
@iOper int Output                
)                    
 as                       
  if exists(select InvH_ID from Inventory_Master_History where InvH_ID=@InvH_ID And INVH_CompID=@INVH_CompID)                        
   begin                     
    Update Inventory_Master_History set InvH_Unit=@InvH_Unit,InvH_AlterUnit=@InvH_AlterUnit,InvH_PerPieces=@InvH_PerPieces,INVH_MRP=@INVH_MRP,INVH_Retail=@INVH_Retail,
	INVH_PreDeterminedPrice=@INVH_PreDeterminedPrice,INVH_EffeFrom=@INVH_EffeFrom,INVH_EffeTo=@INVH_EffeTo,InvH_Operation='U',InvH_IPAddress=@InvH_IPAddress,
	INVH_CategoryID=@INVH_CategoryID,INVH_RetailEffeFrom=@INVH_RetailEffeFrom,INVH_RetailEffeTo=@INVH_RetailEffeTo,INVH_PurchaseEffeFrom=@INVH_PurchaseEffeFrom,INVH_PurchaseEffeTo=@INVH_PurchaseEffeTo
  Where InvH_ID=@InvH_ID And INVH_CompID=@INVH_CompID
  set @iUpdateOrSave=2                    
    set @iOper = (select InvH_ID from Inventory_Master_History where InvH_ID=@InvH_ID And INVH_CompID=@INVH_CompID)                              
 end                              
  else                                      
  begin              
   set @InvH_ID=(select isnull(max(InvH_ID)+1,1) from Inventory_Master_History)                  
   Insert into Inventory_Master_History(InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,InvH_AlterUnit,InvH_CreatedBy,InvH_CreatedOn,InvH_CompID,InvH_PerPieces,INVH_MRP,
   INVH_Retail,INVH_PreDeterminedPrice,INVH_EffeFrom,INVH_EffeTo,InvH_Operation,InvH_IPAddress,INVH_CategoryID,INVH_RetailEffeFrom,INVH_RetailEffeTo,
   INVH_PurchaseEffeFrom,INVH_PurchaseEffeTo)          
   values (@InvH_ID,@InvH_INV_ID,@InvH_Flag,@InvH_Unit,@InvH_AlterUnit,@InvH_CreatedBy,@InvH_CreatedOn,@InvH_CompID,@InvH_PerPieces,@INVH_MRP,@INVH_Retail,
   @INVH_PreDeterminedPrice,@INVH_EffeFrom,@INVH_EffeTo,@InvH_Operation,@InvH_IPAddress,@INVH_CategoryID,@INVH_RetailEffeFrom,
   @INVH_RetailEffeTo,@INVH_PurchaseEffeFrom,@INVH_PurchaseEffeTo)             
   set @iUpdateOrSave=3                 
   set @iOper = @InvH_ID                  
  end

/

CREATE Procedure [dbo].[spInwardMasterDetails]                    
( 
@PGD_ID int,
@PGD_MasterID int,
@PGD_OrderID int,
@PGD_CommodityID int,
@PGD_DescriptionID int,
@PGD_HistoryID int,
@PGD_UnitID int,
@PGD_MRP decimal(10,4),
@PGD_OrderQnt decimal(10,4),
@PGD_ReceivedQnt decimal(10,4),
@PGD_RejectedQnt decimal(10,4),
@PGD_Accepted decimal(10,4),
@PGD_Excess decimal(10,4),
@PGD_ManufactureDate datetime,
@PGD_ExpireDate datetime,
@PGD_Status varchar(1),
@PGD_CompID int,
@PGD_PendingQnt int,
@PGD_Delflag varchar(1),
@PGD_Operation Char(1),
@PGD_IPAddress Varchar(25),
@PGD_BatchNumber  Varchar(200),
@iUpdateOrSave int Output,                  
@iOper int Output                  
)                     
 as                         
                     
    begin                
  set @PGD_ID=(select isnull(max(PGD_ID)+1,1) from Purchase_GIN_Details)                    
  Insert into Purchase_GIN_Details(PGD_ID,PGD_MasterID ,PGD_CommodityID,PGD_OrderID,PGD_DescriptionID,PGD_HistoryID,PGD_UnitID,PGD_MRP,PGD_OrderQnt,PGD_ReceivedQnt,PGD_RejectedQnt,PGD_Accepted,PGD_Excess,PGD_ManufactureDate,PGD_ExpireDate,PGD_Status,PGD_CompID,PGD_PendingQnt,PGD_Delflag,PGD_Operation,PGD_IPAddress,PGD_BatchNumber)              
  values(@PGD_ID,@PGD_MasterID ,@PGD_CommodityID ,@PGD_OrderID,@PGD_DescriptionID,@PGD_HistoryID,@PGD_UnitID,@PGD_MRP,@PGD_OrderQnt,@PGD_ReceivedQnt,@PGD_RejectedQnt,@PGD_Accepted,@PGD_Excess,@PGD_ManufactureDate,@PGD_ExpireDate,@PGD_Status,@PGD_CompID,@PGD_PendingQnt,@PGD_Delflag,@PGD_Operation,@PGD_IPAddress,@PGD_BatchNumber)              
  set @iUpdateOrSave=3                   
  set @iOper = @PGD_ID                        
    end 

/

CREATE PROCEDURE [dbo].[spAllocateSalesDetails]        
(                
@SAD_ID int,
@SAD_MasterID int,
@SAD_Commodity int,
@SAD_DescID int,
@SAD_HisotryID int,
@SAD_OpeningBal int,
@SAD_UnitID int,
@SAD_MRP Money,
@SAD_OrderQnt Float,
@SAD_OrderAmount money,
@SAD_Discount Money,
@SAD_DiscountAMount money,
@SAD_TotalAmount Money,
@SAD_PlacedQnt Float,
@SAD_PlacedQntAmount Money,
@SAD_PlacedDiscount Money,
@SAD_PlacedDiscountAmount money,
@SAD_PlacedTotalAmount money,
@SAD_ClosingBal Float,
@SAD_CompID int,
@SAD_YearID int,
@SAD_Operation char(1),        
@SAD_IPAddress Varchar(25),
@SAD_VAT Money,
@SAD_VATAmount Money,
@SAD_CST Money,
@SAD_CSTAmount Money,
@SAD_Exice Money,
@SAD_ExiceAmount Money,
@SAD_PendingQty float,
@iUpdateOrSave int Output,              
@iOper int Output              
)                   
AS        
             
BEGIN        
set @SAD_ID=(select isnull(max(SAD_ID)+1,1) from Sales_Allocate_Details)        
Insert into Sales_Allocate_Details(SAD_ID,SAD_MasterID,SAD_Commodity,SAD_DescID,SAD_HisotryID,SAD_OpeningBal,SAD_UnitID,SAD_MRP,SAD_OrderQnt,SAD_OrderAmount,SAD_Discount,
SAD_DiscountAMount,SAD_TotalAmount,SAD_PlacedQnt,SAD_PlacedQntAmount,SAD_PlacedDiscount,SAD_PlacedDiscountAmount,SAD_PlacedTotalAmount,SAD_ClosingBal,SAD_CompID,SAD_YearID,SAD_Operation,SAD_IPAddress,SAD_VAT,SAD_VATAmount,SAD_CST,SAD_CSTAmount,SAD_Exice,SAD_ExiceAmount,SAD_PendingQty)        
Values(@SAD_ID,@SAD_MasterID,@SAD_Commodity,@SAD_DescID,@SAD_HisotryID,@SAD_OpeningBal,@SAD_UnitID,@SAD_MRP,@SAD_OrderQnt,@SAD_OrderAmount,@SAD_Discount,@SAD_DiscountAMount,
@SAD_TotalAmount,@SAD_PlacedQnt,@SAD_PlacedQntAmount,@SAD_PlacedDiscount,@SAD_PlacedDiscountAmount,@SAD_PlacedTotalAmount,@SAD_ClosingBal,@SAD_CompID,@SAD_YearID,@SAD_Operation,@SAD_IPAddress,@SAD_VAT,@SAD_VATAmount,@SAD_CST,@SAD_CSTAmount,@SAD_Exice,@SAD_ExiceAmount,@SAD_PendingQty)        
    set @iUpdateOrSave=3               
    set @iOper = @SAD_ID          
END

/

CREATE PROCEDURE [dbo].[spSales_Return_Details]    
(            
@SRD_ID int,
@SRD_MasterID int,
@SRD_CommodityID int,
@SRD_DescriptionID int,
@SRD_HistoryID int,
@SRD_SaleQnty int,
@SRD_ReturnQnty int,
@SRD_Rate money,
@SRD_UnitOfMeasurement int,
@SRD_Discount money,
@SRD_DiscountAmount money,
@SRD_VAT money,
@SRD_VATAmount money,
@SRD_CST money,
@SRD_CSTAmount money,
@SRD_Excise money,
@SRD_ExciseAmount money,
@SRD_TotalAmount money,
@SRD_CompID int,
@SRD_YearID int,
@SRD_Return int,
@SRD_RateAmount Money,
@SRD_Status Varchar(20),
@SRD_Operation Varchar(1),
@SRD_IPAddress Varchar(25),
@SRD_EnteredPrice money,
@SRD_DifferencePrice money,
@iUpdateOrSave int Output,          
@iOper int Output          
)               
AS    
If exists(select SRD_ID from Sales_Return_Details where SRD_MasterID=@SRD_MasterID And SRD_CommodityID=@SRD_CommodityID And SRD_DescriptionID=@SRD_DescriptionID And SRD_HistoryID=@SRD_HistoryID And SRD_CompID=@SRD_CompID And SRD_YearID=@SRD_YearID)     
 Begin      
 Update Sales_Return_Details Set SRD_ReturnQnty=@SRD_ReturnQnty,SRD_Return=@SRD_Return,SRD_RateAmount=@SRD_RateAmount,SRD_Operation=@SRD_Operation,SRD_IPAddress=@SRD_IPAddress,SRD_EnteredPrice=@SRD_EnteredPrice,SRD_DifferencePrice=@SRD_DifferencePrice
 Where SRD_MasterID=@SRD_MasterID And SRD_CommodityID=@SRD_CommodityID And SRD_DescriptionID=@SRD_DescriptionID And SRD_HistoryID=@SRD_HistoryID And SRD_CompID=@SRD_CompID And SRD_YearID=@SRD_YearID
Set @iUpdateOrSave=2      
Set @iOper = (select SRD_ID from Sales_Return_Details where SRD_MasterID=@SRD_MasterID And  SRD_CommodityID=@SRD_CommodityID And SRD_DescriptionID=@SRD_DescriptionID And SRD_HistoryID=@SRD_HistoryID And SRD_CompID=@SRD_CompID And SRD_YearID=@SRD_YearID)  
   
End    
Else           
BEGIN    
set @SRD_ID=(select isnull(max(SRD_ID)+1,1) from Sales_Return_Details)    
Insert into Sales_Return_Details(SRD_ID,SRD_MasterID,SRD_CommodityID,SRD_DescriptionID,SRD_HistoryID,SRD_SaleQnty,SRD_ReturnQnty,SRD_Rate,SRD_UnitOfMeasurement,SRD_Discount,SRD_DiscountAmount,SRD_VAT,SRD_VATAmount,SRD_CST,SRD_CSTAmount,SRD_Excise,SRD_ExciseAmount,SRD_TotalAmount,SRD_CompID,SRD_YearID,SRD_Return,SRD_RateAmount,SRD_Status,SRD_Operation,SRD_IPAddress,SRD_EnteredPrice,SRD_DifferencePrice)    
Values(@SRD_ID,@SRD_MasterID,@SRD_CommodityID,@SRD_DescriptionID,@SRD_HistoryID,@SRD_SaleQnty,@SRD_ReturnQnty,@SRD_Rate,@SRD_UnitOfMeasurement,@SRD_Discount,@SRD_DiscountAmount,@SRD_VAT,@SRD_VATAmount,@SRD_CST,@SRD_CSTAmount,@SRD_Excise,@SRD_ExciseAmount,@SRD_TotalAmount,@SRD_CompID,@SRD_YearID,@SRD_Return,@SRD_RateAmount,@SRD_Status,@SRD_Operation,@SRD_IPAddress,@SRD_EnteredPrice,@SRD_DifferencePrice)    
    set @iUpdateOrSave=3           
    set @iOper = @SRD_ID 
END

/

CREATE Procedure [dbo].[spSales_Sample_Order_Master]                  
(                  
@SSOM_ID int,
@SSOM_SampleOrderNo varchar(100),
@SSOM_SampleDate datetime,
@SSOM_Party int,
@SSOM_PartyCode varchar (200),   
@SSOM_ContantNo varchar(20),
@SSOM_Address varchar (5000),
@SSOM_ModeOfShipping int,
@SSOM_ShippingDate datetime,
@SSOM_Communication int,
@SSOM_IssuedBy int,
@SSOM_IssuedOn datetime,
@SSOM_DelFlag varchar(1),
@SSOM_Status varchar(1),
@SSOM_CreatedBy int,
@SSOM_CreatedOn datetime,
@SSOM_UpdatedBy int,
@SSOM_UpdatedOn datetime,
@SSOM_Operation Char(1),
@SSOM_IPAddress VarChar(25),
@SSOM_CompID int,
@SSOM_YearID int,   
@iUpdateOrSave int Output,                
@iOper int Output                
)                    
 as                       
  if exists(select SSOM_ID from Sales_Sample_Order_Master where SSOM_SampleOrderNo=@SSOM_SampleOrderNo and SSOM_Party=@SSOM_Party and SSOM_CompID = @SSOM_CompID And SSOM_YearID=@SSOM_YearID)                        
   begin  
   Update Sales_Sample_Order_Master Set SSOM_SampleDate=@SSOM_SampleDate,SSOM_PartyCode=@SSOM_PartyCode,SSOM_ContantNo=@SSOM_ContantNo,SSOM_Address=@SSOM_Address,SSOM_ModeOfShipping=@SSOM_ModeOfShipping,SSOM_ShippingDate=@SSOM_ShippingDate,SSOM_Communication=@SSOM_Communication,
   SSOM_IssuedBy=@SSOM_IssuedBy,SSOM_IssuedOn=@SSOM_IssuedOn,SSOM_Operation='U',SSOM_IPAddress=@SSOM_IPAddress 
   Where SSOM_SampleOrderNo=@SSOM_SampleOrderNo and SSOM_Party=@SSOM_Party and SSOM_CompID = @SSOM_CompID And SSOM_YearID=@SSOM_YearID
     set @iUpdateOrSave=2                    
    set @iOper = (select SSOM_ID from Sales_Sample_Order_Master where SSOM_SampleOrderNo=@SSOM_SampleOrderNo and SSOM_Party=@SSOM_Party and SSOM_CompID = @SSOM_CompID And SSOM_YearID=@SSOM_YearID)                                 
 end                              
  else                                   
        begin              
  set @SSOM_ID=(select isnull(max(SSOM_ID)+1,1) from Sales_Sample_Order_Master)                  
  Insert into Sales_Sample_Order_Master(SSOM_ID,SSOM_SampleOrderNo,SSOM_SampleDate,SSOM_Party,SSOM_PartyCode,SSOM_ContantNo,SSOM_Address,SSOM_ModeOfShipping,SSOM_ShippingDate,SSOM_Communication,SSOM_IssuedBy,SSOM_IssuedOn,SSOM_DelFlag,SSOM_Status,SSOM_CreatedBy,SSOM_CreatedOn,SSOM_Operation,SSOM_IPAddress,SSOM_CompID,SSOM_YearID)           
  values                  
  (@SSOM_ID,@SSOM_SampleOrderNo,@SSOM_SampleDate,@SSOM_Party,@SSOM_PartyCode,@SSOM_ContantNo,@SSOM_Address,@SSOM_ModeOfShipping,@SSOM_ShippingDate,@SSOM_Communication,@SSOM_IssuedBy,@SSOM_IssuedOn,@SSOM_DelFlag,@SSOM_Status,@SSOM_CreatedBy,@SSOM_CreatedOn,@SSOM_Operation,@SSOM_IPAddress,@SSOM_CompID,@SSOM_YearID)              
  set @iUpdateOrSave=3                 
  set @iOper = @SSOM_ID                     
    end 

/

CREATE Procedure [dbo].[spACC_Opening_Balance]    
(    
@Opn_Id int,     
@Opn_SerialNo int,      
@Opn_Date datetime,     
@Opn_AccHead int,    
@Opn_GLCode varchar(50),    
@Opn_DebitAmt varchar(20),    
@Opn_CreditAmount Varchar(20),    
@Opn_YearId int,    
@Opn_CreatedBy int,    
@Opn_CreatedOn datetime,    
@Opn_ApprovedBy int,    
@Opn_ApprovedOn datetime,     
@Opn_Status varchar(1),    
@Opn_CompId int,    
@Opn_GlId int,    
@Opn_Operation varchar(20),    
@Opn_IPAddress varchar(25), 
@Opn_CustType int,
@Opn_IndType int,
@Opn_Manual int,
@Opn_ZoneID int,
@Opn_RegionID Int,
@Opn_AreaID int,
@Opn_BranchID int,
@iUpdateOrSave int Output,    
@iOper int Output     
)    
as   
       
 begin   
set @Opn_Id=(select isnull(max(Opn_Id)+1,1) from ACC_Opening_Balance)        
  insert into ACC_Opening_Balance (Opn_Id,Opn_SerialNo,Opn_Date,Opn_AccHead,    
Opn_GLCode,Opn_DebitAmt,Opn_CreditAmount,    
Opn_YearId,Opn_CreatedBy,Opn_CreatedOn,Opn_ApprovedBy,Opn_ApprovedOn,    
Opn_Status,Opn_CompId,Opn_GlId,Opn_Operation,Opn_IPAddress,Opn_CustType,Opn_IndType,Opn_Manual,Opn_ZoneID,Opn_RegionID,Opn_AreaID,Opn_BranchID )    
values (@Opn_Id,@Opn_SerialNo,@Opn_Date,@Opn_AccHead,    
@Opn_GLCode,@Opn_DebitAmt,@Opn_CreditAmount,    
@Opn_YearId,@Opn_CreatedBy,GetDate(),@Opn_CreatedBy,GetDate(),    
@Opn_Status,@Opn_CompId,@Opn_GlId,@Opn_Operation,@Opn_IPAddress,@Opn_CustType,@Opn_IndType,@Opn_Manual,@Opn_ZoneID ,@Opn_RegionID ,@Opn_AreaID ,@Opn_BranchID)      
   set @iUpdateOrSave=3         
   set @iOper = @Opn_Id     
end   

/

CREATE PROCEDURE [dbo].[spAcc_Transactions_Details]        
(                
@ATD_ID int ,
@ATD_TransactionDate datetime ,
@ATD_TrType int ,
@ATD_BillId int ,
@ATD_PaymentType int ,
@ATD_Head int ,
@ATD_GL int ,
@ATD_SubGL int ,
@ATD_DbOrCr int ,
@ATD_Debit money ,
@ATD_Credit money ,
@ATD_CreatedBy int,
@ATD_Status varchar(1) ,
@ATD_YearID int ,
@ATD_CompID int ,
@ATD_Operation varchar(1) ,
@ATD_IPAddress varchar(100),
@ATD_ZoneID int,
@ATD_RegionID int,
@ATD_AreaID int,		
@ATD_BranchID int,
@ATD_OpenDebit money,
@ATD_OpenCredit money,
@ATD_ClosingDebit money,
@ATD_ClosingCredit money,
@ATD_SeqReferenceNum int,
@iUpdateOrSave int Output,
@iOper int Output
)
AS
If exists(select ATD_ID from Acc_Transactions_Details where ATD_ID=@ATD_ID And ATD_TrType=@ATD_TrType And ATD_CompID=@ATD_CompID And ATD_YearID=@ATD_YearID)
 Begin
 Update Acc_Transactions_Details Set ATD_Head=@ATD_Head,ATD_GL=@ATD_GL,ATD_SubGL=@ATD_SubGL,ATD_DbOrCr=@ATD_DbOrCr,ATD_Debit=@ATD_Debit,ATD_Credit=@ATD_Credit,
 ATD_OpenDebit=@ATD_OpenDebit,ATD_OpenCredit=@ATD_OpenCredit,ATD_ClosingDebit=@ATD_ClosingDebit,ATD_ClosingCredit=@ATD_ClosingCredit,ATD_SeqReferenceNum=@ATD_SeqReferenceNum
 Where ATD_ID=@ATD_ID And ATD_TrType=@ATD_TrType And ATD_CompID=@ATD_CompID And ATD_YearID=@ATD_YearID
Set @iUpdateOrSave=2
Set @iOper = (select ATD_ID from Acc_Transactions_Details where ATD_ID=@ATD_ID And ATD_TrType=@ATD_TrType And ATD_CompID=@ATD_CompID And ATD_YearID=@ATD_YearID)
End
Else
BEGIN
set @ATD_ID=(select isnull(max(ATD_ID)+1,1) from Acc_Transactions_Details)
Insert into Acc_Transactions_Details(ATD_ID,ATD_TransactionDate,ATD_TrType,ATD_BillId,ATD_PaymentType,ATD_Head,ATD_GL,ATD_SubGL,
ATD_DbOrCr,ATD_Debit,ATD_Credit,ATD_CreatedBy,ATD_CreatedOn,ATD_Status,ATD_YearID,ATD_CompID,ATD_Operation,ATD_IPAddress,ATD_ZoneID,ATD_RegionID,ATD_AreaID,ATD_BranchID,ATD_OpenDebit,ATD_OpenCredit,ATD_ClosingDebit,ATD_ClosingCredit,ATD_SeqReferenceNum)
Values(@ATD_ID,@ATD_TransactionDate,@ATD_TrType,@ATD_BillId,@ATD_PaymentType,@ATD_Head,@ATD_GL,@ATD_SubGL,
@ATD_DbOrCr,@ATD_Debit,@ATD_Credit,@ATD_CreatedBy,GetDate(),@ATD_Status,@ATD_YearID,@ATD_CompID,@ATD_Operation,@ATD_IPAddress,@ATD_ZoneID,@ATD_RegionID,@ATD_AreaID,@ATD_BranchID,@ATD_OpenDebit,@ATD_OpenCredit,@ATD_ClosingDebit,@ATD_ClosingCredit,@ATD_SeqReferenceNum)
    set @iUpdateOrSave=3
    set @iOper = @ATD_ID
END

/

CREATE procedure [dbo].[spAcc_Payment_Master](
@Acc_PM_ID int ,
@Acc_PM_TransactionNo varchar(500) ,
@Acc_PM_Party int ,
@Acc_PM_Location int ,
@Acc_PM_TransactionType int ,
@Acc_PM_BillType int ,
@Acc_PM_BillNo varchar(500) ,
@Acc_PM_BillDate datetime ,
@Acc_PM_BillAmount money ,
@Acc_Bill_Narration varchar(max) ,
@Acc_PM_BalanceAmount money,
@Acc_PM_ChequeNo varchar(max) ,
@Acc_PM_ChequeDate datetime ,
@Acc_PM_IFSCCode varchar(max) ,
@Acc_PM_BankName varchar(max) ,
@Acc_PM_BranchName varchar(max) ,
@Acc_PM_CreatedBy int ,
@Acc_PM_YearID int ,
@Acc_PM_CompID int ,
@Acc_PM_IPAddress varchar(200),
@acc_PM_InvoiceDate datetime,
@Acc_PM_PaidAmount money,
@Acc_PM_AttachID Int,
@ACC_PM_ZoneID Int,
@ACC_PM_RegionID Int,
@ACC_PM_AreaID Int,
@ACC_PM_BranchID Int,
@Acc_PM_OrderNO Int,
@Acc_PM_OrderDate Datetime,
@Acc_PM_PaymentType int,
@Acc_PM_BatchNo int,
@Acc_PM_BaseName int,
@Acc_PM_FETotalAmt Varchar(100),
@Acc_PM_Currency Int,
@Acc_PM_DiffAmount Money,
@Acc_PM_CurrencyAmt Money,
@Acc_PM_CurrencyTime Varchar(50),
@Acc_PM_trTypeDetails  int,
@iUpdateOrSave int Output,              
@iOper int Output 
)
as                     
if exists(select * from Acc_payment_master Where Acc_PM_ID=@Acc_PM_ID And Acc_PM_CompID=@Acc_PM_CompID and Acc_PM_YearID=@Acc_PM_YearID)                
 begin  
 update Acc_payment_master set Acc_PM_Party=@Acc_PM_Party,Acc_PM_Location=@Acc_PM_Location,Acc_PM_TransactionType=@Acc_PM_TransactionType,              
 Acc_PM_BillType=@Acc_PM_BillType,Acc_PM_BillNo=@Acc_PM_BillNo,Acc_PM_BillDate=@Acc_PM_BillDate,Acc_PM_BillAmount=@Acc_PM_BillAmount,
 Acc_Bill_Narration=@Acc_Bill_Narration,Acc_PM_BalanceAmount=@Acc_PM_BalanceAmount,Acc_PM_ChequeNo=@Acc_PM_ChequeNo,           
Acc_PM_ChequeDate=@Acc_PM_ChequeDate,Acc_PM_IFSCCode=@Acc_PM_IFSCCode,Acc_PM_BankName=@Acc_PM_BankName,Acc_PM_BranchName=@Acc_PM_BranchName,
 Acc_PM_CreatedBy=@Acc_PM_CreatedBy,Acc_PM_Operation='U',Acc_PM_IPAddress =@Acc_PM_IPAddress,acc_PM_InvoiceDate=@acc_PM_InvoiceDate,
 Acc_PM_PaidAmount=@Acc_PM_PaidAmount,Acc_PM_AttachID=@Acc_PM_AttachID,ACC_PM_ZoneID=@ACC_PM_ZoneID,ACC_PM_RegionID=@ACC_PM_RegionID,
 ACC_PM_AreaID=@ACC_PM_AreaID,ACC_PM_BranchID=@ACC_PM_BranchID,Acc_PM_OrderNO=@Acc_PM_OrderNO,Acc_PM_OrderDate=@Acc_PM_OrderDate,@Acc_PM_PaymentType=Acc_PM_PaymentType,
 Acc_PM_FETotalAmt=@Acc_PM_FETotalAmt,Acc_PM_Currency=@Acc_PM_Currency,Acc_PM_DiffAmount=@Acc_PM_DiffAmount,Acc_PM_CurrencyAmt=@Acc_PM_CurrencyAmt,
 Acc_PM_CurrencyTime=@Acc_PM_CurrencyTime,Acc_PM_trTypeDetails=@Acc_PM_trTypeDetails
 where  Acc_PM_ID=@Acc_PM_ID And Acc_PM_CompID=@Acc_PM_CompID and Acc_PM_YearID=@Acc_PM_YearID              
 set @iUpdateOrSave=2               
 set @iOper =@Acc_PM_ID    
 end    
else       
 begin                
 set @Acc_PM_ID=(select isnull(max(Acc_PM_ID)+1,1) from Acc_payment_master)                
 insert into Acc_payment_master(Acc_PM_ID,Acc_PM_TransactionNo,Acc_PM_Party,Acc_PM_Location,Acc_PM_TransactionType,Acc_PM_BillType,Acc_PM_BillNo,
 Acc_PM_BillDate,Acc_PM_BillAmount,Acc_Bill_Narration,Acc_PM_BalanceAmount,Acc_PM_ChequeNo,Acc_PM_ChequeDate,Acc_PM_IFSCCode,Acc_PM_BankName,
 Acc_PM_BranchName,Acc_PM_CreatedBy,Acc_PM_CreatedOn,Acc_PM_Status,Acc_PM_IPAddress,Acc_PM_CompID ,Acc_PM_YearID,Acc_PM_Operation,
 acc_PM_InvoiceDate,Acc_PM_PaidAmount,Acc_PM_AttachID,ACC_PM_ZoneID,ACC_PM_RegionID,ACC_PM_AreaID,ACC_PM_BranchID,Acc_PM_OrderNO,Acc_PM_OrderDate,
 Acc_PM_PaymentType,Acc_PM_BatchNo,Acc_PM_BaseName,Acc_PM_FETotalAmt,Acc_PM_Currency,Acc_PM_DiffAmount,Acc_PM_CurrencyAmt,Acc_PM_CurrencyTime,Acc_PM_trTypeDetails)                
 values                
 (@Acc_PM_ID,@Acc_PM_TransactionNo,@Acc_PM_Party,@Acc_PM_Location,@Acc_PM_TransactionType,@Acc_PM_BillType,@Acc_PM_BillNo,@Acc_PM_BillDate,
 @Acc_PM_BillAmount,@Acc_Bill_Narration,@Acc_PM_BalanceAmount,@Acc_PM_ChequeNo,@Acc_PM_ChequeDate,@Acc_PM_IFSCCode,@Acc_PM_BankName,
 @Acc_PM_BranchName,@Acc_PM_CreatedBy,Getdate(),'W',@Acc_PM_IPAddress,@Acc_PM_CompID,@Acc_PM_YearID,'C',@acc_PM_InvoiceDate,@Acc_PM_PaidAmount,
@Acc_PM_AttachID,@ACC_PM_ZoneID,@ACC_PM_RegionID,@ACC_PM_AreaID,@ACC_PM_BranchID,@Acc_PM_OrderNO,@Acc_PM_OrderDate,@Acc_PM_PaymentType,@Acc_PM_BatchNo,@Acc_PM_BaseName,
@Acc_PM_FETotalAmt,@Acc_PM_Currency,@Acc_PM_DiffAmount,@Acc_PM_CurrencyAmt,@Acc_PM_CurrencyTime,@Acc_PM_trTypeDetails)              
 set @iUpdateOrSave=3               
 set @iOper = @Acc_PM_ID                     
end

/

CREATE Procedure [dbo].[spAcc_FixedAssets_JE]                  
(                  
@AFJ_ID int,
@AFJ_TransactionNo varchar(100),
@AFJ_Party int,
@AFJ_Location int,
@AFJ_Block int,
@AFJ_Amount money,
@AFJ_Narration varchar(max),
@AFJ_Status varchar(1),
@AFJ_CreatedBy int,
@AFJ_CreatedOn datetime,
@AFJ_YearID int,
@AFJ_CompID int,
@AFJ_Operation varchar(1),
@AFJ_IPAddress varchar(100),   
@iUpdateOrSave int Output,                
@iOper int Output                
)                    
 as                       
  if exists(select AFJ_ID from Acc_FixedAssets_JE where AFJ_ID=@AFJ_ID and AFJ_TransactionNo=@AFJ_TransactionNo and AFJ_CompID = @AFJ_CompID And AFJ_YearID=@AFJ_YearID)                        
   begin  
   Update Acc_FixedAssets_JE Set AFJ_Party=@AFJ_Party ,AFJ_Location =@AFJ_Location,AFJ_Block =@AFJ_Block,AFJ_Amount =@AFJ_Amount,AFJ_Narration =@AFJ_Narration,AFJ_Status=@AFJ_Status,
   AFJ_CreatedBy=@AFJ_CreatedBy,AFJ_CreatedOn=@AFJ_CreatedOn,AFJ_YearID =@AFJ_YearID,AFJ_CompID =@AFJ_CompID,AFJ_Operation =@AFJ_Operation,AFJ_IPAddress =@AFJ_IPAddress
   Where AFJ_ID=@AFJ_ID and AFJ_TransactionNo=@AFJ_TransactionNo and AFJ_CompID = @AFJ_CompID And AFJ_YearID=@AFJ_YearID

  set @iUpdateOrSave=2                    
    set @iOper = (select AFJ_ID from Acc_FixedAssets_JE where AFJ_ID=@AFJ_ID and AFJ_TransactionNo=@AFJ_TransactionNo and AFJ_CompID = @AFJ_CompID And AFJ_YearID=@AFJ_YearID)                                 
 end                              
  else                   
                  
        begin              
  set @AFJ_ID=(select isnull(max(AFJ_ID)+1,1) from Acc_FixedAssets_JE)                  
  Insert into Acc_FixedAssets_JE(AFJ_ID,AFJ_TransactionNo ,AFJ_Party ,AFJ_Location ,AFJ_Block ,AFJ_Amount ,AFJ_Narration ,AFJ_Status ,AFJ_CreatedBy ,AFJ_CreatedOn,AFJ_YearID ,AFJ_CompID ,AFJ_Operation ,AFJ_IPAddress )           
  values (@AFJ_ID,@AFJ_TransactionNo ,@AFJ_Party ,@AFJ_Location ,@AFJ_Block ,@AFJ_Amount ,@AFJ_Narration ,@AFJ_Status ,@AFJ_CreatedBy ,@AFJ_CreatedOn,@AFJ_YearID ,@AFJ_CompID ,@AFJ_Operation ,@AFJ_IPAddress )              
  set @iUpdateOrSave=3                 
  set @iOper = @AFJ_ID                     
 end 

/

CREATE Procedure [dbo].[spFixed_Asset_Master]                    
(                    
@FAM_ID int,    
@FAM_DespreaciationType int,
@FAM_glDescID int,
@FAM_DepRate varchar(100), 
@FAM_Status varchar(1),
@FAM_CompID int,
@FAM_YearID int, 
@FAM_CreatedBy int,
@FAM_CreatedOn datetime,
@FAM_UpdatedBy int,
@FAM_UpdatedOn datetime, 
@FAM_Operation char(1),
@FAM_IPAddress varchar(25),
@iUpdateOrSave int Output,                  
@iOper int Output                  
)                      
 as                         
  if exists(select FAM_ID from Fixed_Asset_Master where FAM_DespreaciationType=@FAM_DespreaciationType And FAM_glDescID=@FAM_glDescID And FAM_CompID=@FAM_CompID And FAM_YearID=@FAM_YearID)                          
   begin 
 Update Fixed_Asset_Master Set FAM_DepRate=@FAM_DepRate,FAM_Status=@FAM_Status,FAM_UpdatedBy=@FAM_UpdatedBy,FAM_UpdatedOn=@FAM_UpdatedOn,FAM_Operation=@FAM_Operation,FAM_IPAddress=@FAM_IPAddress
Where FAM_DespreaciationType=@FAM_DespreaciationType And FAM_glDescID=@FAM_glDescID And FAM_CompID=@FAM_CompID And FAM_YearID=@FAM_YearID
  set @iUpdateOrSave=2                      
    set @iOper = (select FAM_ID from Fixed_Asset_Master where FAM_DespreaciationType=@FAM_DespreaciationType And FAM_glDescID=@FAM_glDescID And FAM_CompID=@FAM_CompID And FAM_YearID=@FAM_YearID)                                   
 end                                
  else                     
                    
        begin                
  set @FAM_ID=(select isnull(max(FAM_ID)+1,1) from Fixed_Asset_Master)                    
  Insert into Fixed_Asset_Master (FAM_ID,FAM_DespreaciationType,FAM_glDescID,FAM_DepRate,FAM_Status,FAM_CompID,FAM_YearID,FAM_CreatedBy,FAM_CreatedOn,FAM_Operation,FAM_IPAddress)             
  values (@FAM_ID,@FAM_DespreaciationType,@FAM_glDescID,@FAM_DepRate,@FAM_Status,@FAM_CompID,@FAM_YearID,@FAM_CreatedBy,@FAM_CreatedOn,@FAM_Operation,@FAM_IPAddress)                
  set @iUpdateOrSave=3                   
  set @iOper = @FAM_ID                       
    end 

/

CREATE PROCEDURE spACC_Purchase_Details
(                  
@PD_ID int,    
@PD_MasterID int,
@PD_HSNCode varchar(500),  
@PD_Commodity Varchar(500),
@PD_Goods Varchar(500),
@PD_Unit Varchar(100),   
@PD_Rate money,  
@PD_Quantity Float,
@PD_ChargePerItem money,
@PD_RateAmount money,
@PD_Discount money,
@PD_DiscountAmount money,
@PD_Amount money,
@PD_GSTRate money,
@PD_GSTAmount money,
@PD_SGST money,
@PD_SGSTAmount money,
@PD_CGST money,
@PD_CGSTAmount money,
@PD_IGST money,
@PD_IGSTAmount money,
@PD_FinalTotal money,
@PD_Status varchar(1),    
@PD_CompID int,
@PD_YearID int,
@PD_CreatedBy Int,
@PD_CreatedOn DateTime,
@PD_FETotalAmt money,
@PD_Currency Int,
@PD_Operation char(1),
@PD_IPAddress Varchar(25),   
@iUpdateOrSave int Output,                
@iOper int Output                 
)                     
AS         
              
BEGIN          
set @PD_ID=(select isnull(max(PD_ID)+1,1) from ACC_Purchase_Details)          
Insert into ACC_Purchase_Details(PD_ID,PD_MasterID,PD_HSNCode,PD_Commodity,PD_Goods,PD_Unit,PD_Rate,PD_Quantity,PD_ChargePerItem,PD_RateAmount,PD_Discount,PD_DiscountAmount,PD_Amount,PD_GSTRate,PD_GSTAmount,PD_SGST,PD_SGSTAmount,PD_CGST,PD_CGSTAmount,PD_IGST,PD_IGSTAmount,PD_FinalTotal,PD_Status,PD_CompID,PD_YearID,PD_CreatedBy,PD_CreatedOn,PD_FETotalAmt,PD_Currency,PD_Operation,PD_IPAddress)          
Values(@PD_ID,@PD_MasterID,@PD_HSNCode,@PD_Commodity,@PD_Goods,@PD_Unit,@PD_Rate,@PD_Quantity,@PD_ChargePerItem,@PD_RateAmount,@PD_Discount,@PD_DiscountAmount,@PD_Amount,@PD_GSTRate,@PD_GSTAmount,@PD_SGST,@PD_SGSTAmount,@PD_CGST,@PD_CGSTAmount,@PD_IGST,@PD_IGSTAmount,@PD_FinalTotal,@PD_Status,@PD_CompID,@PD_YearID,@PD_CreatedBy,@PD_CreatedOn,@PD_FETotalAmt,@PD_Currency,@PD_Operation,@PD_IPAddress)          
    set @iUpdateOrSave=3                 
    set @iOper = @PD_ID          
END

/


CREATE PROCEDURE [dbo].[spAcc_Purchase_Master_Details]        
(                
@Acc_PMD_ID int ,   
@Acc_PMD_MasterID int,
@Acc_PMD_Head int,
@Acc_PMD_GL int,
@Acc_PMD_SubGL int,
@Acc_PMD_Amount money,
@Acc_PMD_TaxType int,
@Acc_PMD_TaxRate int,
@Acc_PMD_TaxAmount money,
@Acc_PMD_TotalAmount money,
@Acc_PMD_PendingAmount money,
@Acc_PMD_Status varchar(1),
@Acc_PMD_CompID int,
@Acc_PMD_YearID int,
@Acc_PMD_RoundOff varchar(20),
@Acc_PMD_TradeDis Money,
@Acc_PMD_TradeDisAmt Money,
@Acc_PMD_NetAmount Money,
@iUpdateOrSave int Output,              
@iOper int Output              
)                   
AS                       
BEGIN       
set @Acc_PMD_ID=(select isnull(max(Acc_PMD_ID)+1,1) from Acc_Purchase_Master_Details)        
Insert into Acc_Purchase_Master_Details(Acc_PMD_ID,Acc_PMD_MasterID,Acc_PMD_Head,Acc_PMD_GL,Acc_PMD_SubGL,Acc_PMD_Amount,Acc_PMD_TaxType,Acc_PMD_TaxRate,Acc_PMD_TaxAmount,
Acc_PMD_TotalAmount,Acc_PMD_PendingAmount,Acc_PMD_Status,Acc_PMD_CompID,Acc_PMD_YearID,Acc_PMD_RoundOff,Acc_PMD_TradeDis,Acc_PMD_TradeDisAmt,Acc_PMD_NetAmount)        

Values(@Acc_PMD_ID,@Acc_PMD_MasterID,@Acc_PMD_Head,@Acc_PMD_GL,@Acc_PMD_SubGL,@Acc_PMD_Amount,@Acc_PMD_TaxType,@Acc_PMD_TaxRate,@Acc_PMD_TaxAmount,
@Acc_PMD_TotalAmount,@Acc_PMD_PendingAmount,@Acc_PMD_Status,@Acc_PMD_CompID,@Acc_PMD_YearID,@Acc_PMD_RoundOff,@Acc_PMD_TradeDis,@Acc_PMD_TradeDisAmt,@Acc_PMD_NetAmount)
set @iUpdateOrSave=3               
set @iOper = @Acc_PMD_ID   
END

/

CREATE Procedure [dbo].[spAcc_Sales_Master]        
(        
@Acc_Sales_ID int,
@Acc_Sales_TransactionNo varchar(200),
@Acc_Sales_Party int,
@Acc_Sales_BillNo varchar(200),
@Acc_Sales_BillDate Datetime,
@Acc_Sales_BillAmount money,
@Acc_Sales_CreatedBy int,
@Acc_Sales_UpdatedBy int,
@Acc_Sales_Year int,
@Acc_Sales_CompID int,
@Acc_Sales_Status varchar(2),
@Acc_Sales_DelFlag varchar(1),
@Acc_Sales_Operation varchar(1),
@Acc_Sales_IPAddress varchar(20),
@Acc_Sales_ReceiptDate Datetime,
@Acc_Sales_MisMatchFlag int,
@Acc_Sales_PaymentStatus varchar(1),
@Acc_Sales_OtherCharges money,
@ACC_Sales_ZoneID Int,
@ACC_Sales_RegionID Int,
@ACC_Sales_AreaID Int,
@ACC_Sales_BranchID Int,
@Acc_Sales_CompanyAddress Varchar(200),   
@Acc_Sales_CompanyGSTNRegNo Varchar(15),
@Acc_Sales_BillingAddress Varchar(200), 
@Acc_Sales_BillingGSTNRegNo Varchar(15),
@Acc_Sales_DeliveryFrom Varchar(200),
@Acc_Sales_DeliveryFromGSTNRegNo Varchar(15),
@Acc_Sales_DeliveryAddress Varchar(200),
@Acc_Sales_DeliveryGSTNRegNo Varchar(15),
@Acc_Sales_InvoiceStatus Varchar(25),
@Acc_Sales_CompanyType int,
@Acc_Sales_GSTNCategory int,
@Acc_Sales_State Varchar(100), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select Acc_Sales_ID from Acc_Sales_Masters where Acc_Sales_ID=@Acc_Sales_ID And Acc_Sales_TransactionNo=@Acc_Sales_TransactionNo and Acc_Sales_CompID = @Acc_Sales_CompID  and Acc_Sales_Year=@Acc_Sales_Year)              
     begin                	            
		Update Acc_Sales_Masters set Acc_Sales_Party=@Acc_Sales_Party,
		Acc_Sales_BillNo=@Acc_Sales_BillNo,Acc_Sales_BillDate=@Acc_Sales_BillDate,
		Acc_Sales_BillAmount=@Acc_Sales_BillAmount,Acc_Sales_UpdatedBy=@Acc_Sales_UpdatedBy,
		Acc_Sales_UpdatedOn=GetDate(),Acc_Sales_Status='U',@Acc_Sales_Operation='U',Acc_Sales_IPAddress=@Acc_Sales_IPAddress,
		Acc_Sales_ReceiptDate=@Acc_Sales_ReceiptDate,Acc_Sales_MisMatchFlag=@Acc_Sales_MisMatchFlag,Acc_Sales_PaymentStatus=@Acc_Sales_PaymentStatus,
		Acc_Sales_OtherCharges=@Acc_Sales_OtherCharges,ACC_Sales_ZoneID=@ACC_Sales_ZoneID,ACC_Sales_RegionID=@ACC_Sales_RegionID,
		ACC_Sales_AreaID=@ACC_Sales_AreaID,ACC_Sales_BranchID=@ACC_Sales_BranchID
		Where Acc_Sales_ID=@Acc_Sales_ID And Acc_Sales_TransactionNo=@Acc_Sales_TransactionNo and Acc_Sales_CompID = @Acc_Sales_CompID  and Acc_Sales_Year=@Acc_Sales_Year 
		set @iUpdateOrSave=2          
		set @iOper = (select Acc_Sales_ID from Acc_Sales_Masters where Acc_Sales_ID=@Acc_Sales_ID And Acc_Sales_TransactionNo=@Acc_Sales_TransactionNo and Acc_Sales_CompID = @Acc_Sales_CompID  and Acc_Sales_Year=@Acc_Sales_Year)
	 end                              
  else         
	  begin        
		set @Acc_Sales_ID=(select isnull(max(Acc_Sales_ID)+1,1) from Acc_Sales_Masters)        
		Insert into Acc_Sales_Masters (Acc_Sales_ID,Acc_Sales_TransactionNo,Acc_Sales_Party,
		Acc_Sales_BillNo,Acc_Sales_BillDate,Acc_Sales_BillAmount,Acc_Sales_CreatedBy,Acc_Sales_CreatedOn,
		Acc_Sales_Year,Acc_Sales_CompID,Acc_Sales_Status,Acc_Sales_DelFlag,
		Acc_Sales_Operation,Acc_Sales_IPAddress,Acc_Sales_ReceiptDate,Acc_Sales_MisMatchFlag,Acc_Sales_PaymentStatus,Acc_Sales_OtherCharges,
		ACC_Sales_ZoneID,ACC_Sales_RegionID,ACC_Sales_AreaID,ACC_Sales_BranchID,Acc_Sales_CompanyAddress,Acc_Sales_CompanyGSTNRegNo,Acc_Sales_BillingAddress,Acc_Sales_BillingGSTNRegNo,Acc_Sales_DeliveryFrom,Acc_Sales_DeliveryFromGSTNRegNo,Acc_Sales_DeliveryAddress,Acc_Sales_DeliveryGSTNRegNo,Acc_Sales_InvoiceStatus,Acc_Sales_CompanyType,Acc_Sales_GSTNCategory,Acc_Sales_State)		
		values(@Acc_Sales_ID,@Acc_Sales_TransactionNo,@Acc_Sales_Party,
		@Acc_Sales_BillNo,@Acc_Sales_BillDate,@Acc_Sales_BillAmount,@Acc_Sales_CreatedBy,GetDate(),  
		@Acc_Sales_Year,@Acc_Sales_CompID,@Acc_Sales_Status,@Acc_Sales_DelFlag,
		@Acc_Sales_Operation,@Acc_Sales_IPAddress,@Acc_Sales_ReceiptDate,@Acc_Sales_MisMatchFlag,@Acc_Sales_PaymentStatus,@Acc_Sales_OtherCharges,
		@ACC_Sales_ZoneID,@ACC_Sales_RegionID,@ACC_Sales_AreaID,@ACC_Sales_BranchID,@Acc_Sales_CompanyAddress,@Acc_Sales_CompanyGSTNRegNo,@Acc_Sales_BillingAddress,@Acc_Sales_BillingGSTNRegNo,@Acc_Sales_DeliveryFrom,@Acc_Sales_DeliveryFromGSTNRegNo,@Acc_Sales_DeliveryAddress,@Acc_Sales_DeliveryGSTNRegNo,@Acc_Sales_InvoiceStatus,@Acc_Sales_CompanyType,@Acc_Sales_GSTNCategory,@Acc_Sales_State)
		set @iUpdateOrSave=3       
		set @iOper = @Acc_Sales_ID           
  end

/

CREATE PROCEDURE spACC_Sales_Details
(                  
@PD_ID int,    
@PD_MasterID int,
@PD_HSNCode varchar(500),  
@PD_Commodity Varchar(500),
@PD_Goods Varchar(500),
@PD_Unit Varchar(100),   
@PD_Rate money,  
@PD_Quantity Float,
@PD_ChargePerItem money,
@PD_RateAmount money,
@PD_Discount money,
@PD_DiscountAmount money,
@PD_Amount money,
@PD_GSTRate money,
@PD_GSTAmount money,
@PD_SGST money,
@PD_SGSTAmount money,
@PD_CGST money,
@PD_CGSTAmount money,
@PD_IGST money,
@PD_IGSTAmount money,
@PD_FinalTotal money,
@PD_Status varchar(1),    
@PD_CompID int,
@PD_YearID int,
@PD_CreatedBy Int,
@PD_CreatedOn DateTime,
@PD_Operation char(1),
@PD_IPAddress Varchar(25),   
@iUpdateOrSave int Output,                
@iOper int Output                 
)                     
AS         
              
BEGIN          
set @PD_ID=(select isnull(max(PD_ID)+1,1) from ACC_Sales_Details)          
Insert into ACC_Sales_Details(PD_ID,PD_MasterID,PD_HSNCode,PD_Commodity,PD_Goods,PD_Unit,PD_Rate,PD_Quantity,PD_ChargePerItem,PD_RateAmount,PD_Discount,PD_DiscountAmount,PD_Amount,PD_GSTRate,PD_GSTAmount,PD_SGST,PD_SGSTAmount,PD_CGST,PD_CGSTAmount,PD_IGST,PD_IGSTAmount,PD_FinalTotal,PD_Status,PD_CompID,PD_YearID,PD_CreatedBy,PD_CreatedOn,PD_Operation,PD_IPAddress)          
Values(@PD_ID,@PD_MasterID,@PD_HSNCode,@PD_Commodity,@PD_Goods,@PD_Unit,@PD_Rate,@PD_Quantity,@PD_ChargePerItem,@PD_RateAmount,@PD_Discount,@PD_DiscountAmount,@PD_Amount,@PD_GSTRate,@PD_GSTAmount,@PD_SGST,@PD_SGSTAmount,@PD_CGST,@PD_CGSTAmount,@PD_IGST,@PD_IGSTAmount,@PD_FinalTotal,@PD_Status,@PD_CompID,@PD_YearID,@PD_CreatedBy,@PD_CreatedOn,@PD_Operation,@PD_IPAddress)          
    set @iUpdateOrSave=3                 
    set @iOper = @PD_ID          
END

/

CREATE Procedure [dbo].[spMST_CUSTOMER_MASTER_Branch]                  
(                  
@CUSTB_ID [int],
@CUSTB_CUST_ID [int],
@CUSTB_Name [varchar](500) ,
@CUSTB_ContactPerson [varchar](500),  
@CUSTB_CITY [varchar](100),
@CUSTB_STATE [varchar](100),
@CUSTB_COUNTRY [varchar](100),
@CUSTB_PIN [varchar](10),
@CUSTB_TEL [varchar](50),
@CUSTB_FAX [varchar](50),
@CUSTB_ADDRESS [varchar](1000),
@CUSTB_STATUS [nchar](2),
@CUSTB_DELFLG [varchar](1),
@CUSTB_CompID [int],
@CUSTB_CRBY [int],
@CUSTB_CRON [datetime],
@CUSTB_UpdatedBy [int],
@CUSTB_UpdatedOn [datetime],
@CUSTB_Operation [varchar](20),
@CUSTB_IPAddress [varchar](25),
@CUSTB_CompanyType int,
@CUSTB_GSTNCategory int,
@CUSTB_GSTNRegNo Varchar(25),
@iUpdateOrSave int Output,                
@iOper int Output   
)                    
 as                       
  if exists(select CUSTB_ID from MST_CUSTOMER_MASTER_Branch where CUSTB_CUST_ID=@CUSTB_CUST_ID And CUSTB_Name=@CUSTB_Name and CUSTB_CompID = @CUSTB_CompID)                        
   begin                     
    Update MST_CUSTOMER_MASTER_Branch set CUSTB_ContactPerson = @CUSTB_ContactPerson,CUSTB_CITY = @CUSTB_CITY,CUSTB_STATE=@CUSTB_STATE,CUSTB_COUNTRY=@CUSTB_COUNTRY,CUSTB_PIN=@CUSTB_PIN,CUSTB_TEL=@CUSTB_TEL,
	CUSTB_FAX = @CUSTB_FAX,CUSTB_ADDRESS = @CUSTB_ADDRESS,CUSTB_STATUS = @CUSTB_STATUS,CUSTB_DELFLG=@CUSTB_DELFLG,CUSTB_UpdatedBy=@CUSTB_UpdatedBy,CUSTB_UpdatedOn=@CUSTB_UpdatedOn,CUSTB_Operation=@CUSTB_Operation,CUSTB_IPAddress=@CUSTB_IPAddress,
	CUSTB_CompanyType=@CUSTB_CompanyType,CUSTB_GSTNCategory=@CUSTB_GSTNCategory,CUSTB_GSTNRegNo=@CUSTB_GSTNRegNo
  Where CUSTB_CUST_ID=@CUSTB_CUST_ID And CUSTB_Name=@CUSTB_Name and CUSTB_CompID = @CUSTB_CompID
  set @iUpdateOrSave=2                    
    set @iOper = (select CUSTB_ID from MST_CUSTOMER_MASTER_Branch where CUSTB_CUST_ID=@CUSTB_CUST_ID And CUSTB_Name=@CUSTB_Name and CUSTB_CompID = @CUSTB_CompID)                              
 end                              
  else                   
                  
        begin              
  set @CUSTB_ID=(select isnull(max(CUSTB_ID)+1,1) from MST_CUSTOMER_MASTER_Branch)                  
  Insert into MST_CUSTOMER_MASTER_Branch (CUSTB_ID,CUSTB_CUST_ID,CUSTB_Name,CUSTB_ContactPerson,CUSTB_CITY,CUSTB_STATE,CUSTB_COUNTRY,CUSTB_PIN,CUSTB_TEL,CUSTB_FAX,CUSTB_ADDRESS,CUSTB_STATUS,CUSTB_DELFLG,CUSTB_CompID,CUSTB_CRBY,CUSTB_CRON,CUSTB_Operation,CUSTB_IPAddress,
  CUSTB_CompanyType,CUSTB_GSTNCategory,CUSTB_GSTNRegNo)          
  values (@CUSTB_ID,@CUSTB_CUST_ID,@CUSTB_Name,@CUSTB_ContactPerson,@CUSTB_CITY,@CUSTB_STATE,@CUSTB_COUNTRY,@CUSTB_PIN,@CUSTB_TEL,@CUSTB_FAX,@CUSTB_ADDRESS,@CUSTB_STATUS,@CUSTB_DELFLG,@CUSTB_CompID,@CUSTB_CRBY,@CUSTB_CRON,@CUSTB_Operation,@CUSTB_IPAddress,
@CUSTB_CompanyType,@CUSTB_GSTNCategory,@CUSTB_GSTNRegNo)     
         
  set @iUpdateOrSave=3                 
  set @iOper = @CUSTB_ID                   
    end 

/

Create  Procedure [dbo].[spCustomerSupplierMasterUpload](         
@CSM_ID int,        
@CSM_IndType int,          
@CSM_Name varchar(1000),        
@CSM_Code varchar (1000),        
@CSM_Inventry int,        
@CSM_ContactPerson varchar(5000),       
@CSM_EmailID varchar(1000),    
@CSM_MobileNo varchar(100),    
@CSM_LandLineNo varchar(100),    
@CSM_Fax varchar(100),     
@CSM_Address varchar(5000), 
@CSM_Address1 varchar(5000), 
@CSM_Address2 varchar(5000), 
@CSM_Address3 varchar(5000),      
@CSM_Pincode varchar(50),     
@CSM_City int,           
@CSM_State int,        
@CSM_Delflag varchar(1),        
@CSM_CompID int,        
@CSM_Status varchar(50),        
@CSM_Operation Varchar(100),        
@CSM_IPAddress Varchar(100),        
@CSM_CreatedBy int,        
@CSM_CreatedOn datetime,        
@CSM_ApprovedBy int,        
@CSM_ApprovedOn datetime,        
@CSM_DeletedBy int,        
@CSM_DeletedOn datetime,        
@CSM_UpdatedBy int,        
@CSM_UpdatedOn datetime,       
@CSM_ProductDescription Varchar(100),
@CSM_Group int,   
@CSM_SubGroup int,
@CSM_GL int,
@CSM_SubGL int,
@CSM_GSTNRegno varchar(50),
@CSM_CompanyType int,
@CSM_GSTNCategory int,
@iUpdateOrSave int Output,            
@iOper int Output         
)        
as          
 if exists(select CSM_ID from CustomerSupplierMaster where CSM_Code=@CSM_Code And CSM_CompID=@CSM_CompID)            
  begin         
        
Set @CSM_Status='U'                
set @CSM_Operation='U'        
  update CustomerSupplierMaster set CSM_Name=@CSM_Name,        
CSM_Inventry=@CSM_Inventry,CSM_ContactPerson=@CSM_ContactPerson,CSM_EmailID=@CSM_EmailID,CSM_MobileNo=@CSM_MobileNo,    
CSM_LandLineNo=@CSM_LandLineNo,CSM_Fax=@CSM_Fax,    
CSM_Address=@CSM_Address,CSM_Pincode=@CSM_Pincode,CSM_City=@CSM_City,CSM_State=@CSM_State,        
CSM_Status=@CSM_Status,CSM_Operation=@CSM_Operation,CSM_IPAddress=@CSM_IPAddress,CSM_UpdatedBy=@CSM_UpdatedBy,CSM_ProductDescription=@CSM_ProductDescription,CSM_UpdatedOn=GetDate(),
CSM_Group = @CSM_Group,CSM_SubGroup = @CSM_SubGroup,CSM_GL=@CSM_GL,CSM_Address1=@CSM_Address1,CSM_Address2=@CSM_Address2,CSM_Address3=@CSM_Address3,CSM_SubGL=@CSM_SubGL,CSM_GSTNRegno=@CSM_GSTNRegno,CSM_CompanyType=@CSM_CompanyType,CSM_GSTNCategory=@CSM_GSTNCategory
where CSM_Code=@CSM_Code And CSM_CompID=@CSM_CompID 
  set @iUpdateOrSave=2                
  set @iOper =(select CSM_ID from CustomerSupplierMaster where CSM_Code=@CSM_Code And CSM_CompID=@CSM_CompID)         
End        
  else             
 begin         
 Set @CSM_Status='C'
 set @CSM_ID=(select isnull(max(CSM_ID)+1,1) from CustomerSupplierMaster)            
  insert into CustomerSupplierMaster (CSM_ID,CSM_IndType,CSM_Name,CSM_Code,        
CSM_Inventry,CSM_ContactPerson,CSM_EmailID,CSM_MobileNo,CSM_LandLineNo,CSM_Fax,    
CSM_Address,CSM_Address1,CSM_Address2,CSM_Address3,CSM_Pincode,CSM_City,CSM_State,CSM_Delflag,CSM_CompID,CSM_Status,CSM_CreatedBy,CSM_CreatedOn,        
CSM_Operation,CSM_IPAddress,CSM_ProductDescription,CSM_Group,CSM_SubGroup,CSM_GL,CSM_SubGL,CSM_GSTNRegno,CSM_CompanyType,CSM_GSTNCategory)        
 values (@CSM_ID,@CSM_IndType,@CSM_Name,@CSM_Code,        
@CSM_Inventry,@CSM_ContactPerson,@CSM_EmailID,@CSM_MobileNo,@CSM_LandLineNo,@CSM_Fax,    
@CSM_Address,@CSM_Address1,@CSM_Address2,@CSM_Address3,@CSM_Pincode,@CSM_City,@CSM_State,@CSM_Delflag,@CSM_CompID,@CSM_Status,@CSM_CreatedBy,GetDate(),        
@CSM_Operation,@CSM_IPAddress,@CSM_ProductDescription,@CSM_Group,@CSM_SubGroup,@CSM_GL,@CSM_SubGL,@CSM_GSTNRegno,@CSM_CompanyType,@CSM_GSTNCategory)         
   set @iUpdateOrSave=3             
   set @iOper = @CSM_ID          
End  

/

CREATE Procedure [dbo].[spACC_SubLedgerOpening_Balance]  
(  
@Opn_Id int,   
@Opn_SerialNo int,    
@Opn_AccHead int,  
@Opn_GLCode varchar(50),  
@Opn_DebitAmt varchar(8),  
@Opn_CreditAmount Varchar(8),  
@Opn_YearId int,  
@Opn_CreatedBy int,  
@Opn_CreatedOn datetime,  
@Opn_ApprovedBy int,  
@Opn_ApprovedOn datetime,   
@Opn_Status varchar(1),  
@Opn_CompId int,  
@Opn_GlId int,  
@Opn_Operation varchar(20),  
@Opn_IPAddress varchar(25), 
@Opn_ReferenceNo VarChar(100),
@Opn_BilDate datetime,
@Opn_PendingAmnt Varchar(8),
@Opn_DueOnDate datetime, 
@Opn_OverDueDays int, 
@iUpdateOrSave int Output,  
@iOper int Output   
)  
as 
 if exists(select Acc_SLO_ID from Acc_SubLedger_OpeningBalance where  Acc_SLO_GLCode=@Opn_GLCode and Acc_SLO_Year=@Opn_YearID And Acc_SLO_CompID=@opn_CompID and Acc_SLO_RefNo=@Opn_ReferenceNo)    
  begin 
Set @Opn_Status='U'
Set @Opn_Operation='U'
	update Acc_SubLedger_OpeningBalance Set Acc_SLO_SerialNo=@Opn_SerialNo,Acc_SLO_AccHead=@Opn_AccHead,  
Acc_SLO_Debit=@Opn_DebitAmt,Acc_SLO_Credit=@Opn_CreditAmount,Acc_SLO_Year=@Opn_YearId,
Acc_SLO_ApprovedBy=@Opn_ApprovedBy,Acc_SLO_ApprovedOn=GetDate(),  
Acc_SLO_Status=@Opn_Status,Acc_SLO_GLID=@Opn_GlId,Acc_SLO_Operation=@Opn_Operation,Acc_SLO_IPAddress=@Opn_IPAddress,
Acc_SLO_PenidingAmount=@Opn_PendingAmnt,Acc_SLO_DueOn=@Opn_DueOnDate,Acc_SLO_OverDueDays=@Opn_OverDueDays,Acc_SLO_BillDate=@Opn_BilDate
where  Acc_SLO_GLCode=@Opn_GLCode And Acc_SLO_CompID=@opn_CompID And Acc_SLO_RefNo=@Opn_ReferenceNo 
  set @iUpdateOrSave=2        
  set @iOper =@Opn_Id 
End
 else     
 begin 
 set @Opn_Id=(select isnull(max(Acc_SLO_ID)+1,1) from Acc_SubLedger_OpeningBalance) 
   insert into Acc_SubLedger_OpeningBalance (Acc_SLO_ID,Acc_SLO_SerialNo,Acc_SLO_AccHead,Acc_SLO_GLCode,Acc_SLO_Debit,
   Acc_SLO_Credit,Acc_SLO_Year,Acc_SLO_CreatedBy,Acc_SLO_CreatedOn,Acc_SLO_ApprovedBy,Acc_SLO_ApprovedOn,
   Acc_SLO_Status,Acc_SLO_CompID,Acc_SLO_GLID,Acc_SLO_Operation,Acc_SLO_IPAddress,Acc_SLO_BillDate,Acc_SLO_OverDueDays,Acc_SLO_RefNo,Acc_SLO_PenidingAmount,Acc_SLO_DueOn
   )values(@Opn_Id,@Opn_SerialNo,@Opn_AccHead,@Opn_GLCode,@Opn_DebitAmt,@Opn_CreditAmount,@Opn_YearId,@Opn_CreatedBy,GetDate(),
   @Opn_CreatedBy,GetDate(),@Opn_Status,@Opn_CompId,@Opn_GlId,@Opn_Operation,@Opn_IPAddress,@Opn_BilDate,@Opn_OverDueDays,@Opn_ReferenceNo,@Opn_PendingAmnt,@Opn_DueOnDate)
     set @iUpdateOrSave=3       
	  set @iOper = @Opn_Id  
end

/

CREATE Procedure [dbo].[spInventory_Master_TaxDetails]                  
(                  
@IMT_ID int,   
@IMT_MasterID int,
@IMT_VAT int,
@IMT_EffectiveVATFrom datetime,
@IMT_EffectiveVATTo datetime,
@IMT_CST int,
@IMT_EffectiveCSTFrom datetime,
@IMT_EffectiveCSTTo datetime,
@IMT_Excise int,
@IMT_EffectiveExciseFrom datetime,
@IMT_EffectiveExciseTo datetime,
@IMT_Status varchar(1),
@IMT_CompID int,
@IMT_CreatedBy int,
@IMT_CreatedOn datetime,
@IMT_Operation varchar(1),
@IMT_IPAddress varchar(50),
@iUpdateOrSave int Output,                
@iOper int Output                
)                    
 as                      
       if exists(select IMT_ID from Inventory_Master_TaxDetails where IMT_ID=@IMT_ID And IMT_CompID=@IMT_CompID)                        
   begin                     
    Update Inventory_Master_TaxDetails set IMT_VAT=@IMT_VAT,IMT_EffectiveVATFrom=@IMT_EffectiveVATFrom,IMT_EffectiveVATTo=@IMT_EffectiveVATTo,IMT_CST=@IMT_CST,IMT_EffectiveCSTFrom=@IMT_EffectiveCSTFrom,
	IMT_EffectiveCSTTo=@IMT_EffectiveCSTTo,IMT_Excise=@IMT_Excise,IMT_EffectiveExciseTo=@IMT_EffectiveExciseTo,IMT_IPAddress=@IMT_IPAddress,
	IMT_EffectiveExciseFrom=@IMT_EffectiveExciseFrom
  Where IMT_ID=@IMT_ID And IMT_CompID=@IMT_CompID
  set @iUpdateOrSave=2                    
    set @iOper = (select IMT_ID from Inventory_Master_TaxDetails where IMT_ID=@IMT_ID And IMT_CompID=@IMT_CompID)                              
 end                              
   else
  begin              
   set @IMT_ID=(select isnull(max(IMT_ID)+1,1) from Inventory_Master_TaxDetails)                  
   Insert into Inventory_Master_TaxDetails(IMT_ID,IMT_MasterID,IMT_VAT,IMT_EffectiveVATFrom,IMT_EffectiveVATTo,IMT_CST,IMT_EffectiveCSTFrom,IMT_EffectiveCSTTo,IMT_Excise,IMT_EffectiveExciseFrom,IMT_EffectiveExciseTo,IMT_Status,IMT_CompID,IMT_CreatedBy,IMT_CreatedOn,IMT_Operation,IMT_IPAddress)          
   values                  
   (@IMT_ID,@IMT_MasterID,@IMT_VAT,@IMT_EffectiveVATFrom,@IMT_EffectiveVATTo,@IMT_CST,@IMT_EffectiveCSTFrom,@IMT_EffectiveCSTTo,@IMT_Excise,@IMT_EffectiveExciseFrom,@IMT_EffectiveExciseTo,@IMT_Status,@IMT_CompID,@IMT_CreatedBy,@IMT_CreatedOn,@IMT_Operation,@IMT_IPAddress)             
   set @iUpdateOrSave=3                 
   set @iOper = @IMT_ID                  
  end 

/

CREATE Procedure [dbo].[spPROFormaMasterDetails]                  
(                  
@SPOD_Id int,
@SPOD_SOID int,
@SPOD_CommodityID int,
@SPOD_ItemID int,
@SPOD_UnitofMeasurement int,
@SPOD_HistoryID int,
@SPOD_MRPRate money,
@SPOD_Quantity int,  
@SPOD_Discount money,
@SPOD_RateAmount money,
@SPOD_DiscountRate money,
@SPOD_TotalAmount money,
@SPOD_Status varchar(1),
@SPOD_CompiD int,  
@SPOD_Operation char(1),
@SPOD_IPAddress Varchar(25),
@SPOD_YearID int,
@SPOD_VAT money,
@SPOD_VATAmount money,
@SPOD_CST money,
@SPOD_CSTAmount money,
@SPOD_Excise money,
@SPOD_ExciseAmount money,
@SPOD_Category int,
@SPOD_CreatedBy int,
@SPOD_CreatedOn datetime,
@SPOD_UpdatedBy int,
@SPOD_UpdatedOn datetime,
@SPOD_GST_ID int,
@SPOD_GSTRate money,
@SPOD_GSTAmount money,
@SPOD_SGST money,
@SPOD_SGSTAmount money,
@SPOD_CGST money,
@SPOD_CGSTAmount money,
@SPOD_IGST money,
@SPOD_IGSTAmount money,
@SPOD_FETotalAmt Money,
@SPOD_Currency Int,
@SPOD_CurrencyAmt Money,
@SPOD_CurrencyTime Varchar(50),
@iUpdateOrSave int Output,                
@iOper int Output                
)                    
 as                       
   if exists(select SPOD_Id from Sales_Proforma_Order_Details where SPOD_ID=@SPOD_ID And SPOD_SOID=@SPOD_SOID and SPOD_CommodityID=@SPOD_CommodityID and SPOD_ItemID=@SPOD_ItemID and SPOD_CompiD = @SPOD_CompiD And SPOD_YearID=@SPOD_YearID )                
        
   begin                     
    Update Sales_Proforma_Order_Details set SPOD_Quantity=@SPOD_Quantity,SPOD_UnitofMeasurement=@SPOD_UnitofMeasurement,SPOD_MRPRate=@SPOD_MRPRate,SPOD_RateAmount=@SPOD_RateAmount,           
  SPOD_TotalAmount=@SPOD_TotalAmount,SPOD_Operation='U',SPOD_IPAddress=@SPOD_IPAddress,SPOD_Status=@SPOD_Status,SPOD_Category=@SPOD_Category,SPOD_UpdatedBy=@SPOD_UpdatedBy,SPOD_UpdatedOn=@SPOD_UpdatedOn,
  SPOD_FETotalAmt=@SPOD_FETotalAmt,SPOD_Currency=@SPOD_Currency,SPOD_CurrencyAmt=@SPOD_CurrencyAmt,SPOD_CurrencyTime=@SPOD_CurrencyTime
  Where SPOD_ID=@SPOD_ID And SPOD_SOID=@SPOD_SOID and SPOD_CommodityID=@SPOD_CommodityID and SPOD_ItemID=@SPOD_ItemID and SPOD_CompiD = @SPOD_CompiD  And SPOD_YearID=@SPOD_YearID       
  set @iUpdateOrSave=2                    
    set @iOper = (select SPOD_Id from Sales_Proforma_Order_Details where SPOD_ID=@SPOD_ID And SPOD_SOID=@SPOD_SOID and SPOD_CommodityID=@SPOD_CommodityID and SPOD_ItemID=@SPOD_ItemID and SPOD_CompiD = @SPOD_CompiD And SPOD_YearID=@SPOD_YearID )           
                   
 end                              
  else                 
    begin              
  set @SPOD_Id=(select isnull(max(SPOD_Id)+1,1) from Sales_Proforma_Order_Details)                  
  Insert into Sales_Proforma_Order_Details (SPOD_Id,SPOD_SOID,SPOD_CommodityID,SPOD_ItemID,SPOD_UnitofMeasurement,SPOD_HistoryID,SPOD_MRPRate,SPOD_Quantity,SPOD_Discount,SPOD_RateAmount,SPOD_DiscountRate,SPOD_TotalAmount,SPOD_Status,SPOD_CompiD,SPOD_Operation,SPOD_IPAddress,SPOD_YearID,SPOD_VAT,SPOD_VATAmount,SPOD_CST,SPOD_CSTAmount,SPOD_Excise,SPOD_ExciseAmount,SPOD_Category,SPOD_CreatedBy,SPOD_CreatedOn,SPOD_GST_ID,SPOD_GSTRate,SPOD_GSTAmount,SPOD_SGST,SPOD_SGSTAmount,SPOD_CGST,SPOD_CGSTAmount,SPOD_IGST,SPOD_IGSTAmount,SPOD_FETotalAmt,SPOD_Currency,SPOD_CurrencyAmt,SPOD_CurrencyTime)          
   values(@SPOD_Id,@SPOD_SOID,@SPOD_CommodityID,@SPOD_ItemID,@SPOD_UnitofMeasurement,@SPOD_HistoryID,@SPOD_MRPRate,@SPOD_Quantity,@SPOD_Discount,@SPOD_RateAmount,@SPOD_DiscountRate,@SPOD_TotalAmount,@SPOD_Status,@SPOD_CompiD,@SPOD_Operation,@SPOD_IPAddress,@SPOD_YearID,@SPOD_VAT,@SPOD_VATAmount,@SPOD_CST,@SPOD_CSTAmount,@SPOD_Excise,@SPOD_ExciseAmount,@SPOD_Category,@SPOD_CreatedBy,@SPOD_CreatedOn,@SPOD_GST_ID,@SPOD_GSTRate,@SPOD_GSTAmount,@SPOD_SGST,@SPOD_SGSTAmount,@SPOD_CGST,@SPOD_CGSTAmount,@SPOD_IGST,@SPOD_IGSTAmount,@SPOD_FETotalAmt,@SPOD_Currency,@SPOD_CurrencyAmt,@SPOD_CurrencyTime)     
         
  set @iUpdateOrSave=3                 
  set @iOper = @SPOD_Id                     
    end

/

CREATE PROCEDURE [dbo].[spAcc_Purchase_JE_Master]        
(                
@Acc_PJE_ID int,
@Acc_PJE_TransactionNo varchar(500),
@Acc_PJE_Party int,
@Acc_PJE_Location int,
@Acc_PJE_BillType int,
@Acc_PJE_BillNo varchar(500),
@Acc_PJE_BillDate datetime,
@Acc_PJE_BillAmount money,
@Acc_PJE_AdvanceAmount money,
@Acc_PJE_AdvanceNaration varchar(max),
@Acc_PJE_BalanceAmount money,
@Acc_PJE_NetAmount money,
@Acc_PJE_PaymentNarration varchar(max),
@Acc_PJE_ChequeNo varchar(max),
@Acc_PJE_ChequeDate datetime,
@Acc_PJE_IFSCCode varchar(max),
@Acc_PJE_BankName varchar(max),
@Acc_PJE_BranchName varchar(max),
@Acc_PJE_CreatedBy int,
@Acc_PJE_CreatedOn datetime,
@Acc_PJE_YearID int,
@Acc_PJE_CompID int,
@Acc_PJE_Status varchar(1),
@Acc_PJE_Operation varchar(1),
@Acc_PJE_IPAddress varchar(200),
@Acc_PJE_BillCreatedDate datetime,
@Acc_PJE_UpdatedBy int,
@Acc_PJE_UpdatedOn datetime,
@Acc_PJE_InvoiceID  Int,
@Acc_PJE_PendingAmount money,
@Acc_PJE_Type Varchar(20),
@iUpdateOrSave int Output,              
@iOper int Output              
)                   
AS        
If exists(select Acc_PJE_ID from Acc_Purchase_JE_Master where Acc_PJE_ID=@Acc_PJE_ID And Acc_PJE_TransactionNo=@Acc_PJE_TransactionNo And Acc_PJE_Party=@Acc_PJE_Party And Acc_PJE_CompID=@Acc_PJE_CompID And Acc_PJE_YearID=@Acc_PJE_YearID)         
 Begin          
 Update Acc_Purchase_JE_Master Set Acc_PJE_Location=@Acc_PJE_Location,Acc_PJE_BillType=@Acc_PJE_BillType,Acc_PJE_BillNo=@Acc_PJE_BillNo,Acc_PJE_BillDate=@Acc_PJE_BillDate,Acc_PJE_BillAmount=@Acc_PJE_BillAmount,Acc_PJE_AdvanceAmount=@Acc_PJE_AdvanceAmount,
 Acc_PJE_AdvanceNaration=@Acc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount=@Acc_PJE_BalanceAmount,Acc_PJE_NetAmount=@Acc_PJE_NetAmount,Acc_PJE_PaymentNarration=@Acc_PJE_PaymentNarration,Acc_PJE_ChequeNo=@Acc_PJE_ChequeNo,Acc_PJE_ChequeDate=@Acc_PJE_ChequeDate,
Acc_PJE_IFSCCode=@Acc_PJE_IFSCCode,Acc_PJE_BankName=@Acc_PJE_BankName,Acc_PJE_BranchName=@Acc_PJE_BranchName,Acc_PJE_UpdatedBy=@Acc_PJE_UpdatedBy,Acc_PJE_UpdatedOn=@Acc_PJE_UpdatedOn,Acc_PJE_Status=@Acc_PJE_Status,Acc_PJE_Operation='U',
Acc_PJE_IPAddress=@Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate=@Acc_PJE_BillCreatedDate,Acc_PJE_InvoiceID=@Acc_PJE_InvoiceID,Acc_PJE_PendingAmount=@Acc_PJE_PendingAmount
 Where Acc_PJE_ID=@Acc_PJE_ID And Acc_PJE_TransactionNo=@Acc_PJE_TransactionNo And Acc_PJE_Party=@Acc_PJE_Party And Acc_PJE_CompID=@Acc_PJE_CompID And Acc_PJE_YearID=@Acc_PJE_YearID
Set @iUpdateOrSave=2          
Set @iOper = (select Acc_PJE_ID from Acc_Purchase_JE_Master where Acc_PJE_ID=@Acc_PJE_ID And Acc_PJE_TransactionNo=@Acc_PJE_TransactionNo And Acc_PJE_Party=@Acc_PJE_Party And Acc_PJE_CompID=@Acc_PJE_CompID And Acc_PJE_YearID=@Acc_PJE_YearID)          
End        
Else               
BEGIN        
set @Acc_PJE_ID=(select isnull(max(Acc_PJE_ID)+1,1) from Acc_Purchase_JE_Master)        
Insert into Acc_Purchase_JE_Master(Acc_PJE_ID,Acc_PJE_TransactionNo,Acc_PJE_Party,Acc_PJE_Location,Acc_PJE_BillType,Acc_PJE_BillNo,Acc_PJE_BillDate,Acc_PJE_BillAmount,Acc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,Acc_PJE_NetAmount,
Acc_PJE_PaymentNarration,Acc_PJE_ChequeNo,Acc_PJE_ChequeDate,Acc_PJE_IFSCCode,Acc_PJE_BankName,Acc_PJE_BranchName,Acc_PJE_CreatedBy,Acc_PJE_CreatedOn,Acc_PJE_YearID,Acc_PJE_CompID,Acc_PJE_Status,Acc_PJE_Operation,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,
Acc_PJE_InvoiceID,Acc_PJE_PendingAmount,Acc_PJE_Type)  
Values(@Acc_PJE_ID,@Acc_PJE_TransactionNo,@Acc_PJE_Party,@Acc_PJE_Location,@Acc_PJE_BillType,@Acc_PJE_BillNo,@Acc_PJE_BillDate,@Acc_PJE_BillAmount,@Acc_PJE_AdvanceAmount,@Acc_PJE_AdvanceNaration,@Acc_PJE_BalanceAmount,@Acc_PJE_NetAmount,
@Acc_PJE_PaymentNarration,@Acc_PJE_ChequeNo ,@Acc_PJE_ChequeDate,@Acc_PJE_IFSCCode,@Acc_PJE_BankName,@Acc_PJE_BranchName,@Acc_PJE_CreatedBy,@Acc_PJE_CreatedOn,@Acc_PJE_YearID,@Acc_PJE_CompID,@Acc_PJE_Status,@Acc_PJE_Operation,@Acc_PJE_IPAddress,@Acc_PJE_BillCreatedDate,
@Acc_PJE_InvoiceID,@Acc_PJE_PendingAmount,@Acc_PJE_Type)  
      
    set @iUpdateOrSave=3               
    set @iOper = @Acc_PJE_ID         
END

/

CREATE PROCEDURE [dbo].[spAllocateSalesOrder]    
(            
@SAM_ID   int,     
@SAM_OrderNo  int,    
@SAM_Party  int,    
@SAM_Remarks varchar(max),    
@SAM_Status varchar(1),    
@SAM_CompID int,    
@SAM_YearID int,    
@SAM_CreatedBy int,
@SAM_GrandDiscount money,
@SAM_GrandDiscountAmt money,
@SAM_GrandTotal money,
@SAM_GrandTotalAmt money,
@SAM_Operation char(1) ,
@SAM_IPAddress varchar(25),
@SAM_DispatchFlag Varchar(1),
@SAM_Code Varchar(500),
@iUpdateOrSave int Output,          
@iOper int Output          
)               
AS    
If exists(select SAM_ID from Sales_Allocate_Master where SAM_Code=@SAM_Code And SAM_OrderNo=@SAM_OrderNo And SAM_CompID = @SAM_CompID And SAM_YearID=@SAM_YearID)     
 Begin      
 Update Sales_Allocate_Master Set SAM_Party=@SAM_Party,SAM_Remarks=@SAM_Remarks,SAM_Status=@SAM_Status,SAM_Operation='U',SAM_IPAddress=@SAM_IPAddress,
 SAM_GrandDiscount=@SAM_GrandDiscount,SAM_GrandDiscountAmt=@SAM_GrandDiscountAmt,SAM_GrandTotal=@SAM_GrandTotal,SAM_GrandTotalAmt=@SAM_GrandTotalAmt     
 Where SAM_Code=@SAM_Code And SAM_OrderNo=@SAM_OrderNo And SAM_CompID = @SAM_CompID And SAM_YearID=@SAM_YearID     
Set @iUpdateOrSave=2      
Set @iOper = (select SAM_ID from Sales_Allocate_Master where SAM_Code=@SAM_Code And SAM_OrderNo=@SAM_OrderNo And SAM_CompID = @SAM_CompID And SAM_YearID=@SAM_YearID)     
End    
Else           
BEGIN    
set @SAM_ID=(select isnull(max(SAM_ID)+1,1) from Sales_Allocate_Master)    
Insert into Sales_Allocate_Master(SAM_ID,SAM_OrderNo,SAM_Party,SAM_Remarks,SAM_Status,SAM_CompID,SAM_YearID,SAM_CreatedBy,SAM_CreatedOn,SAM_GrandDiscount,SAM_GrandDiscountAmt,SAM_GrandTotal,SAM_GrandTotalAmt,SAM_Operation,SAM_IPAddress,SAM_DispatchFlag,SAM_Code)  
Values(@SAM_ID,@SAM_OrderNo,@SAM_Party,@SAM_Remarks,@SAM_Status,@SAM_CompID,@SAM_YearID,@SAM_CreatedBy,GetDate(),@SAM_GrandDiscount,@SAM_GrandDiscountAmt,@SAM_GrandTotal,@SAM_GrandTotalAmt,@SAM_Operation,@SAM_IPAddress,@SAM_DispatchFlag,@SAM_Code)    
    set @iUpdateOrSave=3           
    set @iOper = @SAM_ID    
END 

/

CREATE PROCEDURE [dbo].[spDispatchDetails]          
(                  
@SDD_ID int,    
@SDD_MasterID int,    
@SDD_CommodityID int,    
@SDD_DescID int,    
@SDD_UnitID int,    
@SDD_HistoryID int,    
@SDD_Rate Money,    
@SDD_Quantity Float,    
@SDD_RateAmount Money,    
@SDD_Discount Money,    
@SDD_DiscountAmount Money,    
@SDD_VAT Money,    
@SDD_VATAmount Money,    
@SDD_Excise Money,    
@SDD_ExciseAmount Money,    
@SDD_CST Money,    
@SDD_CSTAmount Money,    
@SDD_TotalAmount Money,    
@SDD_Status varchar(1),    
@SDD_CompID int,
@SDD_CreatedBy Int,
@SDD_CreatedOn DateTime,
@SDD_Operation char(1),
@SDD_IPAddress Varchar(25),
@SDD_ChargesPeritem money,
@SDD_Amount money,
@SDD_GST_ID Int,
@SDD_GSTRate money,
@SDD_GSTAmount money,
@SDD_SGST money,
@SDD_SGSTAmount money,
@SDD_CGST money,
@SDD_CGSTAmount money,
@SDD_IGST money,
@SDD_IGSTAmount money,
@SDD_FETotalAmt Money,
@SDD_Currency Money,
@SDD_CurrencyAmt Money,  
@SDD_CurrencyTime Varchar(50),        
@iUpdateOrSave int Output,                
@iOper int Output                
)                     
AS          
            
BEGIN          
set @SDD_ID=(select isnull(max(SDD_ID)+1,1) from Sales_Dispatch_Details)          
Insert into Sales_Dispatch_Details(SDD_ID,SDD_MasterID,SDD_CommodityID,SDD_DescID,SDD_UnitID,SDD_HistoryID,SDD_Rate,SDD_Quantity,SDD_RateAmount,SDD_Discount,SDD_DiscountAmount,SDD_VAT,SDD_VATAmount,SDD_Excise,SDD_ExciseAmount,SDD_CST,SDD_CSTAmount,  
SDD_TotalAmount,SDD_Status,SDD_CompID,SDD_CreatedBy,SDD_CreatedOn,SDD_Operation,SDD_IPAddress,SDD_ChargesPeritem,SDD_Amount,SDD_GST_ID,SDD_GSTRate,SDD_GSTAmount,SDD_SGST,SDD_SGSTAmount,SDD_CGST,SDD_CGSTAmount,SDD_IGST,SDD_IGSTAmount,SDD_FETotalAmt,SDD_Currency,SDD_CurrencyAmt,SDD_CurrencyTime)          
Values(@SDD_ID,@SDD_MasterID,@SDD_CommodityID,@SDD_DescID,@SDD_UnitID,@SDD_HistoryID,@SDD_Rate,@SDD_Quantity,@SDD_RateAmount,@SDD_Discount,@SDD_DiscountAmount,@SDD_VAT,@SDD_VATAmount,@SDD_Excise,@SDD_ExciseAmount,@SDD_CST,@SDD_CSTAmount,@SDD_TotalAmount, 
@SDD_Status,@SDD_CompID,@SDD_CreatedBy,@SDD_CreatedOn,@SDD_Operation,@SDD_IPAddress,@SDD_ChargesPeritem,@SDD_Amount,@SDD_GST_ID,@SDD_GSTRate,@SDD_GSTAmount,@SDD_SGST,@SDD_SGSTAmount,@SDD_CGST,@SDD_CGSTAmount,@SDD_IGST,@SDD_IGSTAmount,@SDD_FETotalAmt,@SDD_Currency,@SDD_CurrencyAmt,@SDD_CurrencyTime)          
    set @iUpdateOrSave=3                 
    set @iOper = @SDD_ID          
END 

/

CREATE PROCEDURE [dbo].[spSales_Return_Master]    
(            
@SRM_ID int, 
@SRM_ReturnOrderCode varchar(100),  
@SRM_OrderNo int,
@SRM_OrderDate datetime,
@SRM_ReferenceNo varchar(100),
@SRM_ReturnDate datetime,      
@SRM_PartyID int,
@SRM_PartyCode varchar(100),
@SRM_ModeOfReturn int,
@SRM_Narration varchar(max),
@SRM_Status varchar(1),
@SRM_YearID int,
@SRM_CompID int,
@SRM_CreatedBy int,
@SRM_CreatedOn datetime,
@SRM_Operation Varchar(1),
@SRM_IPAddress Varchar(25),
@SRM_DispatchID Int,
@SRM_DispatchRefNo VarChar(1000),
@SRM_ESugamNo VarChar(1000),
@SRM_PaymentType Int,
@SRM_Category Int,
@SRM_SaleType Int,
@SRM_OtherType Int,
@SRM_DispatchDate Datetime,
@SRM_ReturnReason Int,
@iUpdateOrSave int Output,          
@iOper int Output          
)               
AS    
If exists(select SRM_ID from Sales_Return_Master where SRM_ReturnOrderCode=@SRM_ReturnOrderCode And SRM_OrderNo=@SRM_OrderNo And SRM_DispatchID=@SRM_DispatchID And SRM_PartyID=@SRM_PartyID And SRM_CompID=@SRM_CompID And SRM_YearID=@SRM_YearID)     
 Begin      
 Update Sales_Return_Master Set SRM_ReferenceNo=@SRM_ReferenceNo,SRM_ReturnDate=@SRM_ReturnDate,SRM_ModeOfReturn=@SRM_ModeOfReturn,SRM_Narration=@SRM_Narration,SRM_Operation='U',SRM_IPAddress=@SRM_IPAddress
 Where SRM_ReturnOrderCode=@SRM_ReturnOrderCode And SRM_OrderNo=@SRM_OrderNo And SRM_DispatchID=@SRM_DispatchID And SRM_PartyID=@SRM_PartyID And SRM_CompID=@SRM_CompID And SRM_YearID=@SRM_YearID 
Set @iUpdateOrSave=2      
Set @iOper = (select SRM_ID from Sales_Return_Master where SRM_ReturnOrderCode=@SRM_ReturnOrderCode And SRM_OrderNo=@SRM_OrderNo And SRM_DispatchID=@SRM_DispatchID And SRM_PartyID=@SRM_PartyID And SRM_CompID=@SRM_CompID And SRM_YearID=@SRM_YearID)     
End    
Else           
BEGIN    
set @SRM_ID=(select isnull(max(SRM_ID)+1,1) from Sales_Return_Master)    
Insert into Sales_Return_Master(SRM_ID,SRM_ReturnOrderCode,SRM_OrderNo,SRM_OrderDate,SRM_ReferenceNo,SRM_ReturnDate,SRM_PartyID,SRM_PartyCode,SRM_ModeOfReturn,SRM_Narration,SRM_Status,SRM_YearID,SRM_CompID,SRM_CreatedBy,SRM_CreatedOn,SRM_Operation,SRM_IPAddress,SRM_DispatchID,SRM_DispatchRefNo,SRM_ESugamNo,SRM_PaymentType,SRM_Category,SRM_SaleType,SRM_OtherType,SRM_DispatchDate,SRM_ReturnReason)    
Values(@SRM_ID,@SRM_ReturnOrderCode,@SRM_OrderNo,@SRM_OrderDate,@SRM_ReferenceNo,@SRM_ReturnDate,@SRM_PartyID,@SRM_PartyCode,@SRM_ModeOfReturn,@SRM_Narration,@SRM_Status,@SRM_YearID,@SRM_CompID,@SRM_CreatedBy,@SRM_CreatedOn,@SRM_Operation,@SRM_IPAddress,@SRM_DispatchID,@SRM_DispatchRefNo,@SRM_ESugamNo,@SRM_PaymentType,@SRM_Category,@SRM_SaleType,@SRM_OtherType,@SRM_DispatchDate,@SRM_ReturnReason)    
    set @iUpdateOrSave=3           
    set @iOper = @SRM_ID    
END 

/

CREATE Procedure [dbo].[spSales_Sample_Order_Details]                  
(                  
@SSOD_ID int,
@SSOD_MasterID int,
@SSOD_CommodityId int,
@SSOD_ItemID int,
@SSOD_Historyid int,
@SSOD_UnitID int,
@SSOD_Quantity varchar(10),
@SSOD_Amount money,
@SSOD_TotalAmount money,
@SSOD_DelFlag varchar(1),
@SSOD_Status varchar(1),
@SSOD_CreatedBy int,
@SSOD_CreatedOn datetime,
@SSOD_Operation Char(1),
@SSOD_IPAddress VarChar(25),
@SSOD_CompID int,
@SSOD_YearID int,    
@iUpdateOrSave int Output,                
@iOper int Output                
)                    
 as                       
                 
 begin              
  set @SSOD_ID=(select isnull(max(SSOD_ID)+1,1) from Sales_Sample_Order_Details)                  
  Insert into Sales_Sample_Order_Details(SSOD_ID,SSOD_MasterID,SSOD_CommodityId,SSOD_ItemID,SSOD_Historyid,SSOD_UnitID,SSOD_Quantity,SSOD_Amount,SSOD_TotalAmount,SSOD_DelFlag,SSOD_Status,SSOD_CreatedBy,SSOD_CreatedOn,SSOD_Operation,SSOD_IPAddress,SSOD_CompID,SSOD_YearID)           
  values (@SSOD_ID,@SSOD_MasterID,@SSOD_CommodityId,@SSOD_ItemID,@SSOD_Historyid,@SSOD_UnitID,@SSOD_Quantity,@SSOD_Amount,@SSOD_TotalAmount,@SSOD_DelFlag,@SSOD_Status,@SSOD_CreatedBy,@SSOD_CreatedOn,@SSOD_Operation,@SSOD_IPAddress,@SSOD_CompID,@SSOD_YearID)              
  set @iUpdateOrSave=3                 
  set @iOper = @SSOD_ID                 
 end
 
/

CREATE PROCEDURE [dbo].[spAcc_Sales_JE_Master]        
(                
@Acc_SJE_ID int,
@Acc_SJE_TransactionNo varchar(500),
@Acc_SJE_Party int,
@Acc_SJE_Location int,
@Acc_SJE_BillType int,
@Acc_SJE_BillNo varchar(500),
@Acc_SJE_BillDate datetime,
@Acc_SJE_BillAmount money,
@Acc_SJE_AdvanceAmount money,
@Acc_SJE_AdvanceNaration varchar(max),
@Acc_SJE_BalanceAmount money,
@Acc_SJE_NetAmount money,
@Acc_SJE_PaymentNarration varchar(max),
@Acc_SJE_ChequeNo varchar(max),
@Acc_SJE_ChequeDate datetime,
@Acc_SJE_IFSCCode varchar(max),
@Acc_SJE_BankName varchar(max),
@Acc_SJE_BranchName varchar(max),
@Acc_SJE_CreatedBy int,
@Acc_SJE_CreatedOn datetime,
@Acc_SJE_YearID int,
@Acc_SJE_CompID int,
@Acc_SJE_Status varchar(1),
@Acc_SJE_Operation varchar(1),
@Acc_SJE_IPAddress varchar(200),
@Acc_SJE_BillCreatedDate datetime,
@Acc_SJE_UpdatedBy int,
@Acc_SJE_UpdatedOn datetime,
@Acc_SJE_InvoiceID  Int,
@Acc_SJE_Type Varchar(50),
@iUpdateOrSave int Output,              
@iOper int Output              
)                   
AS        
If exists(select Acc_SJE_ID from Acc_Sales_JE_Master where Acc_SJE_ID=@Acc_SJE_ID And Acc_SJE_TransactionNo=@Acc_SJE_TransactionNo And Acc_SJE_Party=@Acc_SJE_Party And Acc_SJE_CompID=@Acc_SJE_CompID And Acc_SJE_YearID=@Acc_SJE_YearID)         
 Begin          
 Update Acc_Sales_JE_Master Set Acc_SJE_Location=@Acc_SJE_Location,Acc_SJE_BillType=@Acc_SJE_BillType,Acc_SJE_BillNo=@Acc_SJE_BillNo,Acc_SJE_BillDate=@Acc_SJE_BillDate,Acc_SJE_BillAmount=@Acc_SJE_BillAmount,Acc_SJE_AdvanceAmount=@Acc_SJE_AdvanceAmount,
 Acc_SJE_AdvanceNaration=@Acc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount=@Acc_SJE_BalanceAmount,Acc_SJE_NetAmount=@Acc_SJE_NetAmount,
Acc_SJE_PaymentNarration=@Acc_SJE_PaymentNarration,Acc_SJE_ChequeNo=@Acc_SJE_ChequeNo,Acc_SJE_ChequeDate=@Acc_SJE_ChequeDate,Acc_SJE_IFSCCode=@Acc_SJE_IFSCCode,Acc_SJE_BankName=@Acc_SJE_BankName,Acc_SJE_BranchName=@Acc_SJE_BranchName,
Acc_SJE_UpdatedBy=@Acc_SJE_UpdatedBy,Acc_SJE_UpdatedOn=@Acc_SJE_UpdatedOn,Acc_SJE_Status=@Acc_SJE_Status,Acc_SJE_Operation='U',Acc_SJE_IPAddress=@Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate=@Acc_SJE_BillCreatedDate,Acc_SJE_InvoiceID=@Acc_SJE_InvoiceID
 Where Acc_SJE_ID=@Acc_SJE_ID And Acc_SJE_TransactionNo=@Acc_SJE_TransactionNo And Acc_SJE_Party=@Acc_SJE_Party And Acc_SJE_CompID=@Acc_SJE_CompID And Acc_SJE_YearID=@Acc_SJE_YearID
Set @iUpdateOrSave=2          
Set @iOper = (select Acc_SJE_ID from Acc_Sales_JE_Master where Acc_SJE_ID=@Acc_SJE_ID And Acc_SJE_TransactionNo=@Acc_SJE_TransactionNo And Acc_SJE_Party=@Acc_SJE_Party And Acc_SJE_CompID=@Acc_SJE_CompID And Acc_SJE_YearID=@Acc_SJE_YearID)          
End        
Else               
BEGIN        
set @Acc_SJE_ID=(select isnull(max(Acc_SJE_ID)+1,1) from Acc_Sales_JE_Master)        
Insert into Acc_Sales_JE_Master(Acc_SJE_ID,Acc_SJE_TransactionNo,Acc_SJE_Party,Acc_SJE_Location,Acc_SJE_BillType,Acc_SJE_BillNo,Acc_SJE_BillDate,Acc_SJE_BillAmount,Acc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,Acc_SJE_NetAmount,
Acc_SJE_PaymentNarration,Acc_SJE_ChequeNo,Acc_SJE_ChequeDate,Acc_SJE_IFSCCode,Acc_SJE_BankName,Acc_SJE_BranchName,Acc_SJE_CreatedBy,Acc_SJE_CreatedOn,Acc_SJE_YearID,Acc_SJE_CompID,
Acc_SJE_Status,Acc_SJE_Operation,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,Acc_SJE_InvoiceID,Acc_SJE_Type)     
Values(@Acc_SJE_ID,@Acc_SJE_TransactionNo,@Acc_SJE_Party,@Acc_SJE_Location,@Acc_SJE_BillType,@Acc_SJE_BillNo,@Acc_SJE_BillDate,@Acc_SJE_BillAmount,@Acc_SJE_AdvanceAmount,@Acc_SJE_AdvanceNaration,@Acc_SJE_BalanceAmount,@Acc_SJE_NetAmount,
@Acc_SJE_PaymentNarration,@Acc_SJE_ChequeNo ,@Acc_SJE_ChequeDate,@Acc_SJE_IFSCCode,@Acc_SJE_BankName,@Acc_SJE_BranchName,@Acc_SJE_CreatedBy,@Acc_SJE_CreatedOn,@Acc_SJE_YearID,
@Acc_SJE_CompID,@Acc_SJE_Status,@Acc_SJE_Operation,@Acc_SJE_IPAddress,@Acc_SJE_BillCreatedDate,@Acc_SJE_InvoiceID,@Acc_SJE_Type)   
     
    set @iUpdateOrSave=3               
    set @iOper = @Acc_SJE_ID         
END

/


CREATE Procedure spSales_Return_Masters     
(        
		@Sales_Return_ID Int,
		@Sales_Return_Year Int,
		@Sales_Return_ReturnNo Varchar(200),
		@Sales_Return_GoodsReturnNo Varchar(100),
		@Sales_Return_RetrunDate DateTime,
		@Sales_Return_InvoiceNo Int,
		@Sales_Return_InvoiceDate DateTime,
		@Sales_Return_OrderNo Int,
		@Sales_Return_DispatchNo Int,
		@Sales_Return_Customer Int,
		@Sales_Return_ShipTo Varchar(8000),
		@Sales_Return_DispatchStatus Varchar(25),
		@Sales_Return_State Varchar(50),
		@Sales_Return_CreatedBy Int,
		@Sales_Return_UpdatedBy Int,
		@Sales_Return_IPAddress Varchar(25),
		@Sales_Return_CompID Int,
		@iUpdateOrSave int Output,      
		@iOper int Output      
)          
as             
if exists(select Sales_Return_ID from Sales_Return_Masters where Sales_Return_ID=@Sales_Return_ID and Sales_Return_Year=@Sales_Return_Year and Sales_Return_ReturnNo= @Sales_Return_ReturnNo And Sales_Return_CompID=@Sales_Return_CompID)              
begin                	            
		Update Sales_Return_Masters set Sales_Return_RetrunDate=@Sales_Return_RetrunDate,Sales_Return_InvoiceNo=@Sales_Return_InvoiceNo,Sales_Return_InvoiceDate=@Sales_Return_InvoiceDate,
		Sales_Return_OrderNo=@Sales_Return_OrderNo,Sales_Return_DispatchNo=@Sales_Return_DispatchNo,Sales_Return_Customer=@Sales_Return_Customer,Sales_Return_ShipTo=@Sales_Return_ShipTo,
		Sales_Return_GoodsReturnNo=@Sales_Return_GoodsReturnNo,Sales_Return_DispatchStatus=@Sales_Return_DispatchStatus,Sales_Return_State=@Sales_Return_State,
		Sales_Return_UpdatedBy=@Sales_Return_UpdatedBy,Sales_Return_UpdatedOn=GetDate(),Sales_Return_Status='U',Sales_Return_Operation='U',Sales_Return_IPAddress=@Sales_Return_IPAddress
		Where Sales_Return_ID=@Sales_Return_ID and Sales_Return_Year=@Sales_Return_Year and Sales_Return_ReturnNo= @Sales_Return_ReturnNo And Sales_Return_CompID=@Sales_Return_CompID
		set @iUpdateOrSave=2          
		set @iOper =(Select Sales_Return_ID from Sales_Return_Masters where Sales_Return_ID=@Sales_Return_ID and Sales_Return_Year=@Sales_Return_Year and Sales_Return_ReturnNo= @Sales_Return_ReturnNo And Sales_Return_CompID=@Sales_Return_CompID)
end                              
else         
begin        
		set @Sales_Return_ID=(select isnull(max(Sales_Return_ID)+1,1) from Sales_Return_Masters)        
		Insert into Sales_Return_Masters (Sales_Return_ID,Sales_Return_Year,Sales_Return_ReturnNo,Sales_Return_RetrunDate,Sales_Return_InvoiceNo,Sales_Return_InvoiceDate,
		Sales_Return_OrderNo,Sales_Return_DispatchNo,Sales_Return_Customer,Sales_Return_ShipTo,Sales_Return_DispatchStatus,Sales_Return_State,Sales_Return_CreatedBy,
		Sales_Return_CreatedOn,Sales_Return_Status,Sales_Return_DelFlag,Sales_Return_Operation,Sales_Return_IPAddress,Sales_Return_CompID,Sales_Return_GoodsReturnNo)

		values(@Sales_Return_ID,@Sales_Return_Year,@Sales_Return_ReturnNo,@Sales_Return_RetrunDate,@Sales_Return_InvoiceNo,@Sales_Return_InvoiceDate,@Sales_Return_OrderNo,
		@Sales_Return_DispatchNo,@Sales_Return_Customer,@Sales_Return_ShipTo,@Sales_Return_DispatchStatus,@Sales_Return_State,
		@Sales_Return_CreatedBy,GetDate(), 'C','W','C',@Sales_Return_IPAddress,@Sales_Return_CompID,@Sales_Return_GoodsReturnNo)
		set @iUpdateOrSave=3       
		set @iOper = @Sales_Return_ID           
End 

/

Create Procedure spSales_ReturnDetails   
(        
@SRD_ID Int,
@SRD_MasterID Int,
@SRD_Commodity Int,
@SRD_Item Int,
@SRD_UnitID Int,
@SRD_HistoryID Int,
@SRD_Rate Money,
@SRD_Quantity Float,
@SRD_RateAmount Money,
@SRD_Discount Money,
@SRD_DiscountAmount Money,
@SRD_TotalAmount Money,
@SRD_Amount Money,
@SRD_Reason Int,
@SRD_Charges Money,
@SRD_GST_ID Int,
@SRD_GSTRate Money,
@SRD_GSTAmount Money,
@SRD_SGST Money,
@SRD_SGSTAmount Money,
@SRD_CGST Money,
@SRD_CGSTAmount Money,
@SRD_IGST Money,
@SRD_IGSTAmount Money,
@SRD_Remarks Varchar(2000),
@SRD_IPAddress Varchar(25),
@SRD_CompID Int,
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(Select SRD_ID from Sales_ReturnDetails where SRD_MasterID=@SRD_MasterID and SRD_Commodity=@SRD_Commodity and SRD_Item=@SRD_Item and SRD_CompID= @SRD_CompID)              
     begin                	            
		Update Sales_ReturnDetails set SRD_Commodity=@SRD_Commodity,SRD_Item=@SRD_Item,SRD_UnitID=@SRD_UnitID,SRD_HistoryID=@SRD_HistoryID,SRD_Rate=@SRD_Rate,SRD_Quantity=@SRD_Quantity,
		SRD_RateAmount=@SRD_RateAmount,SRD_Discount=@SRD_Discount,SRD_DiscountAmount=@SRD_DiscountAmount,SRD_TotalAmount=@SRD_TotalAmount,SRD_Status='U',SRD_Operation='U',
		SRD_Amount=@SRD_Amount,SRD_Reason=@SRD_Reason,SRD_Charges=@SRD_Charges,SRD_Remarks=@SRD_Remarks,SRD_GST_ID=@SRD_GST_ID,
		SRD_GSTRate=@SRD_GSTRate,SRD_GSTAmount=@SRD_GSTAmount,SRD_SGST=@SRD_SGST,SRD_SGSTAmount=@SRD_SGSTAmount,SRD_CGST=@SRD_CGST,SRD_CGSTAmount=@SRD_CGSTAmount,
		SRD_IGST=@SRD_IGST,SRD_IGSTAmount=@SRD_IGSTAmount,SRD_IPAddress=@SRD_IPAddress
		Where SRD_MasterID=@SRD_MasterID and SRD_Commodity=@SRD_Commodity and SRD_Item=@SRD_Item and SRD_CompID= @SRD_CompID
		set @iUpdateOrSave=2          
		set @iOper =(Select SRD_ID from Sales_ReturnDetails where SRD_MasterID=@SRD_MasterID and SRD_Commodity=@SRD_Commodity and SRD_Item=@SRD_Item and SRD_CompID= @SRD_CompID)
	 end                              
  else         
	  begin        
		set @SRD_ID=(select isnull(max(SRD_ID)+1,1) from Sales_ReturnDetails)        
		Insert into Sales_ReturnDetails (SRD_ID,SRD_MasterID,SRD_Commodity,SRD_Item,SRD_UnitID,SRD_HistoryID,SRD_Rate,SRD_Quantity,SRD_RateAmount,SRD_Discount,SRD_DiscountAmount,
		SRD_TotalAmount,SRD_Status,SRD_Operation,SRD_Amount,SRD_Reason,SRD_Charges,SRD_GST_ID,SRD_GSTRate,SRD_GSTAmount,SRD_SGST,SRD_SGSTAmount,SRD_CGST,
        SRD_CGSTAmount,SRD_IGST,SRD_IGSTAmount,SRD_Remarks,SRD_IPAddress,SRD_CompID)

		values(@SRD_ID,@SRD_MasterID,@SRD_Commodity,@SRD_Item,@SRD_UnitID,@SRD_HistoryID,@SRD_Rate,@SRD_Quantity,@SRD_RateAmount,@SRD_Discount,@SRD_DiscountAmount,
		@SRD_TotalAmount,'C','C',@SRD_Amount,@SRD_Reason,@SRD_Charges,@SRD_GST_ID,@SRD_GSTRate,@SRD_GSTAmount,@SRD_SGST,@SRD_SGSTAmount,
		@SRD_CGST,@SRD_CGSTAmount,@SRD_IGST,@SRD_IGSTAmount,@SRD_Remarks,@SRD_IPAddress,@SRD_CompID)
		set @iUpdateOrSave=3       
		set @iOper = @SRD_ID           
  End

/

CREATE Procedure [dbo].[spACC_Charges_Master](                       
@C_ID int,
@C_TRID int,
@C_TRType Char(1),
@C_ChargeID int,
@C_ChargeType Varchar(100),
@C_ChargeAmount Money,
@C_DelFlag char(1),
@C_Status varchar(50),
@C_YearID int,
@C_CompID int,
@C_CreatedBy int,
@C_CreatedOn datetime,
@C_Operation varchar(1),
@C_IPAddress varchar(25),
@iUpdateOrSave int Output,                          
@iOper int Output                          
)                      
                      
as
if exists(select C_ID from ACC_Charges_Master where C_TRID=@C_TRID And C_TRType=@C_TRType and C_ChargeID=@C_ChargeID And C_ChargeType=@C_ChargeType and C_CompID = @C_CompID And C_YearID=@C_YearID)                        
   begin  
   Update ACC_Charges_Master Set C_ChargeAmount=@C_ChargeAmount,C_Operation ='U',C_IPAddress=@C_IPAddress 
   Where C_TRID=@C_TRID And C_TRType=@C_TRType and C_ChargeID=@C_ChargeID And C_ChargeType=@C_ChargeType and C_CompID = @C_CompID And C_YearID=@C_YearID

  set @iUpdateOrSave=2                    
    set @iOper = (select C_ID from ACC_Charges_Master where C_TRID=@C_TRID And C_TRType=@C_TRType and C_ChargeID=@C_ChargeID And C_ChargeType=@C_ChargeType and C_CompID = @C_CompID And C_YearID=@C_YearID)                                 
 end                              
  else                          
 begin               
 set @C_ID=(select isnull(max(C_ID)+1,1) from ACC_Charges_Master)                          
  insert into ACC_Charges_Master (C_ID,C_TRID,C_TRType,C_ChargeID,C_ChargeType,C_ChargeAmount,C_DelFlag,C_Status,C_YearID,C_CompID,C_CreatedBy,C_CreatedOn,C_Operation,C_IPAddress)                      
 values (@C_ID,@C_TRID,@C_TRType,@C_ChargeID,@C_ChargeType,@C_ChargeAmount,@C_DelFlag,@C_Status,@C_YearID,@C_CompID,@C_CreatedBy,@C_CreatedOn,@C_Operation,@C_IPAddress)                       
   set @iUpdateOrSave=3                           
   set @iOper = @C_ID                        
End

/

CREATE Procedure spCharges_Master(                       
@C_ID int,
@C_OrderID int,		  
@C_AllocatedID int,
@C_DispatchID int,
@C_OrderType Char(1),
@C_ChargeID int,
@C_ChargeType Varchar(100),
@C_ChargeAmount Money,
@C_PSType Char(1),
@C_DelFlag char(1),
@C_Status varchar(50),
@C_YearID int,
@C_CompID int,
@C_CreatedBy int,
@C_CreatedOn datetime,
@C_Operation varchar(1),
@C_IPAddress varchar(25),
@C_SalesReturnID int,
@C_GoodsReturnID int,
@iUpdateOrSave int Output,                          
@iOper int Output                       
)                      
                      
as                        
 begin               
 set @C_ID=(select isnull(max(C_ID)+1,1) from Charges_Master)                          
  insert into Charges_Master (C_ID,C_OrderID,C_AllocatedID,C_DispatchID,C_OrderType,C_ChargeID,C_ChargeType,C_ChargeAmount,C_PSType,C_DelFlag,C_Status,C_YearID,C_CompID,C_CreatedBy,C_CreatedOn,C_Operation,C_IPAddress,C_SalesReturnID,C_GoodsReturnID)                      
 values (@C_ID,@C_OrderID,@C_AllocatedID,@C_DispatchID,@C_OrderType,@C_ChargeID,@C_ChargeType,@C_ChargeAmount,@C_PSType,@C_DelFlag,@C_Status,@C_YearID,@C_CompID,@C_CreatedBy,@C_CreatedOn,@C_Operation,@C_IPAddress,@C_SalesReturnID,@C_GoodsReturnID)                       
   set @iUpdateOrSave=3                           
   set @iOper = @C_ID                        
End

/

CREATE procedure [dbo].[spAcc_Company_BankDetails](
	@BD_ID int,
	@BD_CUSTID int,
	@BD_BranchID int,
	@BD_BankName varchar(50),
	@BD_AccountNo nVarchar(50),
	@BD_IFSCCode varchar(15),
	@BD_BranchName varchar(50),
	@BD_CreatedBy int,
	@BD_CreatedOn datetime,
	@BD_UpdatedBy int,
	@BD_UpdatedOn datetime,
	@BD_DelFlag char(1),	
	@BD_YearID int,
	@BD_CompID int,	
	@BD_Opeartion varchar(1),
	@BD_IPAddress varchar(25),
	@iUpdateOrSave int Output,                  
    @iOper int Output             
)
as                         
  if exists(select * from Acc_Company_BankDetails where BD_BankName=@BD_BankName And  BD_CompID=@BD_CompID And BD_YearID=@BD_YearID)                          
   begin 
 Update Acc_Company_BankDetails Set BD_BankName=@BD_BankName,BD_AccountNo=@BD_AccountNo,BD_IFSCCode=@BD_IFSCCode,BD_BranchName=@BD_BranchName,
 BD_DelFlag=@BD_DelFlag,BD_UpdatedBy=@BD_UpdatedBy,BD_UpdatedOn=getdate(),BD_Opeartion=@BD_Opeartion,BD_IPAddress=@BD_IPAddress
Where BD_BankName=@BD_BankName And  BD_CompID=@BD_CompID And BD_YearID=@BD_YearID
  set @iUpdateOrSave=2     
   set @iOper = (select BD_ID from Acc_Company_BankDetails where BD_BankName=@BD_BankName And  BD_CompID=@BD_CompID And BD_YearID=@BD_YearID)                                                 
 end                                
  else                     
                    
        begin                
  set @BD_ID=(select isnull(max(BD_ID)+1,1) from Acc_Company_BankDetails)                    
  Insert into Acc_Company_BankDetails (BD_ID,BD_CUSTID,BD_BranchID,BD_BankName,BD_AccountNo,BD_IFSCCode,BD_BranchName,
	BD_CreatedBy,BD_CreatedOn,BD_DelFlag,BD_YearID,BD_CompID,BD_Opeartion,BD_IPAddress)             
  values (@BD_ID,@BD_CUSTID,@BD_BranchID,@BD_BankName,@BD_AccountNo,@BD_IFSCCode,@BD_BranchName,
  @BD_CreatedBy,getdate() ,@BD_DelFlag,@BD_YearID,
	@BD_CompID,@BD_Opeartion,@BD_IPAddress)                
  set @iUpdateOrSave=3                   
  set @iOper = @BD_ID                       
    end

/

CREATE Procedure [dbo].[spAcc_Receipt_Master]        
(        
@Acc_RM_ID int,
@Acc_RM_TransactionNo varchar(100),
@Acc_RM_Party int,
@Acc_RM_Location int,
@Acc_RM_TransactionType int,
@Acc_RM_BillType int,
@Acc_RM_BillNo varchar(100),
@Acc_RM_BillDate datetime,
@Acc_RM_BillAmount money,
@Acc_RM_BalanceAmount money,
@Acc_RM_ChequeNo varchar(100),
@Acc_RM_ChequeDate datetime,
@Acc_RM_IFSCCode varchar(100),
@Acc_RM_BankName varchar(1000),
@Acc_RM_BranchName varchar(1000),
@Acc_RM_CreatedBy int,
@Acc_RM_CreatedOn  Datetime,
@Acc_RM_YearID int,
@Acc_RM_CompID int,
@Acc_RM_Status varchar(2),
@Acc_RM_Operation varchar(1),
@Acc_RM_IPAddress varchar(20),
@Acc_RM_BillNarration varchar(max),
@Acc_RM_InvoiceDate datetime,
@Acc_RM_PaidAmount money,
@Acc_RM_AttachID int,
@ACC_RM_ZoneID int,
@ACC_RM_RegionID int,
@ACC_RM_AreaID int,
@ACC_RM_BranchID int,
@Acc_RM_OrderNO Int,
@Acc_RM_OrderDate Datetime,
@Acc_RM_PaymentType int,
@Acc_RM_BatchNo int, 
@Acc_RM_BaseName int,
@Acc_RM_FETotalAmt Money,
@Acc_RM_Currency int,
@Acc_RM_DiffAmount Money,
@Acc_RM_CurrencyAmt Money,
@Acc_RM_CurrencyTime Varchar(50),
@Acc_RM_trTypeDetails int,
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(Select Acc_RM_ID from Acc_Receipt_Master where Acc_RM_ID=@Acc_RM_ID and Acc_RM_YearID=@Acc_RM_YearID and Acc_RM_CompID = @Acc_RM_CompID)              
     begin                	            
		Update Acc_Receipt_Master set Acc_RM_Party=@Acc_RM_Party,Acc_RM_Location=@Acc_RM_Location,
		Acc_RM_TransactionType=@Acc_RM_TransactionType,Acc_RM_BillType=@Acc_RM_BillType,
		Acc_RM_BillNo=@Acc_RM_BillNo,Acc_RM_BillDate=@Acc_RM_BillDate,Acc_RM_BillAmount=@Acc_RM_BillAmount,Acc_RM_BalanceAmount=@Acc_RM_BalanceAmount,
		Acc_RM_BillNarration=@Acc_RM_BillNarration,Acc_RM_IPAddress=@Acc_RM_IPAddress,
		Acc_RM_ChequeNo=@Acc_RM_ChequeNo,Acc_RM_ChequeDate=@Acc_RM_ChequeDate,Acc_RM_IFSCCode=@Acc_RM_IFSCCode,
		Acc_RM_BankName=@Acc_RM_BankName,Acc_RM_BranchName=@Acc_RM_BranchName,Acc_RM_InvoiceDate=@Acc_RM_InvoiceDate,Acc_RM_PaidAmount=@Acc_RM_PaidAmount,
		Acc_RM_AttachID=@Acc_RM_AttachID,ACC_RM_ZoneID=@ACC_RM_ZoneID,ACC_RM_RegionID=@ACC_RM_RegionID,ACC_RM_AreaID=@ACC_RM_AreaID,
		ACC_RM_BranchID=@ACC_RM_BranchID,Acc_RM_OrderNO=@Acc_RM_OrderNO,Acc_RM_OrderDate=@Acc_RM_OrderDate,@Acc_RM_PaymentType=Acc_RM_PaymentType,
		Acc_RM_FETotalAmt=@Acc_RM_FETotalAmt,Acc_RM_Currency=@Acc_RM_Currency,Acc_RM_DiffAmount=@Acc_RM_DiffAmount,Acc_RM_CurrencyAmt=@Acc_RM_CurrencyAmt,
		Acc_RM_CurrencyTime=@Acc_RM_CurrencyTime,Acc_RM_trTypeDetails=@Acc_RM_trTypeDetails
		Where Acc_RM_ID=@Acc_RM_ID and Acc_RM_CompID = @Acc_RM_CompID  and Acc_RM_YearID=@Acc_RM_YearID
		set @iUpdateOrSave=2          
		set @iOper = (select Acc_RM_ID from Acc_Receipt_Master where Acc_RM_ID=@Acc_RM_ID and Acc_RM_YearID=@Acc_RM_YearID and Acc_RM_CompID = @Acc_RM_CompID)
	 end                              
  else         
	  begin        
		set @Acc_RM_ID=(select isnull(max(Acc_RM_ID)+1,1) from Acc_Receipt_Master)        
		Insert into Acc_Receipt_Master(Acc_RM_ID,Acc_RM_TransactionNo,Acc_RM_Party,Acc_RM_Location,
		Acc_RM_TransactionType,Acc_RM_BillType,Acc_RM_BillNo,Acc_RM_BillDate,
		Acc_RM_BillAmount,Acc_RM_BalanceAmount,Acc_RM_ChequeNo,Acc_RM_ChequeDate,Acc_RM_IFSCCode,
		Acc_RM_BankName,Acc_RM_BranchName,Acc_RM_CreatedBy,Acc_RM_CreatedOn,
		Acc_RM_YearID,Acc_RM_CompID,Acc_RM_Status,Acc_RM_Operation,Acc_RM_IPAddress,Acc_RM_BillNarration,Acc_RM_InvoiceDate,
		Acc_RM_PaidAmount,Acc_RM_AttachID,ACC_RM_ZoneID,ACC_RM_RegionID,ACC_RM_AreaID,ACC_RM_BranchID,Acc_RM_OrderNO,Acc_RM_OrderDate,Acc_RM_PaymentType,Acc_RM_BatchNo,Acc_RM_BaseName,Acc_RM_FETotalAmt,Acc_RM_Currency,Acc_RM_DiffAmount,Acc_RM_CurrencyAmt,Acc_RM_CurrencyTime,Acc_RM_trTypeDetails)
		values(@Acc_RM_ID,@Acc_RM_TransactionNo,@Acc_RM_Party,@Acc_RM_Location,
		@Acc_RM_TransactionType,@Acc_RM_BillType,@Acc_RM_BillNo,@Acc_RM_BillDate,
		@Acc_RM_BillAmount,@Acc_RM_BalanceAmount,@Acc_RM_ChequeNo,@Acc_RM_ChequeDate,@Acc_RM_IFSCCode,
		@Acc_RM_BankName,@Acc_RM_BranchName,@Acc_RM_CreatedBy,Getdate(),
		@Acc_RM_YearID,@Acc_RM_CompID,@Acc_RM_Status,@Acc_RM_Operation,@Acc_RM_IPAddress,@Acc_RM_BillNarration,@Acc_RM_InvoiceDate,
		@Acc_RM_PaidAmount,@Acc_RM_AttachID,@ACC_RM_ZoneID,@ACC_RM_RegionID,@ACC_RM_AreaID,@ACC_RM_BranchID,@Acc_RM_OrderNO,@Acc_RM_OrderDate,@Acc_RM_PaymentType,@Acc_RM_BatchNo,@Acc_RM_BaseName,@Acc_RM_FETotalAmt,@Acc_RM_Currency,@Acc_RM_DiffAmount,@Acc_RM_CurrencyAmt,@Acc_RM_CurrencyTime,@Acc_RM_trTypeDetails)
		set @iUpdateOrSave=3       
		set @iOper = @Acc_RM_ID           
  end

/

CREATE PROCEDURE [dbo].[spInventoryMasterHistoryPhysicalUpload] 
(        
@InvH_ID int, 
@InvH_INV_ID int,         
@InvH_Flag Varchar(1), 
@InvH_Unit int,
@InvH_AlterUnit int,
@InvH_Excise Varchar(50),  
@InvH_Cst Varchar(50),  
@InvH_Vat Varchar(50), 
@InvH_CreatedBy int,    
@InvH_CompID int,  
@InvH_PerPieces int,
@INVH_MRP float,
@INVH_Retail float,
@INVH_PreDeterminedPrice float,
@INVH_EffeFrom datetime,
@INVH_EffeTo datetime,
@INVH_Others float,
@INVH_RetailEffeFrom datetime,
@INVH_RetailEffeTo datetime,
@INVH_PurchaseEffeFrom datetime,
@INVH_PurchaseEffeTo datetime,
@iUpdateOrSave int Output,      
@iOper int Output      
)          	
AS
If exists(select InvH_ID from inventory_Master_History where InvH_ID=@InvH_ID and InvH_CompID = @InvH_CompID) 
 Begin  
 Update inventory_Master_History Set InvH_INV_ID=@InvH_INV_ID,InvH_Flag=@InvH_Flag,InvH_Unit=@InvH_Unit,InvH_AlterUnit=@InvH_AlterUnit,
 InvH_Excise=@InvH_Excise,InvH_Vat=@InvH_Vat,InvH_PerPieces=@InvH_PerPieces,INVH_MRP=@INVH_MRP,INVH_Retail=@INVH_Retail,
 INVH_PreDeterminedPrice=@INVH_PreDeterminedPrice,INVH_EffeFrom=@INVH_EffeFrom,INVH_EffeTo=@INVH_EffeTo,INVH_Others=@INVH_Others,
 INVH_RetailEffeFrom=@INVH_RetailEffeFrom,INVH_RetailEffeTo=@INVH_RetailEffeTo,INVH_PurchaseEffeFrom=@INVH_PurchaseEffeFrom,INVH_PurchaseEffeTo=@INVH_PurchaseEffeTo
 Where InvH_ID=@InvH_ID And InvH_CompID=@InvH_CompID      
Set @iUpdateOrSave=2  
Set @iOper = @InvH_ID
End
Else       
BEGIN
set @InvH_ID=(select isnull(max(InvH_ID)+1,1) from inventory_Master_History)
Insert into inventory_Master_History(InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,InvH_AlterUnit,InvH_Excise,InvH_Cst,InvH_Vat,InvH_CreatedBy,InvH_CreatedOn,InvH_CompID,
InvH_PerPieces,InvH_MRP,InvH_Retail,InvH_PreDeterminedPrice,InvH_EffeFrom,InvH_EffeTo,INVH_Others,INVH_RetailEffeFrom,INVH_RetailEffeTo,
INVH_PurchaseEffeFrom,INVH_PurchaseEffeTo)
Values(@InvH_ID,@InvH_INV_ID,@InvH_Flag,@InvH_Unit,@InvH_AlterUnit,@InvH_Excise,@InvH_Cst,@InvH_Vat,@InvH_CreatedBy,GetDate(),@InvH_CompID,@InvH_PerPieces,
@InvH_MRP,@InvH_Retail,@InvH_PreDeterminedPrice,@InvH_EffeFrom,@InvH_EffeTo,@INVH_Others,@INVH_RetailEffeFrom, @INVH_RetailEffeTo,
@INVH_PurchaseEffeFrom,@INVH_PurchaseEffeTo)
    set @iUpdateOrSave=3       
    set @iOper = @InvH_ID  
END

/

CREATE PROCEDURE spPurchase_Invoice_Master 
(                
@PIM_ID int, 
@PIM_No varchar(100),      
@PIM_OrderID int,  
@PIM_PRegesterID int,
@PIM_OrderDate datetime,  
@PIM_SupplierID int,  
@PIM_InvoiceDate Datetime,
@PIM_CreatedBy int,  
@PIM_CreatedOn datetime,  
@PIM_Status varchar(1),  
@PIM_YearID int,  
@PIM_CompID int,
@PIM_TrType Int,
@PIM_CompanyAddress Varchar(200),   
@PIM_CompanyGSTNRegNo Varchar(15),
@PIM_BillingAddress Varchar(200), 
@PIM_BillingGSTNRegNo Varchar(15),
@PIM_DeliveryFrom Varchar(200),
@PIM_DeliveryFromGSTNRegNo Varchar(15),
@PIM_ReceiveAddress Varchar(200),
@PIM_ReceiveGSTNRegNo Varchar(15),
@PIM_InvoiceStatus Varchar(25),
@PIM_CompanyType int,
@PIM_GSTNCategory int, 
@PIM_ManualBillAmount money,  
@PIM_ManualGST money, 
@PIM_BillDifferenceStatus varchar(50),    
@PIM_Operation char(1),
@PIM_IPAddress Varchar(25),
@PIM_State Varchar(50),   
@iUpdateOrSave int Output,              
@iOper int Output             
)                   
AS      
BEGIN        
set @PIM_ID=(select isnull(max(PIM_ID)+1,1) from Purchase_Invoice_Master)        
Insert into Purchase_Invoice_Master(PIM_ID,PIM_No,PIM_OrderID,PIM_PRegesterID,PIM_OrderDate,PIM_SupplierID,PIM_InvoiceDate,PIM_CreatedBy,PIM_CreatedOn,PIM_Status,PIM_YearID,PIM_CompID,PIM_TrType,PIM_CompanyAddress,PIM_CompanyGSTNRegNo,PIM_BillingAddress,
PIM_BillingGSTNRegNo,PIM_DeliveryFrom,PIM_DeliveryFromGSTNRegNo,PIM_ReceiveAddress,PIM_ReceiveGSTNRegNo,PIM_InvoiceStatus,PIM_CompanyType,PIM_GSTNCategory,PIM_ManualBillAmount,PIM_ManualGST,PIM_BillDifferenceStatus,PIM_Operation,PIM_IPAddress,PIM_State)  
      
Values(@PIM_ID,@PIM_No,@PIM_OrderID,@PIM_PRegesterID,@PIM_OrderDate,@PIM_SupplierID,@PIM_InvoiceDate,@PIM_CreatedBy,@PIM_CreatedOn,@PIM_Status,@PIM_YearID,@PIM_CompID,@PIM_TrType,@PIM_CompanyAddress,@PIM_CompanyGSTNRegNo,@PIM_BillingAddress,
@PIM_BillingGSTNRegNo,@PIM_DeliveryFrom,@PIM_DeliveryFromGSTNRegNo,@PIM_ReceiveAddress,@PIM_ReceiveGSTNRegNo,@PIM_InvoiceStatus,@PIM_CompanyType,@PIM_GSTNCategory,@PIM_ManualBillAmount,@PIM_ManualGST,@PIM_BillDifferenceStatus,@PIM_Operation,@PIM_IPAddress,@PIM_State)        
    set @iUpdateOrSave=3               
    set @iOper = @PIM_ID        
END

/

CREATE PROCEDURE spPI_Accepted_Details  
(                  
@PID_ID int,    
@PID_MasterID int,    
@PID_CommodityID int,    
@PID_DescID int,    
@PID_UnitID int,    
@PID_HistoryID int, 
@PID_Remarks varchar(500),
@PID_Rate money,  
@PID_Quantity Float,
@PID_ChargePerItem money,
@PID_RateAmount money,
@PID_Discount money,
@PID_DiscountAmount money,
@PID_Amount money,
@PID_GSTID int,
@PID_GSTRate money,
@PID_GSTAmount money,
@PID_SGST money,
@PID_SGSTAmount money,
@PID_CGST money,
@PID_CGSTAmount money,
@PID_IGST money,
@PID_IGSTAmount money,
@PID_FinalTotal money,
@PID_ItemStatus varchar(1), 
@PID_Status varchar(1),    
@PID_CompID int,
@PID_CreatedBy Int,
@PID_CreatedOn DateTime,
@PID_Operation char(1),
@PID_IPAddress Varchar(25),
@iUpdateOrSave int Output,                
@iOper int Output                 
)                     
AS          
            
BEGIN          
set @PID_ID=(select isnull(max(PID_ID)+1,1) from PI_Accepted_Details  )          
Insert into PI_Accepted_Details(PID_ID,PID_MasterID,PID_CommodityID,PID_DescID,PID_UnitID,PID_HistoryID,PID_Remarks,PID_Rate,PID_Quantity,PID_ChargePerItem,PID_RateAmount,PID_Discount,PID_DiscountAmount,PID_Amount,PID_GSTID,PID_GSTRate,PID_GSTAmount,
PID_SGST,PID_SGSTAmount,PID_CGST,PID_CGSTAmount,PID_IGST,PID_IGSTAmount,PID_FinalTotal,PID_ItemStatus,PID_Status,PID_CompID,PID_CreatedBy,PID_CreatedOn,PID_Operation,PID_IPAddress)          
Values(@PID_ID,@PID_MasterID,@PID_CommodityID,@PID_DescID,@PID_UnitID,@PID_HistoryID,@PID_Remarks,@PID_Rate,@PID_Quantity,@PID_ChargePerItem,@PID_RateAmount,@PID_Discount,@PID_DiscountAmount,@PID_Amount,@PID_GSTID,@PID_GSTRate,@PID_GSTAmount,@PID_SGST,
@PID_SGSTAmount,@PID_CGST,@PID_CGSTAmount,@PID_IGST,@PID_IGSTAmount,@PID_FinalTotal,@PID_ItemStatus,@PID_Status,@PID_CompID,@PID_CreatedBy,@PID_CreatedOn,@PID_Operation,@PID_IPAddress)          
    set @iUpdateOrSave=3                 
    set @iOper = @PID_ID          
END

/

CREATE Procedure [dbo].[spGST_Rates]          
(          
@GST_ID int,
@GST_ScheduleID int,
@GST_CommodityID Int,
@GST_ItemID int,
@GST_ScheduleType Int,
@GST_GSTRate money,
@GST_SlNo varchar(6),
@GST_CHST Varchar(10),
@GST_Chapter varchar(6),
@GST_Heading varchar(6),
@GST_SubHeading varchar(6),
@GST_Tarrif Varchar(6),
@GST_SubSlNo varchar(6), 
@GST_CESS money,
@GST_GoodDescription Varchar(8000),
@GST_NotificationNo Varchar(50),
@GST_NotificationFromDate Datetime,
@GST_NotificationToDate Datetime,
@GST_FileNo Varchar(50),
@GST_FileFromDate Datetime,
@GST_FileToDate Datetime,
@GST_Status varchar(20),
@GST_CompID int,
@GST_YearID int,
@GST_Operation varchar(1),
@GST_IPAddress Varchar(25),    
@iUpdateOrSave int Output,        
@iOper int Output        
)            
 as         
begin       
 set @GST_ID=(select isnull(max(GST_ID)+1,1) from GST_Rates)          
  Insert into GST_Rates (GST_ID,GST_ScheduleID,GST_CommodityID,GST_ItemID,GST_ScheduleType,GST_GSTRate,GST_SlNo,GST_CHST,GST_Chapter,GST_Heading,GST_SubHeading,
  GST_Tarrif,GST_SubSlNo,GST_CESS,GST_GoodDescription,GST_NotificationNo,GST_NotificationFromDate,GST_NotificationToDate,GST_FileNo,GST_FileFromDate,GST_FileToDate,GST_Status,GST_CompID,GST_YearID,GST_Operation,GST_IPAddress)          
  values          
   (@GST_ID,@GST_ScheduleID,@GST_CommodityID,@GST_ItemID,@GST_ScheduleType,@GST_GSTRate,@GST_SlNo,@GST_CHST,@GST_Chapter,@GST_Heading,@GST_SubHeading,
   @GST_Tarrif,@GST_SubSlNo,@GST_CESS,@GST_GoodDescription,@GST_NotificationNo,@GST_NotificationFromDate,@GST_NotificationToDate,@GST_FileNo,@GST_FileFromDate,@GST_FileToDate,@GST_Status,@GST_CompID,@GST_YearID,@GST_Operation,@GST_IPAddress)     
  set @iUpdateOrSave=3         
  set @iOper = @GST_ID             
  end 

/

CREATE Procedure [dbo].[spAcc_GST_Schedule]          
(          
@AGS_ID int,
@AGS_GSTM_ID int,  
@AGS_Schedule_Type int,
@AGS_GSTRate money,
@AGS_SlnoOfSchedule Varchar(6),
@AGS_CHST Varchar(10),
@AGS_Chapter Varchar(6),
@AGS_Heading Varchar(6),
@AGS_SubHeading Varchar(6),
@AGS_Tarrif Varchar(6),
@AGS_GoodDescription Varchar(8000),
@AGS_NotificationNo Varchar(50),
@AGS_NotificationDate Datetime,
@AGS_FileNo Varchar(50),
@AGS_FileDate Datetime,
@AGS_Createdby int,
@AGS_CreatedOn datetime,
@AGS_Status Varchar(20),
@AGS_YearID int,
@AGS_CompID int,  
@AGS_Operation Varchar(1),
@AGS_IPAddress Varchar(25), 
@iUpdateOrSave int Output,        
@iOper int Output        
)            
 as       
begin       
 set @AGS_ID=(select isnull(max(AGS_ID)+1,1) from Acc_GST_Schedule)          
  Insert into Acc_GST_Schedule(AGS_ID,AGS_GSTM_ID,AGS_Schedule_Type,AGS_GSTRate,AGS_SlnoOfSchedule,AGS_CHST,AGS_Chapter,AGS_Heading,AGS_SubHeading,AGS_Tarrif,AGS_GoodDescription,AGS_NotificationNo,AGS_NotificationDate,AGS_FileNo,AGS_FileDate,AGS_Createdby,AGS_CreatedOn,AGS_Status,AGS_YearID,AGS_CompID,AGS_Operation,AGS_IPAddress)          
  values          
   (@AGS_ID,@AGS_GSTM_ID,@AGS_Schedule_Type,@AGS_GSTRate,@AGS_SlnoOfSchedule,@AGS_CHST,@AGS_Chapter,@AGS_Heading,@AGS_SubHeading,@AGS_Tarrif,@AGS_GoodDescription,@AGS_NotificationNo,@AGS_NotificationDate,@AGS_FileNo,@AGS_FileDate,@AGS_Createdby,@AGS_CreatedOn,@AGS_Status,@AGS_YearID,@AGS_CompID,@AGS_Operation,@AGS_IPAddress)     
  set @iUpdateOrSave=3         
  set @iOper = @AGS_ID       
  end

/

CREATE PROCEDURE spDispatch_Details          
(                  
@DD_ID int,    
@DD_MasterID int,    
@DD_CommodityID int,    
@DD_DescID int,    
@DD_UnitID int,    
@DD_HistoryID int,
@DD_Rate money,  
@DD_Quantity Float,
@DD_RateAmount money,   
@DD_Status varchar(1),    
@DD_CompID int,
@DD_CreatedBy Int,
@DD_CreatedOn DateTime,
@DD_Operation char(1),
@DD_IPAddress Varchar(25),
@DD_GST_ID Int,
@DD_GSTRate money,     
@iUpdateOrSave int Output,                
@iOper int Output                 
)                     
AS          
            
BEGIN          
set @DD_ID=(select isnull(max(DD_ID)+1,1) from Dispatch_Details)          
Insert into Dispatch_Details(DD_ID,DD_MasterID,DD_CommodityID,DD_DescID,DD_UnitID,DD_HistoryID,DD_Rate,DD_Quantity,DD_RateAmount,DD_Status,DD_CompID,DD_CreatedBy,DD_CreatedOn,DD_Operation,DD_IPAddress,DD_GST_ID,DD_GSTRate)          
Values(@DD_ID,@DD_MasterID,@DD_CommodityID,@DD_DescID,@DD_UnitID,@DD_HistoryID,@DD_Rate,@DD_Quantity,@DD_RateAmount,@DD_Status,@DD_CompID,@DD_CreatedBy,@DD_CreatedOn,@DD_Operation,@DD_IPAddress,@DD_GST_ID,@DD_GSTRate)          
    set @iUpdateOrSave=3                 
    set @iOper = @DD_ID          
END 
   
/

CREATE procedure dbo.spAcc_Challen_Details(
	@ACD_ID int,
	@ACD_MasterID int,
	@ACD_BankID int ,
	@ACD_Branch int ,
	@ACD_ContactNo varchar(20) ,
	@ACD_PANNo varchar(20) ,
	@ACD_Rupees varchar(max) ,
	@ACD_Amount money ,
	@ACD_ChequeNo int ,
	@ACD_ChequeDate datetime,
	@ACD_AccountNo varchar(20) ,
	@ACD_AccountType int ,
	@ACD_MICRCode varchar(9) ,
	@ACD_CompID int ,
	@ACD_YearID int ,
	@ACD_Status varchar(1) ,
	@ACD_CreatedBy int ,
	@ACD_CreatedOn datetime ,	
@iUpdateOrSave int Output,      
@iOper int Output   
)          
as                
  if exists(select ACD_ID from Acc_Challen_Details where ACD_ID=@ACD_ID)              
     begin                	            
		Update Acc_Challen_Details set ACD_MasterID=@ACD_MasterID,ACD_BankID=@ACD_BankID,ACD_Branch=@ACD_Branch,ACD_ContactNo=@ACD_ContactNo,
		ACD_PANNo=@ACD_PANNo,ACD_Rupees=@ACD_Rupees,ACD_Amount=@ACD_Amount,ACD_ChequeNo=@ACD_ChequeNo,ACD_ChequeDate=getdate(),ACD_AccountNo=@ACD_AccountNo ,
		ACD_AccountType=@ACD_AccountType,ACD_MICRCode=@ACD_MICRCode,ACD_CompID=@ACD_CompID,ACD_YearID=@ACD_YearID,ACD_Status=@ACD_Status
		Where ACD_ID=@ACD_ID
		set @iUpdateOrSave=2          
		set @iOper = @ACD_ID
	 end      
	 	                         
  else         
	  begin        
		set  @ACD_ID=(select isnull(max(ACD_ID)+1,1) from Acc_Challen_Details)        
		Insert into Acc_Challen_Details (ACD_ID,ACD_MasterID,ACD_BankID,ACD_Branch,ACD_ContactNo,ACD_PANNo,ACD_Rupees,ACD_Amount,
	ACD_ChequeNo,ACD_ChequeDate,ACD_AccountNo,ACD_AccountType,ACD_MICRCode,ACD_CompID,ACD_YearID,ACD_Status,ACD_CreatedBy)

		values(@ACD_ID,@ACD_MasterID,@ACD_BankID,@ACD_Branch,@ACD_ContactNo,@ACD_PANNo,@ACD_Rupees,@ACD_Amount,
	@ACD_ChequeNo,@ACD_ChequeDate,@ACD_AccountNo,@ACD_AccountType,@ACD_MICRCode,@ACD_CompID,@ACD_YearID,@ACD_Status,@ACD_CreatedBy)
		set @iUpdateOrSave=3       
		set @iOper = @ACD_ID          
  end  

/

Create trigger ACC_COA_Settings_Log_Trigger On ACC_COA_Settings For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select ACS_Status from Inserted)='U'
				BEGIN       
				INSERT INTO ACC_COA_Settings_Log
(Log_Operation,Log_UserID,ACS_Id,ACS_AccHead,nACS_AccHead,ACS_AccHeadPrefix,nACS_AccHeadPrefix,ACS_Group,nACS_Group ,
	ACS_SubGroup,nACS_SubGroup,ACS_GL,nACS_GL,ACS_SubGL,nACS_SubGL ,ACS_CompId,ACS_IPAddress,ACS_Status,ACS_Delflag)
select 'updated',I.ACS_UpdatedBy,I.ACS_Id,D.ACS_AccHead,I.ACS_AccHead,D.ACS_AccHeadPrefix,I.ACS_AccHeadPrefix,D.ACS_Group,I.ACS_Group,
D.ACS_SubGroup,I.ACS_SubGroup,D.ACS_GL,I.ACS_GL,D.ACS_SubGL,I.ACS_SubGL,I.ACS_CompId,I.ACS_IPAddress,I.ACS_Status,I.ACS_Delflag FROM Inserted I Inner Join Deleted D ON D.ACS_Id=I.ACS_Id  
end
				
		END
	ELSE
		BEGIN  
			INSERT INTO ACC_COA_Settings_Log
				(Log_Operation,Log_UserID,ACS_Id,nACS_AccHead,nACS_AccHeadPrefix,nACS_Group ,
	nACS_SubGroup,nACS_GL,nACS_SubGL,ACS_CompId,ACS_IPAddress,ACS_Status,ACS_Delflag)
				SELECT 'Created',ACS_CreatedBy,ACS_Id,ACS_AccHead,ACS_AccHeadPrefix,ACS_Group,
	ACS_SubGroup,ACS_GL,ACS_SubGL,ACS_CompId,ACS_IPAddress,ACS_Status,ACS_Delflag
			 FROM Inserted
		END
	END  


 /

create trigger Acc_FixedAssets_Breakup_Log_Trigger On Acc_FixedAssets_Breakup For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select AFB_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_FixedAssets_Breakup_Log
(Log_Operation,Log_UserID,AFB_Id,AFB_SubGroupID,nAFB_SubGroupID,AFB_GLID,nAFB_GLID,AFB_Head,nAFB_Head,AFB_Amount,
	nAFB_Amount,AFB_YearId,AFB_CompID,AFB_IPAddress,AFB_Status,AFB_Delflag)
select 'updated',I.AFB_UpdatedBy,I.AFB_Id,D.AFB_SubGroupID,I.AFB_SubGroupID,D.AFB_GLID,I.AFB_GLID,D.AFB_Head,I.AFB_Head,
D.AFB_Amount,I.AFB_Amount,I.AFB_YearId,I.AFB_CompID,I.AFB_IPAddress,I.AFB_Status,I.AFB_Delflag FROM Inserted I Inner Join Deleted D ON D.AFB_Id=I.AFB_Id  
end
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_FixedAssets_Breakup_Log
				(Log_Operation,Log_UserID,AFB_Id,nAFB_SubGroupID,nAFB_GLID,nAFB_Head,
	nAFB_Amount,AFB_YearId,AFB_CompID,AFB_IPAddress,AFB_Status,AFB_Delflag)
				SELECT 'Created',AFB_CreatedBy,AFB_Id,AFB_SubGroupID,AFB_GLID,AFB_Head,
AFB_Amount,AFB_YearId,AFB_CompID,AFB_IPAddress,AFB_Status,AFB_Delflag
			 FROM Inserted
		END
	END  


/

Create trigger ACC_General_Master_Log_Trigger On ACC_General_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Mas_Status from Inserted)='U'
				BEGIN       
				INSERT INTO ACC_General_Master_Log
					(Log_Operation,Log_UserID,Mas_id,Mas_desc,nMas_desc,Mas_delflag,Mas_master,nMas_master,Mas_Remarks,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
					SELECT 'Updated',I.Mas_UpdatedBy,I.Mas_id,D.Mas_desc,I.Mas_desc,I.Mas_delflag,D.Mas_master,I.Mas_master,D.Mas_Remarks,I.Mas_Remarks,I.Mas_CompID,I.Mas_Status,I.Mas_IPAddress FROM Inserted I Inner Join Deleted D ON D.Mas_id=I.Mas_id  
			End

			IF(Select Mas_Status from Inserted)='A'
				BEGIN       
				INSERT INTO ACC_General_Master_Log
					(Log_Operation,Log_UserID,Mas_id,Mas_desc,nMas_desc,Mas_delflag,Mas_master,nMas_master,Mas_Remarks,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
					SELECT 'Approved',I.Mas_AppBy,I.Mas_id,D.Mas_desc,I.Mas_desc,I.Mas_delflag,D.Mas_master,I.Mas_master,D.Mas_Remarks,I.Mas_Remarks,I.Mas_CompID,I.Mas_Status,I.Mas_IPAddress FROM Inserted I Inner Join Deleted D ON D.Mas_id=I.Mas_id  
			End

			IF(Select Mas_Status from Inserted)='D'
				BEGIN       
				INSERT INTO ACC_General_Master_Log
					(Log_Operation,Log_UserID,Mas_id,Mas_desc,nMas_desc,Mas_delflag,Mas_master,nMas_master,Mas_Remarks,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.Mas_DeletedBy,I.Mas_id,D.Mas_desc,I.Mas_desc,I.Mas_delflag,D.Mas_master,I.Mas_master,D.Mas_Remarks,I.Mas_Remarks,I.Mas_CompID,I.Mas_Status,I.Mas_IPAddress FROM Inserted I Inner Join Deleted D ON D.Mas_id=I.Mas_id 
			End

			IF(Select Mas_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO ACC_General_Master_Log
					(Log_Operation,Log_UserID,Mas_id,Mas_desc,nMas_desc,Mas_delflag,Mas_master,nMas_master,Mas_Remarks,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
					SELECT 'De-Activated',I.Mas_Deletedby,I.Mas_id,D.Mas_desc,I.Mas_desc,I.Mas_delflag,D.Mas_master,I.Mas_master,D.Mas_Remarks,I.Mas_Remarks,I.Mas_CompID,I.Mas_Status,I.Mas_IPAddress FROM Inserted I Inner Join Deleted D ON D.Mas_id=I.Mas_id 
			End

			IF(Select Mas_Status from Inserted)='R'
				BEGIN       
				INSERT INTO ACC_General_Master_Log
					(Log_Operation,Log_UserID,Mas_id,Mas_desc,nMas_desc,Mas_delflag,Mas_master,nMas_master,Mas_Remarks,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
					SELECT 'Activated(Not Approved)',I.Mas_RecalledBy,I.Mas_id,D.Mas_desc,I.Mas_desc,I.Mas_delflag,D.Mas_master,I.Mas_master,D.Mas_Remarks,I.Mas_Remarks,I.Mas_CompID,I.Mas_Status,I.Mas_IPAddress FROM Inserted I Inner Join Deleted D ON D.Mas_id=I.Mas_id
			End
			
			IF(Select Mas_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO ACC_General_Master_Log
					(Log_Operation,Log_UserID,Mas_id,Mas_desc,nMas_desc,Mas_delflag,Mas_master,nMas_master,Mas_Remarks,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
				    SELECT 'Activated',I.Mas_RecalledBy,I.Mas_id,D.Mas_desc,I.Mas_desc,I.Mas_delflag,D.Mas_master,I.Mas_master,D.Mas_Remarks,I.Mas_Remarks,I.Mas_CompID,I.Mas_Status,I.Mas_IPAddress FROM Inserted I Inner Join Deleted D ON D.Mas_id=I.Mas_id 
			End
			
		END
	ELSE
		BEGIN  
			INSERT INTO ACC_General_Master_Log
				(Log_Operation,Log_UserID,Mas_id,nMas_desc,Mas_delflag,nMas_master,nMas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress)
				SELECT 'Created',Mas_CrBy,Mas_id,Mas_desc,Mas_delflag,Mas_master,Mas_Remarks,Mas_CompID,Mas_Status,Mas_IPAddress 
			 FROM Inserted
		END
	END  

/

	create trigger Acc_JE_BillDetails_Log_Trigger On  Acc_JE_BillDetails For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_JE_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_JE_BillDetails_Log
					(Log_Operation,Log_UserID,Acc_JE_ID,Acc_JE_BillType,nAcc_JE_BillType,Acc_JE_BillNo,nAcc_JE_BillNo,Acc_JE_BillDate,nAcc_JE_BillDate,Acc_JE_BillAmount,nAcc_JE_BillAmount,Acc_JE_Narration,nAcc_JE_Narration,Acc_JE_YearID,Acc_JE_CompID,Acc_JE_Status,Acc_JE_IPAddress,Acc_JE_Delflag)
					SELECT 'Updated',I.Acc_JE_UpdatedBy,I.Acc_JE_Id,D.Acc_JE_BillType,I.Acc_JE_BillType,D.Acc_JE_BillNo,I.Acc_JE_BillNo,D.Acc_JE_BillDate,I.Acc_JE_BillDate,D.Acc_JE_BillAmount,I.Acc_JE_BillAmount,D.Acc_JE_Narration,I.Acc_JE_Narration,I.Acc_JE_YearID,I.Acc_JE_CompId,I.Acc_JE_Status,I.Acc_JE_IPAddress,I.Acc_JE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_JE_ID=I.Acc_JE_ID  
			End

			IF(Select Acc_JE_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_JE_BillDetails_Log
				(Log_Operation,Log_UserID,Acc_JE_ID,Acc_JE_BillType,nAcc_JE_BillType,Acc_JE_BillNo,nAcc_JE_BillNo,Acc_JE_BillDate,nAcc_JE_BillDate,Acc_JE_BillAmount,nAcc_JE_BillAmount,Acc_JE_Narration,nAcc_JE_Narration,Acc_JE_YearID,Acc_JE_CompID,Acc_JE_Status,Acc_JE_IPAddress,Acc_JE_Delflag)
					SELECT 'Approved',I.Acc_JE_ApprovedBy,I.Acc_JE_Id,D.Acc_JE_BillType,I.Acc_JE_BillType,D.Acc_JE_BillNo,I.Acc_JE_BillNo,D.Acc_JE_BillDate,I.Acc_JE_BillDate,D.Acc_JE_BillAmount,I.Acc_JE_BillAmount,D.Acc_JE_Narration,I.Acc_JE_Narration,I.Acc_JE_YearID,I.Acc_JE_CompId,I.Acc_JE_Status,I.Acc_JE_IPAddress,I.Acc_JE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_JE_ID=I.Acc_JE_ID  
			End

			IF(Select Acc_JE_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_JE_BillDetails_Log
					(Log_Operation,Log_UserID,Acc_JE_ID,Acc_JE_BillType,nAcc_JE_BillType,Acc_JE_BillNo,nAcc_JE_BillNo,Acc_JE_BillDate,nAcc_JE_BillDate,Acc_JE_BillAmount,nAcc_JE_BillAmount,Acc_JE_Narration,nAcc_JE_Narration,Acc_JE_YearID,Acc_JE_CompID,Acc_JE_Status,Acc_JE_IPAddress,Acc_JE_Delflag)
					SELECT 'De-Activated(Not Approved)',I.Acc_JE_DeletedBy,I.Acc_JE_Id,D.Acc_JE_BillType,I.Acc_JE_BillType,D.Acc_JE_BillNo,I.Acc_JE_BillNo,D.Acc_JE_BillDate,I.Acc_JE_BillDate,D.Acc_JE_BillAmount,I.Acc_JE_BillAmount,D.Acc_JE_Narration,I.Acc_JE_Narration,I.Acc_JE_YearID,I.Acc_JE_CompId,I.Acc_JE_Status,I.Acc_JE_IPAddress,I.Acc_JE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_JE_ID=I.Acc_JE_ID 
			End

			IF(Select Acc_JE_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_JE_BillDetails_Log
				(Log_Operation,Log_UserID,Acc_JE_ID,Acc_JE_BillType,nAcc_JE_BillType,Acc_JE_BillNo,nAcc_JE_BillNo,Acc_JE_BillDate,nAcc_JE_BillDate,Acc_JE_BillAmount,nAcc_JE_BillAmount,Acc_JE_Narration,nAcc_JE_Narration,Acc_JE_YearID,Acc_JE_CompID,Acc_JE_Status,Acc_JE_IPAddress,Acc_JE_Delflag)
					SELECT 'De-Activated',I.Acc_JE_Deletedby,I.Acc_JE_Id,D.Acc_JE_BillType,I.Acc_JE_BillType,D.Acc_JE_BillNo,I.Acc_JE_BillNo,D.Acc_JE_BillDate,I.Acc_JE_BillDate,D.Acc_JE_BillAmount,I.Acc_JE_BillAmount,D.Acc_JE_Narration,I.Acc_JE_Narration,I.Acc_JE_YearID,I.Acc_JE_CompId,I.Acc_JE_Status,I.Acc_JE_IPAddress,I.Acc_JE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_JE_ID=I.Acc_JE_ID 
			End
			
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_JE_BillDetails_Log
				(Log_Operation,Log_UserID,Acc_JE_ID,nAcc_JE_BillType,nAcc_JE_BillNo,nAcc_JE_BillDate,nAcc_JE_BillAmount,nAcc_JE_Narration,Acc_JE_YearID,Acc_JE_CompID,Acc_JE_Status,Acc_JE_IPAddress,Acc_JE_Delflag)
				SELECT 'Created',Acc_JE_CreatedBy,Acc_JE_Id,Acc_JE_BillType,Acc_JE_BillNo,Acc_JE_BillDate,Acc_JE_BillAmount,Acc_JE_Narration,Acc_JE_YearID,Acc_JE_CompId,Acc_JE_Status,Acc_JE_IPAddress,Acc_JE_Delflag
			 FROM Inserted
		END
	END  

/		
	create trigger Acc_JE_Transaction_Log_Trigger On  Acc_JE_Transaction For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_JET_status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_JE_Transaction_Log
(Log_Operation,Log_UserID,Acc_JET_ID,Acc_JET_MasterBillID,nAcc_JET_MasterBillID,Acc_JET_ChequeNo,nAcc_JET_ChequeNo,Acc_JET_ChequeDate,
nAcc_JET_ChequeDate,Acc_JET_ChequeAmount,nAcc_JET_ChequeAmount,Acc_JET_BankName,nAcc_JET_BankName,Acc_JET_BranchName,
nAcc_JET_BranchName,Acc_JET_YearID,Acc_JET_CompID,Acc_JET_BillAmount,nAcc_JET_BillAmount,Acc_JET_NetAmount,
nAcc_JET_NetAmount,Acc_JET_IPAddress,Acc_JET_Delflag,Acc_JET_status)
					SELECT 'Updated',I.Acc_JET_UpdatedBy,I.Acc_JET_ID,D.Acc_JET_MAsterBillID,I.Acc_JET_MasterBillID,D.Acc_JET_ChequeNo,
I.Acc_JET_ChequeNo,D.Acc_JET_ChequeDate,I.Acc_JET_ChequeDate,D.Acc_JET_ChequeAmount,I.Acc_JET_ChequeAmount,D.Acc_JET_BankName,
I.Acc_JET_BankName,D.Acc_JET_BranchName,I.Acc_JET_BranchName,I.Acc_JET_YearID,I.Acc_JET_CompID,D.Acc_JET_BillAmount,I.Acc_JET_BillAmount,D.Acc_JET_NetAmount,
I.Acc_JET_NetAmount,I.Acc_JET_IPAddress,I.Acc_JET_Delflag,I.Acc_JET_status FROM Inserted I Inner Join Deleted D ON D.Acc_JET_ID=I.Acc_JET_ID  
			End	
			
	IF(Select Acc_JET_status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_JE_Transaction_Log
(Log_Operation,Log_UserID,Acc_JET_ID,Acc_JET_MasterBillID,nAcc_JET_MasterBillID,Acc_JET_ChequeNo,nAcc_JET_ChequeNo,Acc_JET_ChequeDate,
nAcc_JET_ChequeDate,Acc_JET_ChequeAmount,nAcc_JET_ChequeAmount,Acc_JET_BankName,nAcc_JET_BankName,Acc_JET_BranchName,
nAcc_JET_BranchName,Acc_JET_YearID,Acc_JET_CompID,Acc_JET_BillAmount,nAcc_JET_BillAmount,Acc_JET_NetAmount,
nAcc_JET_NetAmount,Acc_JET_IPAddress,Acc_JET_Delflag,Acc_JET_status)
					SELECT 'Approved',I.Acc_JET_ApprovedBy,I.Acc_JET_ID,D.Acc_JET_MAsterBillID,I.Acc_JET_MasterBillID,D.Acc_JET_ChequeNo,
I.Acc_JET_ChequeNo,D.Acc_JET_ChequeDate,I.Acc_JET_ChequeDate,D.Acc_JET_ChequeAmount,I.Acc_JET_ChequeAmount,D.Acc_JET_BankName,
I.Acc_JET_BankName,D.Acc_JET_BranchName,I.Acc_JET_BranchName,I.Acc_JET_YearID,I.Acc_JET_CompID,D.Acc_JET_BillAmount,I.Acc_JET_BillAmount,D.Acc_JET_NetAmount,
I.Acc_JET_NetAmount,I.Acc_JET_IPAddress,I.Acc_JET_Delflag,I.Acc_JET_status FROM Inserted I Inner Join Deleted D ON D.Acc_JET_ID=I.Acc_JET_ID    
			End	
			
			IF(Select Acc_JET_status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_JE_Transaction_Log
(Log_Operation,Log_UserID,Acc_JET_ID,Acc_JET_MasterBillID,nAcc_JET_MasterBillID,Acc_JET_ChequeNo,nAcc_JET_ChequeNo,Acc_JET_ChequeDate,
nAcc_JET_ChequeDate,Acc_JET_ChequeAmount,nAcc_JET_ChequeAmount,Acc_JET_BankName,nAcc_JET_BankName,Acc_JET_BranchName,
nAcc_JET_BranchName,Acc_JET_YearID,Acc_JET_CompID,Acc_JET_BillAmount,nAcc_JET_BillAmount,Acc_JET_NetAmount,
nAcc_JET_NetAmount,Acc_JET_IPAddress,Acc_JET_Delflag,Acc_JET_status)
					SELECT 'De-Activated(Not Approved)',I.Acc_JET_DeletedBy,I.Acc_JET_ID,D.Acc_JET_MAsterBillID,I.Acc_JET_MasterBillID,D.Acc_JET_ChequeNo,
I.Acc_JET_ChequeNo,D.Acc_JET_ChequeDate,I.Acc_JET_ChequeDate,D.Acc_JET_ChequeAmount,I.Acc_JET_ChequeAmount,D.Acc_JET_BankName,
I.Acc_JET_BankName,D.Acc_JET_BranchName,I.Acc_JET_BranchName,I.Acc_JET_YearID,I.Acc_JET_CompID,D.Acc_JET_BillAmount,I.Acc_JET_BillAmount,D.Acc_JET_NetAmount,
I.Acc_JET_NetAmount,I.Acc_JET_IPAddress,I.Acc_JET_Delflag,I.Acc_JET_status FROM Inserted I Inner Join Deleted D ON D.Acc_JET_ID=I.Acc_JET_ID    
			End	
					
					IF(Select Acc_JET_status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_JE_Transaction_Log
(Log_Operation,Log_UserID,Acc_JET_ID,Acc_JET_MasterBillID,nAcc_JET_MasterBillID,Acc_JET_ChequeNo,nAcc_JET_ChequeNo,Acc_JET_ChequeDate,
nAcc_JET_ChequeDate,Acc_JET_ChequeAmount,nAcc_JET_ChequeAmount,Acc_JET_BankName,nAcc_JET_BankName,Acc_JET_BranchName,
nAcc_JET_BranchName,Acc_JET_YearID,Acc_JET_CompID,Acc_JET_BillAmount,nAcc_JET_BillAmount,Acc_JET_NetAmount,
nAcc_JET_NetAmount,Acc_JET_IPAddress,Acc_JET_Delflag,Acc_JET_status)
					SELECT 'De-Activated',I.Acc_JET_DeletedBy,I.Acc_JET_ID,D.Acc_JET_MAsterBillID,I.Acc_JET_MasterBillID,D.Acc_JET_ChequeNo,
I.Acc_JET_ChequeNo,D.Acc_JET_ChequeDate,I.Acc_JET_ChequeDate,D.Acc_JET_ChequeAmount,I.Acc_JET_ChequeAmount,D.Acc_JET_BankName,
I.Acc_JET_BankName,D.Acc_JET_BranchName,I.Acc_JET_BranchName,I.Acc_JET_YearID,I.Acc_JET_CompID,D.Acc_JET_BillAmount,I.Acc_JET_BillAmount,D.Acc_JET_NetAmount,
I.Acc_JET_NetAmount,I.Acc_JET_IPAddress,I.Acc_JET_Delflag,I.Acc_JET_status FROM Inserted I Inner Join Deleted D ON D.Acc_JET_ID=I.Acc_JET_ID    
			End	
							
							
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_JE_Transaction_Log
(Log_Operation,Log_UserID,Acc_JET_ID,nAcc_JET_MasterBillID,nAcc_JET_ChequeNo,nAcc_JET_ChequeDate,
nAcc_JET_ChequeAmount,nAcc_JET_BankName,nAcc_JET_BranchName,Acc_JET_YearID,Acc_JET_CompID,
nAcc_JET_BillAmount,nAcc_JET_NetAmount,Acc_JET_IPAddress,Acc_JET_Delflag,Acc_JET_status)
SELECT 'Created',Acc_JET_CreatedBy,Acc_JET_ID,Acc_JET_MasterBillID,Acc_JET_ChequeNo,Acc_JET_ChequeDate,
Acc_JET_ChequeAmount,Acc_JET_BankName,Acc_JET_BankName,Acc_JET_YearID,Acc_JET_CompID,Acc_JET_BillAmount,
Acc_JET_NetAmount,Acc_JET_IPAddress,Acc_JET_Delflag,Acc_JET_status
			 FROM Inserted
		END
	END  

/

create trigger ACC_Opening_Balance_Log_Trigger On  ACC_Opening_Balance For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Opn_Status from Inserted)='U'
				BEGIN       
				INSERT INTO ACC_Opening_Balance_Log
(Log_Operation,Log_UserID,Opn_Id,Opn_SerialNo,nOpn_SerialNo,Opn_Date,nOpn_Date,Opn_AccHead,nOpn_AccHead,Opn_GLCode,nOpn_GLCode,Opn_DebitAmt,
nOpn_DebitAmt,Opn_CreditAmount,nOpn_CreditAmount,Opn_YearId,Opn_Status,Opn_CompId,Opn_GlId,nOpn_GlId,Opn_CustType,nOpn_CustType,Opn_IndType,
nOpn_IndType,Opn_ClosingBalanceDebit,nOpn_ClosingBalanceDebit,Opn_ClosingBalanceCredit,nOpn_ClosingBalanceCredit,Opn_IPAddress,Opn_Delflag)
SELECT 'Updated',I.Opn_UpdatedBy,I.Opn_Id,D.Opn_SerialNo,I.Opn_SerialNo,D.Opn_Date,I.Opn_Date,D.Opn_AccHead,I.Opn_AccHead,D.Opn_GLCode,
I.Opn_GLCode,D.Opn_DebitAmt,I.Opn_DebitAmt,D.Opn_CreditAmount,I.Opn_CreditAmount,I.Opn_YearId,I.Opn_Status,I.Opn_CompId,D.Opn_GlId,I.Opn_GlId,
D.Opn_CustType,I.Opn_CustType,D.Opn_IndType,I.Opn_IndType,D.Opn_ClosingBalanceDebit,I.Opn_ClosingBalanceDebit,D.Opn_ClosingBalanceCredit,
I.Opn_ClosingBalanceCredit,I.Opn_IPAddress,I.Opn_Delflag FROM Inserted I Inner Join Deleted D ON D.Opn_Id=I.Opn_Id  
			End	
			
	IF(Select Opn_Status from Inserted)='A'
				BEGIN       
				INSERT INTO ACC_Opening_Balance_Log
(Log_Operation,Log_UserID,Opn_Id,Opn_SerialNo,nOpn_SerialNo,Opn_Date,nOpn_Date,Opn_AccHead,nOpn_AccHead,Opn_GLCode,nOpn_GLCode,Opn_DebitAmt,
nOpn_DebitAmt,Opn_CreditAmount,nOpn_CreditAmount,Opn_YearId,Opn_Status,Opn_CompId,Opn_GlId,nOpn_GlId,Opn_CustType,nOpn_CustType,Opn_IndType,
nOpn_IndType,Opn_ClosingBalanceDebit,nOpn_ClosingBalanceDebit,Opn_ClosingBalanceCredit,nOpn_ClosingBalanceCredit,Opn_IPAddress,Opn_Delflag)
					SELECT 'Approved',I.Opn_ApprovedBy,I.Opn_Id,D.Opn_SerialNo,I.Opn_SerialNo,D.Opn_Date,I.Opn_Date,D.Opn_AccHead,I.Opn_AccHead,D.Opn_GLCode,
I.Opn_GLCode,D.Opn_DebitAmt,I.Opn_DebitAmt,D.Opn_CreditAmount,I.Opn_CreditAmount,I.Opn_YearId,I.Opn_Status,I.Opn_CompId,D.Opn_GlId,I.Opn_GlId,
D.Opn_CustType,I.Opn_CustType,D.Opn_IndType,I.Opn_IndType,D.Opn_ClosingBalanceDebit,I.Opn_ClosingBalanceDebit,D.Opn_ClosingBalanceCredit,
I.Opn_ClosingBalanceCredit,I.Opn_IPAddress,I.Opn_Delflag FROM Inserted I Inner Join Deleted D ON D.Opn_Id=I.Opn_Id    
			End	
										
		END
	ELSE
		BEGIN  
			INSERT INTO ACC_Opening_Balance_Log
(Log_Operation,Log_UserID,Opn_Id,nOpn_SerialNo,nOpn_Date,nOpn_AccHead,nOpn_GLCode,nOpn_DebitAmt,nOpn_CreditAmount,Opn_YearId,Opn_Status,
Opn_CompId,nOpn_GlId,nOpn_CustType,nOpn_IndType,nOpn_ClosingBalanceDebit,nOpn_ClosingBalanceCredit,Opn_IPAddress,Opn_Delflag)
SELECT 'Created',Opn_CreatedBy,Opn_Id,Opn_SerialNo,Opn_Date,Opn_AccHead,Opn_GLCode,Opn_DebitAmt,Opn_CreditAmount,Opn_YearId,Opn_Status,
Opn_CompId,Opn_GlId,Opn_CustType,Opn_IndType,Opn_ClosingBalanceDebit,Opn_ClosingBalanceCredit,Opn_IPAddress,Opn_Delflag   
			 FROM Inserted
		END
	END 
	
/	 

create trigger acc_Payment_Transaction_Log_Trigger On Acc_Payment_Transaction For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_PT_Status from Inserted)='U'
				BEGIN       
				INSERT INTO acc_Payment_Transaction_Log

(Log_Operation  ,Log_UserID  ,Acc_PT_ID  ,Acc_PT_MasterBillID  ,nAcc_PT_MasterBillID  ,Acc_PT_BillAmount  ,nAcc_PT_BillAmount  ,Acc_PT_AdvanceAmount  ,
nAcc_PT_AdvanceAmount  ,Acc_PT_NetAmount  ,nAcc_PT_NetAmount  ,Acc_PT_TDSType  ,nAcc_PT_TDSType  ,ACC_PT_TDSPercentage ,nACC_PT_TDSPercentage  ,
ACC_PT_TDSAmount  ,nACC_PT_TDSAmount  ,ACC_PT_ReasonforDeduction  ,nACC_PT_ReasonforDeduction  ,Acc_PT_PaymentAmount  ,nAcc_PT_PaymentAmount  ,
Acc_PT_ChequeNo  ,nAcc_PT_ChequeNo  ,Acc_PT_ChequeDate ,nAcc_PT_ChequeDate ,Acc_PT_ChequeAmount  ,nAcc_PT_ChequeAmount  ,Acc_PT_BankName  ,
nAcc_PT_BankName  ,Acc_PT_BranchNane  ,nAcc_PT_BranchNane  ,Acc_PT_YearID  ,Acc_PT_CompID  ,Acc_PT_IPAddress)

SELECT 'Updated',I.Acc_PT_UpdatedBy,I.Acc_PT_ID,D.Acc_PT_MasterBillID,I.Acc_PT_MasterBillID,D.Acc_PT_BillAmount,I.Acc_PT_BillAmount,D.Acc_PT_AdvanceAmount,
I.Acc_PT_AdvanceAmount,D.Acc_PT_NetAmount,I.Acc_PT_NetAmount,D.Acc_PT_TDSType,I.Acc_PT_TDSType,D.ACC_PT_TDSPercentage,I.ACC_PT_TDSPercentage,
D.ACC_PT_TDSAmount,I.ACC_PT_TDSAmount,D.ACC_PT_ReasonforDeduction ,I.ACC_PT_ReasonforDeduction ,D.Acc_PT_PaymentAmount ,I.Acc_PT_PaymentAmount ,
D.Acc_PT_ChequeNo ,I.Acc_PT_ChequeNo ,D.Acc_PT_ChequeDate ,I.Acc_PT_ChequeDate ,D.Acc_PT_ChequeAmount,I.Acc_PT_ChequeAmount,D.Acc_PT_BankName ,
I.Acc_PT_BankName ,D.Acc_PT_BranchNane,I.Acc_PT_BranchNane,I.Acc_PT_YearID,I.Acc_PT_CompID ,I.Acc_PT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PT_ID=I.Acc_PT_ID
			End	
	IF(Select Acc_PT_Status from Inserted)='D'
				BEGIN       
				INSERT INTO acc_Payment_Transaction_Log
					
(Log_Operation  ,Log_UserID  ,Acc_PT_ID  ,Acc_PT_MasterBillID  ,nAcc_PT_MasterBillID  ,Acc_PT_BillAmount  ,nAcc_PT_BillAmount  ,Acc_PT_AdvanceAmount  ,
nAcc_PT_AdvanceAmount  ,Acc_PT_NetAmount  ,nAcc_PT_NetAmount  ,Acc_PT_TDSType  ,nAcc_PT_TDSType  ,ACC_PT_TDSPercentage ,nACC_PT_TDSPercentage  ,
ACC_PT_TDSAmount  ,nACC_PT_TDSAmount  ,ACC_PT_ReasonforDeduction  ,nACC_PT_ReasonforDeduction  ,Acc_PT_PaymentAmount  ,nAcc_PT_PaymentAmount  ,
Acc_PT_ChequeNo  ,nAcc_PT_ChequeNo  ,Acc_PT_ChequeDate ,nAcc_PT_ChequeDate ,Acc_PT_ChequeAmount  ,nAcc_PT_ChequeAmount  ,Acc_PT_BankName  ,
nAcc_PT_BankName  ,Acc_PT_BranchNane  ,nAcc_PT_BranchNane  ,Acc_PT_YearID  ,Acc_PT_CompID  ,Acc_PT_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.Acc_PT_DeletedBy,I.Acc_PT_ID,D.Acc_PT_MasterBillID,I.Acc_PT_MasterBillID,D.Acc_PT_BillAmount,I.Acc_PT_BillAmount,D.Acc_PT_AdvanceAmount,
I.Acc_PT_AdvanceAmount,D.Acc_PT_NetAmount,I.Acc_PT_NetAmount,D.Acc_PT_TDSType,I.Acc_PT_TDSType,D.ACC_PT_TDSPercentage,I.ACC_PT_TDSPercentage,
D.ACC_PT_TDSAmount,I.ACC_PT_TDSAmount,D.ACC_PT_ReasonforDeduction ,I.ACC_PT_ReasonforDeduction ,D.Acc_PT_PaymentAmount ,I.Acc_PT_PaymentAmount ,
D.Acc_PT_ChequeNo ,I.Acc_PT_ChequeNo ,D.Acc_PT_ChequeDate ,I.Acc_PT_ChequeDate ,D.Acc_PT_ChequeAmount,I.Acc_PT_ChequeAmount,D.Acc_PT_BankName ,
I.Acc_PT_BankName ,D.Acc_PT_BranchNane,I.Acc_PT_BranchNane,I.Acc_PT_YearID,I.Acc_PT_CompID ,I.Acc_PT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PT_ID=I.Acc_PT_ID
			End

			IF(Select Acc_PT_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO acc_Payment_Transaction_Log
					
(Log_Operation  ,Log_UserID  ,Acc_PT_ID  ,Acc_PT_MasterBillID  ,nAcc_PT_MasterBillID  ,Acc_PT_BillAmount  ,nAcc_PT_BillAmount  ,Acc_PT_AdvanceAmount  ,
nAcc_PT_AdvanceAmount  ,Acc_PT_NetAmount  ,nAcc_PT_NetAmount  ,Acc_PT_TDSType  ,nAcc_PT_TDSType  ,ACC_PT_TDSPercentage ,nACC_PT_TDSPercentage  ,
ACC_PT_TDSAmount  ,nACC_PT_TDSAmount  ,ACC_PT_ReasonforDeduction  ,nACC_PT_ReasonforDeduction  ,Acc_PT_PaymentAmount  ,nAcc_PT_PaymentAmount  ,
Acc_PT_ChequeNo  ,nAcc_PT_ChequeNo  ,Acc_PT_ChequeDate ,nAcc_PT_ChequeDate ,Acc_PT_ChequeAmount  ,nAcc_PT_ChequeAmount  ,Acc_PT_BankName  ,
nAcc_PT_BankName  ,Acc_PT_BranchNane  ,nAcc_PT_BranchNane  ,Acc_PT_YearID  ,Acc_PT_CompID  ,Acc_PT_IPAddress)
					SELECT 'De-Activated',I.Acc_PT_DeletedBy,I.Acc_PT_ID,D.Acc_PT_MasterBillID,I.Acc_PT_MasterBillID,D.Acc_PT_BillAmount,I.Acc_PT_BillAmount,D.Acc_PT_AdvanceAmount,
I.Acc_PT_AdvanceAmount,D.Acc_PT_NetAmount,I.Acc_PT_NetAmount,D.Acc_PT_TDSType,I.Acc_PT_TDSType,D.ACC_PT_TDSPercentage,I.ACC_PT_TDSPercentage,
D.ACC_PT_TDSAmount,I.ACC_PT_TDSAmount,D.ACC_PT_ReasonforDeduction ,I.ACC_PT_ReasonforDeduction ,D.Acc_PT_PaymentAmount ,I.Acc_PT_PaymentAmount ,
D.Acc_PT_ChequeNo ,I.Acc_PT_ChequeNo ,D.Acc_PT_ChequeDate ,I.Acc_PT_ChequeDate ,D.Acc_PT_ChequeAmount,I.Acc_PT_ChequeAmount,D.Acc_PT_BankName ,
I.Acc_PT_BankName ,D.Acc_PT_BranchNane,I.Acc_PT_BranchNane,I.Acc_PT_YearID,I.Acc_PT_CompID ,I.Acc_PT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PT_ID=I.Acc_PT_ID
			End		
			IF(Select Acc_PT_Status from Inserted)='A'
				BEGIN       
				INSERT INTO acc_Payment_Transaction_Log
					(Log_Operation  ,Log_UserID  ,Acc_PT_ID  ,Acc_PT_MasterBillID  ,nAcc_PT_MasterBillID  ,Acc_PT_BillAmount  ,nAcc_PT_BillAmount  ,Acc_PT_AdvanceAmount  ,
nAcc_PT_AdvanceAmount  ,Acc_PT_NetAmount  ,nAcc_PT_NetAmount  ,Acc_PT_TDSType  ,nAcc_PT_TDSType  ,ACC_PT_TDSPercentage ,nACC_PT_TDSPercentage  ,
ACC_PT_TDSAmount  ,nACC_PT_TDSAmount  ,ACC_PT_ReasonforDeduction  ,nACC_PT_ReasonforDeduction  ,Acc_PT_PaymentAmount  ,nAcc_PT_PaymentAmount  ,
Acc_PT_ChequeNo  ,nAcc_PT_ChequeNo  ,Acc_PT_ChequeDate ,nAcc_PT_ChequeDate ,Acc_PT_ChequeAmount  ,nAcc_PT_ChequeAmount  ,Acc_PT_BankName  ,
nAcc_PT_BankName  ,Acc_PT_BranchNane  ,nAcc_PT_BranchNane  ,Acc_PT_YearID  ,Acc_PT_CompID  ,Acc_PT_IPAddress)

					SELECT 'Approved',I.Acc_PT_ApprovedBy,I.Acc_PT_ID,D.Acc_PT_MasterBillID,I.Acc_PT_MasterBillID,D.Acc_PT_BillAmount,I.Acc_PT_BillAmount,D.Acc_PT_AdvanceAmount,
I.Acc_PT_AdvanceAmount,D.Acc_PT_NetAmount,I.Acc_PT_NetAmount,D.Acc_PT_TDSType,I.Acc_PT_TDSType,D.ACC_PT_TDSPercentage,I.ACC_PT_TDSPercentage,
D.ACC_PT_TDSAmount,I.ACC_PT_TDSAmount,D.ACC_PT_ReasonforDeduction ,I.ACC_PT_ReasonforDeduction ,D.Acc_PT_PaymentAmount ,I.Acc_PT_PaymentAmount ,
D.Acc_PT_ChequeNo ,I.Acc_PT_ChequeNo ,D.Acc_PT_ChequeDate ,I.Acc_PT_ChequeDate ,D.Acc_PT_ChequeAmount,I.Acc_PT_ChequeAmount,D.Acc_PT_BankName ,
I.Acc_PT_BankName ,D.Acc_PT_BranchNane,I.Acc_PT_BranchNane,I.Acc_PT_YearID,I.Acc_PT_CompID ,I.Acc_PT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PT_ID=I.Acc_PT_ID
			End
								
						
		END
	ELSE
		BEGIN  
			INSERT INTO acc_Payment_Transaction_Log
(Log_Operation  ,Log_UserID  ,Acc_PT_ID  ,nAcc_PT_MasterBillID  ,nAcc_PT_BillAmount  ,
nAcc_PT_AdvanceAmount  ,nAcc_PT_NetAmount  ,nAcc_PT_TDSType  ,nACC_PT_TDSPercentage  ,
nACC_PT_TDSAmount  ,nACC_PT_ReasonforDeduction  ,nAcc_PT_PaymentAmount  ,
nAcc_PT_ChequeNo  ,nAcc_PT_ChequeDate ,nAcc_PT_ChequeAmount  ,
nAcc_PT_BankName  ,nAcc_PT_BranchNane  ,Acc_PT_YearID  ,Acc_PT_CompID  ,Acc_PT_IPAddress)
SELECT 'Created',Acc_PT_CreatedBy,Acc_PT_ID,Acc_PT_MasterBillID,Acc_PT_BillAmount,
Acc_PT_AdvanceAmount,Acc_PT_NetAmount,Acc_PT_TDSType,ACC_PT_TDSPercentage,
ACC_PT_TDSAmount,ACC_PT_ReasonforDeduction ,Acc_PT_PaymentAmount ,
Acc_PT_ChequeNo ,Acc_PT_ChequeDate ,Acc_PT_ChequeAmount,
Acc_PT_BankName ,Acc_PT_BranchNane,Acc_PT_YearID,Acc_PT_CompID ,Acc_PT_IPAddress	 
			 FROM Inserted
		END
	END
	
/

	create trigger Acc_PettyCash_BillDetails_Log_Trigger On  Acc_PettyCash_BillDetails For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_PCB_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_PettyCash_BillDetails_Log
(Log_Operation,Log_UserID,Acc_PCB_ID,Acc_PCB_BillType,nAcc_PCB_BillType,Acc_PCB_BillNo,nAcc_PCB_BillNo,Acc_PCB_BillDate,nAcc_PCB_BillDate,
Acc_PCB_BillAmount,nAcc_PCB_BillAmount,Acc_PCB_Narration,nAcc_PCB_Narration,Acc_PCB_YearID,Acc_PCB_CompID,Acc_PCB_Status,Acc_PCB_IPAddress,Acc_PCB_Delflag)
SELECT 'Updated',I.Acc_PCB_UpdatedBy,I.Acc_PCB_ID,D.Acc_PCB_BillType,I.Acc_PCB_BillType,D.Acc_PCB_BillNo,I.Acc_PCB_BillNo,D.Acc_PCB_BillDate,
I.Acc_PCB_BillDate,D.Acc_PCB_BillAmount,I.Acc_PCB_BillAmount,D.Acc_PCB_Narration,I.Acc_PCB_Narration,I.Acc_PCB_YearID,I.Acc_PCB_CompId,
I.Acc_PCB_Status,I.Acc_PCB_IPAddress,I.Acc_PCB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PCB_ID=I.Acc_PCB_ID  
			End	
			
IF(Select Acc_PCB_Status from Inserted)='A'
			BEGIN       
			INSERT INTO Acc_PettyCash_BillDetails_Log
(Log_Operation,Log_UserID,Acc_PCB_ID,Acc_PCB_BillType,nAcc_PCB_BillType,Acc_PCB_BillNo,nAcc_PCB_BillNo,Acc_PCB_BillDate,nAcc_PCB_BillDate,
Acc_PCB_BillAmount,nAcc_PCB_BillAmount,Acc_PCB_Narration,nAcc_PCB_Narration,Acc_PCB_YearID,Acc_PCB_CompID,Acc_PCB_Status,Acc_PCB_IPAddress,Acc_PCB_Delflag)
SELECT 'Approved',I.Acc_PCB_ApprovedBy,I.Acc_PCB_ID,D.Acc_PCB_BillType,I.Acc_PCB_BillType,D.Acc_PCB_BillNo,I.Acc_PCB_BillNo,D.Acc_PCB_BillDate,
I.Acc_PCB_BillDate,D.Acc_PCB_BillAmount,I.Acc_PCB_BillAmount,D.Acc_PCB_Narration,I.Acc_PCB_Narration,I.Acc_PCB_YearID,I.Acc_PCB_CompId,
I.Acc_PCB_Status,I.Acc_PCB_IPAddress,I.Acc_PCB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PCB_ID=I.Acc_PCB_ID     
		End	
			
		IF(Select Acc_PCB_Status from Inserted)='D'
			BEGIN       
			INSERT INTO Acc_PettyCash_BillDetails_Log
(Log_Operation,Log_UserID,Acc_PCB_ID,Acc_PCB_BillType,nAcc_PCB_BillType,Acc_PCB_BillNo,nAcc_PCB_BillNo,Acc_PCB_BillDate,nAcc_PCB_BillDate,
Acc_PCB_BillAmount,nAcc_PCB_BillAmount,Acc_PCB_Narration,nAcc_PCB_Narration,Acc_PCB_YearID,Acc_PCB_CompID,Acc_PCB_Status,Acc_PCB_IPAddress,Acc_PCB_Delflag)
SELECT 'De-Activated(Not Approved)',I.Acc_PCB_DeletedBy,I.Acc_PCB_ID,D.Acc_PCB_BillType,I.Acc_PCB_BillType,D.Acc_PCB_BillNo,I.Acc_PCB_BillNo,D.Acc_PCB_BillDate,
I.Acc_PCB_BillDate,D.Acc_PCB_BillAmount,I.Acc_PCB_BillAmount,D.Acc_PCB_Narration,I.Acc_PCB_Narration,I.Acc_PCB_YearID,I.Acc_PCB_CompId,
I.Acc_PCB_Status,I.Acc_PCB_IPAddress,I.Acc_PCB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PCB_ID=I.Acc_PCB_ID     
		End	
					
				IF(Select Acc_PCB_Status from Inserted)='AD'
			BEGIN       
			INSERT INTO Acc_PettyCash_BillDetails_Log
(Log_Operation,Log_UserID,Acc_PCB_ID,Acc_PCB_BillType,nAcc_PCB_BillType,Acc_PCB_BillNo,nAcc_PCB_BillNo,Acc_PCB_BillDate,nAcc_PCB_BillDate,
Acc_PCB_BillAmount,nAcc_PCB_BillAmount,Acc_PCB_Narration,nAcc_PCB_Narration,Acc_PCB_YearID,Acc_PCB_CompID,Acc_PCB_Status,Acc_PCB_IPAddress,Acc_PCB_Delflag)
SELECT 'De-Activated',I.Acc_PCB_DeletedBy,I.Acc_PCB_ID,D.Acc_PCB_BillType,I.Acc_PCB_BillType,D.Acc_PCB_BillNo,I.Acc_PCB_BillNo,D.Acc_PCB_BillDate,
I.Acc_PCB_BillDate,D.Acc_PCB_BillAmount,I.Acc_PCB_BillAmount,D.Acc_PCB_Narration,I.Acc_PCB_Narration,I.Acc_PCB_YearID,I.Acc_PCB_CompId,
I.Acc_PCB_Status,I.Acc_PCB_IPAddress,I.Acc_PCB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PCB_ID=I.Acc_PCB_ID        
		End	
									
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_PettyCash_BillDetails_Log
(Log_Operation,Log_UserID,Acc_PCB_ID,nAcc_PCB_BillType,nAcc_PCB_BillNo,nAcc_PCB_BillDate,nAcc_PCB_BillAmount,nAcc_PCB_Narration,Acc_PCB_YearID,Acc_PCB_CompID,Acc_PCB_Status,Acc_PCB_IPAddress,Acc_PCB_Delflag)
SELECT 'Created',Acc_PCB_CreatedBy,Acc_PCB_ID,Acc_PCB_BillType,Acc_PCB_BillNo,Acc_PCB_BillDate,Acc_PCB_BillAmount,Acc_PCB_Narration,Acc_PCB_YearID,Acc_PCB_CompId,
Acc_PCB_Status,Acc_PCB_IPAddress,Acc_PCB_Delflag
			 FROM Inserted
		END
	END  

/

create trigger Acc_PettyCash_Transaction_Log_Trigger On Acc_PettyCash_Transaction For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_PCT_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_PettyCash_Transaction_Log

(Log_Operation,Log_UserID  ,Acc_PCT_ID  ,Acc_PCT_MasterBillID  ,nAcc_PCT_MasterBillID  ,Acc_PCT_BillAmount  ,nAcc_PCT_BillAmount,Acc_PCT_AdvanceAmount  ,
nAcc_PCT_AdvanceAmount  ,Acc_PCT_NetAmount  ,nAcc_PCT_NetAmount  ,Acc_PCT_TDSType  ,nAcc_PCT_TDSType  ,ACC_PCT_TDSPercentage  ,
nACC_PCT_TDSPercentage  ,ACC_PCT_TDSAmount  ,nACC_PCT_TDSAmount  ,ACC_PCT_ReasonforDeduction  ,nACC_PCT_ReasonforDeduction  ,Acc_PCT_PaymentAmount  ,
nAcc_PCT_PaymentAmount  ,Acc_PCT_ChequeNo  ,nAcc_PCT_ChequeNo  ,Acc_PCT_ChequeDate  ,nAcc_PCT_ChequeDate  ,Acc_PCT_ChequeAmount  ,nAcc_PCT_ChequeAmount  ,
Acc_PCT_BankName ,nAcc_PCT_BankName ,Acc_PCT_BranchName ,nAcc_PCT_BranchName ,Acc_PCT_YearID  ,Acc_PCT_CompID  ,Acc_PCT_IPAddress)

SELECT 'Updated',I.Acc_PCT_UpdatedBy,I.Acc_PCT_ID,D.Acc_PCT_MasterBillID ,I.Acc_PCT_MasterBillID ,D.Acc_PCT_BillAmount ,I.Acc_PCT_BillAmount ,D.Acc_PCT_AdvanceAmount ,
I.Acc_PCT_AdvanceAmount ,D.Acc_PCT_NetAmount,I.Acc_PCT_NetAmount,D.Acc_PCT_TDSType,I.Acc_PCT_TDSType,D.ACC_PCT_TDSPercentage,I.ACC_PCT_TDSPercentage,
D.ACC_PCT_TDSAmount,I.ACC_PCT_TDSAmount,D.ACC_PCT_ReasonforDeduction,I.ACC_PCT_ReasonforDeduction,D.Acc_PCT_PaymentAmount,I.Acc_PCT_PaymentAmount,
D.Acc_PCT_ChequeNo,I.Acc_PCT_ChequeNo,D.Acc_PCT_ChequeDate ,I.Acc_PCT_ChequeDate ,D.Acc_PCT_ChequeAmount,I.Acc_PCT_ChequeAmount,D.Acc_PCT_BankName,I.Acc_PCT_BankName,
D.Acc_PCT_BranchName,I.Acc_PCT_BranchName,I.Acc_PCT_YearID,I.Acc_PCT_CompID,I.Acc_PCT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PCT_ID=I.Acc_PCT_ID
			End	
	IF(Select Acc_PCT_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_PettyCash_Transaction_Log
					
(Log_Operation,Log_UserID  ,Acc_PCT_ID  ,Acc_PCT_MasterBillID  ,nAcc_PCT_MasterBillID  ,Acc_PCT_BillAmount  ,nAcc_PCT_BillAmount,Acc_PCT_AdvanceAmount  ,
nAcc_PCT_AdvanceAmount  ,Acc_PCT_NetAmount  ,nAcc_PCT_NetAmount  ,Acc_PCT_TDSType  ,nAcc_PCT_TDSType  ,ACC_PCT_TDSPercentage  ,
nACC_PCT_TDSPercentage  ,ACC_PCT_TDSAmount  ,nACC_PCT_TDSAmount  ,ACC_PCT_ReasonforDeduction  ,nACC_PCT_ReasonforDeduction  ,Acc_PCT_PaymentAmount  ,
nAcc_PCT_PaymentAmount  ,Acc_PCT_ChequeNo  ,nAcc_PCT_ChequeNo  ,Acc_PCT_ChequeDate  ,nAcc_PCT_ChequeDate  ,Acc_PCT_ChequeAmount  ,nAcc_PCT_ChequeAmount  ,
Acc_PCT_BankName ,nAcc_PCT_BankName ,Acc_PCT_BranchName ,nAcc_PCT_BranchName ,Acc_PCT_YearID  ,Acc_PCT_CompID  ,Acc_PCT_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.Acc_PCT_DeletedBy,I.Acc_PCT_ID,D.Acc_PCT_MasterBillID ,I.Acc_PCT_MasterBillID ,D.Acc_PCT_BillAmount ,I.Acc_PCT_BillAmount ,D.Acc_PCT_AdvanceAmount ,
I.Acc_PCT_AdvanceAmount ,D.Acc_PCT_NetAmount,I.Acc_PCT_NetAmount,D.Acc_PCT_TDSType,I.Acc_PCT_TDSType,D.ACC_PCT_TDSPercentage,I.ACC_PCT_TDSPercentage,
D.ACC_PCT_TDSAmount,I.ACC_PCT_TDSAmount,D.ACC_PCT_ReasonforDeduction,I.ACC_PCT_ReasonforDeduction,D.Acc_PCT_PaymentAmount,I.Acc_PCT_PaymentAmount,
D.Acc_PCT_ChequeNo,I.Acc_PCT_ChequeNo,D.Acc_PCT_ChequeDate ,I.Acc_PCT_ChequeDate ,D.Acc_PCT_ChequeAmount,I.Acc_PCT_ChequeAmount,D.Acc_PCT_BankName,I.Acc_PCT_BankName,
D.Acc_PCT_BranchName,I.Acc_PCT_BranchName,I.Acc_PCT_YearID,I.Acc_PCT_CompID,I.Acc_PCT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PCT_ID=I.Acc_PCT_ID
			End

			IF(Select Acc_PCT_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_PettyCash_Transaction_Log
					
(Log_Operation,Log_UserID  ,Acc_PCT_ID  ,Acc_PCT_MasterBillID  ,nAcc_PCT_MasterBillID  ,Acc_PCT_BillAmount  ,nAcc_PCT_BillAmount,Acc_PCT_AdvanceAmount  ,
nAcc_PCT_AdvanceAmount  ,Acc_PCT_NetAmount  ,nAcc_PCT_NetAmount  ,Acc_PCT_TDSType  ,nAcc_PCT_TDSType  ,ACC_PCT_TDSPercentage  ,
nACC_PCT_TDSPercentage  ,ACC_PCT_TDSAmount  ,nACC_PCT_TDSAmount  ,ACC_PCT_ReasonforDeduction  ,nACC_PCT_ReasonforDeduction  ,Acc_PCT_PaymentAmount  ,
nAcc_PCT_PaymentAmount  ,Acc_PCT_ChequeNo  ,nAcc_PCT_ChequeNo  ,Acc_PCT_ChequeDate  ,nAcc_PCT_ChequeDate  ,Acc_PCT_ChequeAmount  ,nAcc_PCT_ChequeAmount  ,
Acc_PCT_BankName ,nAcc_PCT_BankName ,Acc_PCT_BranchName ,nAcc_PCT_BranchName ,Acc_PCT_YearID  ,Acc_PCT_CompID  ,Acc_PCT_IPAddress)
					SELECT 'De-Activated',I.Acc_PCT_DeletedBy,I.Acc_PCT_ID,D.Acc_PCT_MasterBillID ,I.Acc_PCT_MasterBillID ,D.Acc_PCT_BillAmount ,I.Acc_PCT_BillAmount ,D.Acc_PCT_AdvanceAmount ,
I.Acc_PCT_AdvanceAmount ,D.Acc_PCT_NetAmount,I.Acc_PCT_NetAmount,D.Acc_PCT_TDSType,I.Acc_PCT_TDSType,D.ACC_PCT_TDSPercentage,I.ACC_PCT_TDSPercentage,
D.ACC_PCT_TDSAmount,I.ACC_PCT_TDSAmount,D.ACC_PCT_ReasonforDeduction,I.ACC_PCT_ReasonforDeduction,D.Acc_PCT_PaymentAmount,I.Acc_PCT_PaymentAmount,
D.Acc_PCT_ChequeNo,I.Acc_PCT_ChequeNo,D.Acc_PCT_ChequeDate ,I.Acc_PCT_ChequeDate ,D.Acc_PCT_ChequeAmount,I.Acc_PCT_ChequeAmount,D.Acc_PCT_BankName,I.Acc_PCT_BankName,
D.Acc_PCT_BranchName,I.Acc_PCT_BranchName,I.Acc_PCT_YearID,I.Acc_PCT_CompID,I.Acc_PCT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PCT_ID=I.Acc_PCT_ID
			End		
			IF(Select Acc_PCT_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_PettyCash_Transaction_Log
					(Log_Operation,Log_UserID  ,Acc_PCT_ID  ,Acc_PCT_MasterBillID  ,nAcc_PCT_MasterBillID  ,Acc_PCT_BillAmount  ,nAcc_PCT_BillAmount,Acc_PCT_AdvanceAmount  ,
nAcc_PCT_AdvanceAmount  ,Acc_PCT_NetAmount  ,nAcc_PCT_NetAmount  ,Acc_PCT_TDSType  ,nAcc_PCT_TDSType  ,ACC_PCT_TDSPercentage  ,
nACC_PCT_TDSPercentage  ,ACC_PCT_TDSAmount  ,nACC_PCT_TDSAmount  ,ACC_PCT_ReasonforDeduction  ,nACC_PCT_ReasonforDeduction  ,Acc_PCT_PaymentAmount  ,
nAcc_PCT_PaymentAmount  ,Acc_PCT_ChequeNo  ,nAcc_PCT_ChequeNo  ,Acc_PCT_ChequeDate  ,nAcc_PCT_ChequeDate  ,Acc_PCT_ChequeAmount  ,nAcc_PCT_ChequeAmount  ,
Acc_PCT_BankName ,nAcc_PCT_BankName ,Acc_PCT_BranchName ,nAcc_PCT_BranchName ,Acc_PCT_YearID  ,Acc_PCT_CompID  ,Acc_PCT_IPAddress)

					SELECT 'Approved',I.Acc_PCT_ApprovedBy,I.Acc_PCT_ID,D.Acc_PCT_MasterBillID ,I.Acc_PCT_MasterBillID ,D.Acc_PCT_BillAmount ,I.Acc_PCT_BillAmount ,D.Acc_PCT_AdvanceAmount ,
I.Acc_PCT_AdvanceAmount ,D.Acc_PCT_NetAmount,I.Acc_PCT_NetAmount,D.Acc_PCT_TDSType,I.Acc_PCT_TDSType,D.ACC_PCT_TDSPercentage,I.ACC_PCT_TDSPercentage,
D.ACC_PCT_TDSAmount,I.ACC_PCT_TDSAmount,D.ACC_PCT_ReasonforDeduction,I.ACC_PCT_ReasonforDeduction,D.Acc_PCT_PaymentAmount,I.Acc_PCT_PaymentAmount,
D.Acc_PCT_ChequeNo,I.Acc_PCT_ChequeNo,D.Acc_PCT_ChequeDate ,I.Acc_PCT_ChequeDate ,D.Acc_PCT_ChequeAmount,I.Acc_PCT_ChequeAmount,D.Acc_PCT_BankName,I.Acc_PCT_BankName,
D.Acc_PCT_BranchName,I.Acc_PCT_BranchName,I.Acc_PCT_YearID,I.Acc_PCT_CompID,I.Acc_PCT_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.Acc_PCT_ID=I.Acc_PCT_ID
			End
								
						
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_PettyCash_Transaction_Log
(Log_Operation,Log_UserID  ,Acc_PCT_ID  ,nAcc_PCT_MasterBillID  ,nAcc_PCT_BillAmount,
nAcc_PCT_AdvanceAmount  ,nAcc_PCT_NetAmount  ,nAcc_PCT_TDSType  ,
nACC_PCT_TDSPercentage  ,nACC_PCT_TDSAmount  ,nACC_PCT_ReasonforDeduction  ,
nAcc_PCT_PaymentAmount  ,nAcc_PCT_ChequeNo  ,nAcc_PCT_ChequeDate  ,nAcc_PCT_ChequeAmount  ,
nAcc_PCT_BankName ,nAcc_PCT_BranchName ,Acc_PCT_YearID  ,Acc_PCT_CompID  ,Acc_PCT_IPAddress)
SELECT 'Created',Acc_PCT_CreatedBy,Acc_PCT_ID,Acc_PCT_MasterBillID ,Acc_PCT_BillAmount ,
Acc_PCT_AdvanceAmount ,Acc_PCT_NetAmount,Acc_PCT_TDSType,ACC_PCT_TDSPercentage,
ACC_PCT_TDSAmount,ACC_PCT_ReasonforDeduction,Acc_PCT_PaymentAmount,
Acc_PCT_ChequeNo,Acc_PCT_ChequeDate ,Acc_PCT_ChequeAmount,Acc_PCT_BankName,
Acc_PCT_BranchName,Acc_PCT_YearID,Acc_PCT_CompID,Acc_PCT_IPAddress
			 FROM Inserted
		END
	END

/

create trigger Acc_Purchase_JE_Master_Log_Trigger On Acc_Purchase_JE_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_PJE_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,Acc_PJE_TransactionNo,nAcc_PJE_TransactionNo,Acc_PJE_Party,nAcc_PJE_Party,Acc_PJE_Location,nAcc_PJE_Location,
Acc_PJE_BillType,nAcc_PJE_BillType,Acc_PJE_BillNo,nAcc_PJE_BillNo,Acc_PJE_BillDate,nAcc_PJE_BillDate,Acc_PJE_BillAmount,nAcc_PJE_BillAmount,
Acc_PJE_AdvanceAmount,nAcc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,nAcc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,nAcc_PJE_BalanceAmount,
Acc_PJE_NetAmount,nAcc_PJE_NetAmount,Acc_PJE_PaymentNarration,nAcc_PJE_PaymentNarration,Acc_PJE_ChequeNo,nAcc_PJE_ChequeNo,Acc_PJE_ChequeDate,
nAcc_PJE_ChequeDate,Acc_PJE_IFSCCode,nAcc_PJE_IFSCCode,Acc_PJE_BankName,nAcc_PJE_BankName,Acc_PJE_BranchName,nAcc_PJE_BranchName,Acc_PJE_YearID,
Acc_PJE_CompID,Acc_PJE_Status,nAcc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)
SELECT 'Updated',I.Acc_PJE_UpdateddBy,I.Acc_PJE_ID,D.Acc_PJE_TransactionNo,I.Acc_PJE_TransactionNo,D.Acc_PJE_Party,I.Acc_PJE_Party,
D.Acc_PJE_Location,I.Acc_PJE_Location,D.Acc_PJE_BillType,I.Acc_PJE_BillType,D.Acc_PJE_BillNo,I.Acc_PJE_BillNo,D.Acc_PJE_BillDate,I.Acc_PJE_BillDate,
D.Acc_PJE_BillAmount,I.Acc_PJE_BillAmount,D.Acc_PJE_AdvanceAmount,I.Acc_PJE_AdvanceAmount,D.Acc_PJE_AdvanceNaration,I.Acc_PJE_AdvanceNaration,
D.Acc_PJE_BalanceAmount,I.Acc_PJE_BalanceAmount,D.Acc_PJE_NetAmount,I.Acc_PJE_NetAmount,D.Acc_PJE_PaymentNarration,I.Acc_PJE_PaymentNarration,
D.Acc_PJE_ChequeNo,I.Acc_PJE_ChequeNo,D.Acc_PJE_ChequeDate,I.Acc_PJE_ChequeDate,D.Acc_PJE_IFSCCode,I.Acc_PJE_IFSCCode,D.Acc_PJE_BankName,
I.Acc_PJE_BankName,D.Acc_PJE_BranchName,I.Acc_PJE_BranchName,I.Acc_PJE_YearID,I.Acc_PJE_CompID,D.Acc_PJE_Status,I.Acc_PJE_Status,I.Acc_PJE_IPAddress,
D.Acc_PJE_BillCreatedDate,I.Acc_PJE_BillCreatedDate,I.Acc_PJE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PJE_ID=I.Acc_PJE_ID  
			End

			IF(Select Acc_PJE_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,Acc_PJE_TransactionNo,nAcc_PJE_TransactionNo,Acc_PJE_Party,nAcc_PJE_Party,Acc_PJE_Location,nAcc_PJE_Location,
Acc_PJE_BillType,nAcc_PJE_BillType,Acc_PJE_BillNo,nAcc_PJE_BillNo,Acc_PJE_BillDate,nAcc_PJE_BillDate,Acc_PJE_BillAmount,nAcc_PJE_BillAmount,
Acc_PJE_AdvanceAmount,nAcc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,nAcc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,nAcc_PJE_BalanceAmount,
Acc_PJE_NetAmount,nAcc_PJE_NetAmount,Acc_PJE_PaymentNarration,nAcc_PJE_PaymentNarration,Acc_PJE_ChequeNo,nAcc_PJE_ChequeNo,Acc_PJE_ChequeDate,
nAcc_PJE_ChequeDate,Acc_PJE_IFSCCode,nAcc_PJE_IFSCCode,Acc_PJE_BankName,nAcc_PJE_BankName,Acc_PJE_BranchName,nAcc_PJE_BranchName,Acc_PJE_YearID,
Acc_PJE_CompID,Acc_PJE_Status,nAcc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)
					SELECT 'Approved',I.Acc_PJE_ApprovedBy,I.Acc_PJE_ID,D.Acc_PJE_TransactionNo,I.Acc_PJE_TransactionNo,D.Acc_PJE_Party,I.Acc_PJE_Party,
D.Acc_PJE_Location,I.Acc_PJE_Location,D.Acc_PJE_BillType,I.Acc_PJE_BillType,D.Acc_PJE_BillNo,I.Acc_PJE_BillNo,D.Acc_PJE_BillDate,I.Acc_PJE_BillDate,
D.Acc_PJE_BillAmount,I.Acc_PJE_BillAmount,D.Acc_PJE_AdvanceAmount,I.Acc_PJE_AdvanceAmount,D.Acc_PJE_AdvanceNaration,I.Acc_PJE_AdvanceNaration,
D.Acc_PJE_BalanceAmount,I.Acc_PJE_BalanceAmount,D.Acc_PJE_NetAmount,I.Acc_PJE_NetAmount,D.Acc_PJE_PaymentNarration,I.Acc_PJE_PaymentNarration,
D.Acc_PJE_ChequeNo,I.Acc_PJE_ChequeNo,D.Acc_PJE_ChequeDate,I.Acc_PJE_ChequeDate,D.Acc_PJE_IFSCCode,I.Acc_PJE_IFSCCode,D.Acc_PJE_BankName,
I.Acc_PJE_BankName,D.Acc_PJE_BranchName,I.Acc_PJE_BranchName,I.Acc_PJE_YearID,I.Acc_PJE_CompID,D.Acc_PJE_Status,I.Acc_PJE_Status,I.Acc_PJE_IPAddress,
D.Acc_PJE_BillCreatedDate,I.Acc_PJE_BillCreatedDate,I.Acc_PJE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PJE_ID=I.Acc_PJE_ID  
			End

			IF(Select Acc_PJE_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,Acc_PJE_TransactionNo,nAcc_PJE_TransactionNo,Acc_PJE_Party,nAcc_PJE_Party,Acc_PJE_Location,nAcc_PJE_Location,
Acc_PJE_BillType,nAcc_PJE_BillType,Acc_PJE_BillNo,nAcc_PJE_BillNo,Acc_PJE_BillDate,nAcc_PJE_BillDate,Acc_PJE_BillAmount,nAcc_PJE_BillAmount,
Acc_PJE_AdvanceAmount,nAcc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,nAcc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,nAcc_PJE_BalanceAmount,
Acc_PJE_NetAmount,nAcc_PJE_NetAmount,Acc_PJE_PaymentNarration,nAcc_PJE_PaymentNarration,Acc_PJE_ChequeNo,nAcc_PJE_ChequeNo,Acc_PJE_ChequeDate,
nAcc_PJE_ChequeDate,Acc_PJE_IFSCCode,nAcc_PJE_IFSCCode,Acc_PJE_BankName,nAcc_PJE_BankName,Acc_PJE_BranchName,nAcc_PJE_BranchName,Acc_PJE_YearID,
Acc_PJE_CompID,Acc_PJE_Status,nAcc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)
					SELECT 'De-Activated(Not Approved)',I.Acc_PJE_DeletedBy,I.Acc_PJE_ID,D.Acc_PJE_TransactionNo,I.Acc_PJE_TransactionNo,D.Acc_PJE_Party,I.Acc_PJE_Party,
D.Acc_PJE_Location,I.Acc_PJE_Location,D.Acc_PJE_BillType,I.Acc_PJE_BillType,D.Acc_PJE_BillNo,I.Acc_PJE_BillNo,D.Acc_PJE_BillDate,I.Acc_PJE_BillDate,
D.Acc_PJE_BillAmount,I.Acc_PJE_BillAmount,D.Acc_PJE_AdvanceAmount,I.Acc_PJE_AdvanceAmount,D.Acc_PJE_AdvanceNaration,I.Acc_PJE_AdvanceNaration,
D.Acc_PJE_BalanceAmount,I.Acc_PJE_BalanceAmount,D.Acc_PJE_NetAmount,I.Acc_PJE_NetAmount,D.Acc_PJE_PaymentNarration,I.Acc_PJE_PaymentNarration,
D.Acc_PJE_ChequeNo,I.Acc_PJE_ChequeNo,D.Acc_PJE_ChequeDate,I.Acc_PJE_ChequeDate,D.Acc_PJE_IFSCCode,I.Acc_PJE_IFSCCode,D.Acc_PJE_BankName,
I.Acc_PJE_BankName,D.Acc_PJE_BranchName,I.Acc_PJE_BranchName,I.Acc_PJE_YearID,I.Acc_PJE_CompID,D.Acc_PJE_Status,I.Acc_PJE_Status,I.Acc_PJE_IPAddress,
D.Acc_PJE_BillCreatedDate,I.Acc_PJE_BillCreatedDate,I.Acc_PJE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PJE_ID=I.Acc_PJE_ID  
			End

			IF(Select Acc_PJE_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,Acc_PJE_TransactionNo,nAcc_PJE_TransactionNo,Acc_PJE_Party,nAcc_PJE_Party,Acc_PJE_Location,nAcc_PJE_Location,
Acc_PJE_BillType,nAcc_PJE_BillType,Acc_PJE_BillNo,nAcc_PJE_BillNo,Acc_PJE_BillDate,nAcc_PJE_BillDate,Acc_PJE_BillAmount,nAcc_PJE_BillAmount,
Acc_PJE_AdvanceAmount,nAcc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,nAcc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,nAcc_PJE_BalanceAmount,
Acc_PJE_NetAmount,nAcc_PJE_NetAmount,Acc_PJE_PaymentNarration,nAcc_PJE_PaymentNarration,Acc_PJE_ChequeNo,nAcc_PJE_ChequeNo,Acc_PJE_ChequeDate,
nAcc_PJE_ChequeDate,Acc_PJE_IFSCCode,nAcc_PJE_IFSCCode,Acc_PJE_BankName,nAcc_PJE_BankName,Acc_PJE_BranchName,nAcc_PJE_BranchName,Acc_PJE_YearID,
Acc_PJE_CompID,Acc_PJE_Status,nAcc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)
					SELECT 'De-Activated',I.Acc_PJE_Deletedby,I.Acc_PJE_ID,D.Acc_PJE_TransactionNo,I.Acc_PJE_TransactionNo,D.Acc_PJE_Party,I.Acc_PJE_Party,
D.Acc_PJE_Location,I.Acc_PJE_Location,D.Acc_PJE_BillType,I.Acc_PJE_BillType,D.Acc_PJE_BillNo,I.Acc_PJE_BillNo,D.Acc_PJE_BillDate,I.Acc_PJE_BillDate,
D.Acc_PJE_BillAmount,I.Acc_PJE_BillAmount,D.Acc_PJE_AdvanceAmount,I.Acc_PJE_AdvanceAmount,D.Acc_PJE_AdvanceNaration,I.Acc_PJE_AdvanceNaration,
D.Acc_PJE_BalanceAmount,I.Acc_PJE_BalanceAmount,D.Acc_PJE_NetAmount,I.Acc_PJE_NetAmount,D.Acc_PJE_PaymentNarration,I.Acc_PJE_PaymentNarration,
D.Acc_PJE_ChequeNo,I.Acc_PJE_ChequeNo,D.Acc_PJE_ChequeDate,I.Acc_PJE_ChequeDate,D.Acc_PJE_IFSCCode,I.Acc_PJE_IFSCCode,D.Acc_PJE_BankName,
I.Acc_PJE_BankName,D.Acc_PJE_BranchName,I.Acc_PJE_BranchName,I.Acc_PJE_YearID,I.Acc_PJE_CompID,D.Acc_PJE_Status,I.Acc_PJE_Status,I.Acc_PJE_IPAddress,
D.Acc_PJE_BillCreatedDate,I.Acc_PJE_BillCreatedDate,I.Acc_PJE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PJE_ID=I.Acc_PJE_ID  
			End

			IF(Select Acc_PJE_Status from Inserted)='R'
				BEGIN       
				INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,Acc_PJE_TransactionNo,nAcc_PJE_TransactionNo,Acc_PJE_Party,nAcc_PJE_Party,Acc_PJE_Location,nAcc_PJE_Location,
Acc_PJE_BillType,nAcc_PJE_BillType,Acc_PJE_BillNo,nAcc_PJE_BillNo,Acc_PJE_BillDate,nAcc_PJE_BillDate,Acc_PJE_BillAmount,nAcc_PJE_BillAmount,
Acc_PJE_AdvanceAmount,nAcc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,nAcc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,nAcc_PJE_BalanceAmount,
Acc_PJE_NetAmount,nAcc_PJE_NetAmount,Acc_PJE_PaymentNarration,nAcc_PJE_PaymentNarration,Acc_PJE_ChequeNo,nAcc_PJE_ChequeNo,Acc_PJE_ChequeDate,
nAcc_PJE_ChequeDate,Acc_PJE_IFSCCode,nAcc_PJE_IFSCCode,Acc_PJE_BankName,nAcc_PJE_BankName,Acc_PJE_BranchName,nAcc_PJE_BranchName,Acc_PJE_YearID,
Acc_PJE_CompID,Acc_PJE_Status,nAcc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)
					SELECT 'Activated(Not Approved)',I.Acc_PJE_RecalledBy,I.Acc_PJE_ID,D.Acc_PJE_TransactionNo,I.Acc_PJE_TransactionNo,D.Acc_PJE_Party,I.Acc_PJE_Party,
D.Acc_PJE_Location,I.Acc_PJE_Location,D.Acc_PJE_BillType,I.Acc_PJE_BillType,D.Acc_PJE_BillNo,I.Acc_PJE_BillNo,D.Acc_PJE_BillDate,I.Acc_PJE_BillDate,
D.Acc_PJE_BillAmount,I.Acc_PJE_BillAmount,D.Acc_PJE_AdvanceAmount,I.Acc_PJE_AdvanceAmount,D.Acc_PJE_AdvanceNaration,I.Acc_PJE_AdvanceNaration,
D.Acc_PJE_BalanceAmount,I.Acc_PJE_BalanceAmount,D.Acc_PJE_NetAmount,I.Acc_PJE_NetAmount,D.Acc_PJE_PaymentNarration,I.Acc_PJE_PaymentNarration,
D.Acc_PJE_ChequeNo,I.Acc_PJE_ChequeNo,D.Acc_PJE_ChequeDate,I.Acc_PJE_ChequeDate,D.Acc_PJE_IFSCCode,I.Acc_PJE_IFSCCode,D.Acc_PJE_BankName,
I.Acc_PJE_BankName,D.Acc_PJE_BranchName,I.Acc_PJE_BranchName,I.Acc_PJE_YearID,I.Acc_PJE_CompID,D.Acc_PJE_Status,I.Acc_PJE_Status,I.Acc_PJE_IPAddress,
D.Acc_PJE_BillCreatedDate,I.Acc_PJE_BillCreatedDate,I.Acc_PJE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PJE_ID=I.Acc_PJE_ID  
			End
			
			IF(Select Acc_PJE_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,Acc_PJE_TransactionNo,nAcc_PJE_TransactionNo,Acc_PJE_Party,nAcc_PJE_Party,Acc_PJE_Location,nAcc_PJE_Location,
Acc_PJE_BillType,nAcc_PJE_BillType,Acc_PJE_BillNo,nAcc_PJE_BillNo,Acc_PJE_BillDate,nAcc_PJE_BillDate,Acc_PJE_BillAmount,nAcc_PJE_BillAmount,
Acc_PJE_AdvanceAmount,nAcc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,nAcc_PJE_AdvanceNaration,Acc_PJE_BalanceAmount,nAcc_PJE_BalanceAmount,
Acc_PJE_NetAmount,nAcc_PJE_NetAmount,Acc_PJE_PaymentNarration,nAcc_PJE_PaymentNarration,Acc_PJE_ChequeNo,nAcc_PJE_ChequeNo,Acc_PJE_ChequeDate,
nAcc_PJE_ChequeDate,Acc_PJE_IFSCCode,nAcc_PJE_IFSCCode,Acc_PJE_BankName,nAcc_PJE_BankName,Acc_PJE_BranchName,nAcc_PJE_BranchName,Acc_PJE_YearID,
Acc_PJE_CompID,Acc_PJE_Status,nAcc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)
					SELECT 'Activated',I.Acc_PJE_RecalledBy,I.Acc_PJE_ID,D.Acc_PJE_TransactionNo,I.Acc_PJE_TransactionNo,D.Acc_PJE_Party,I.Acc_PJE_Party,
D.Acc_PJE_Location,I.Acc_PJE_Location,D.Acc_PJE_BillType,I.Acc_PJE_BillType,D.Acc_PJE_BillNo,I.Acc_PJE_BillNo,D.Acc_PJE_BillDate,I.Acc_PJE_BillDate,
D.Acc_PJE_BillAmount,I.Acc_PJE_BillAmount,D.Acc_PJE_AdvanceAmount,I.Acc_PJE_AdvanceAmount,D.Acc_PJE_AdvanceNaration,I.Acc_PJE_AdvanceNaration,
D.Acc_PJE_BalanceAmount,I.Acc_PJE_BalanceAmount,D.Acc_PJE_NetAmount,I.Acc_PJE_NetAmount,D.Acc_PJE_PaymentNarration,I.Acc_PJE_PaymentNarration,
D.Acc_PJE_ChequeNo,I.Acc_PJE_ChequeNo,D.Acc_PJE_ChequeDate,I.Acc_PJE_ChequeDate,D.Acc_PJE_IFSCCode,I.Acc_PJE_IFSCCode,D.Acc_PJE_BankName,
I.Acc_PJE_BankName,D.Acc_PJE_BranchName,I.Acc_PJE_BranchName,I.Acc_PJE_YearID,I.Acc_PJE_CompID,D.Acc_PJE_Status,I.Acc_PJE_Status,I.Acc_PJE_IPAddress,
D.Acc_PJE_BillCreatedDate,I.Acc_PJE_BillCreatedDate,I.Acc_PJE_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_PJE_ID=I.Acc_PJE_ID  
			End
			
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_Purchase_JE_Master_Log
(Log_Operation,Log_UserID,Acc_PJE_ID,nAcc_PJE_TransactionNo,nAcc_PJE_Party,nAcc_PJE_Location,nAcc_PJE_BillType,nAcc_PJE_BillNo,
nAcc_PJE_BillDate,nAcc_PJE_BillAmount,nAcc_PJE_AdvanceAmount,nAcc_PJE_AdvanceNaration,nAcc_PJE_BalanceAmount,nAcc_PJE_NetAmount,
nAcc_PJE_PaymentNarration,nAcc_PJE_ChequeNo,nAcc_PJE_ChequeDate,nAcc_PJE_IFSCCode,nAcc_PJE_BankName,nAcc_PJE_BranchName,
Acc_PJE_YearID,Acc_PJE_CompID,nAcc_PJE_Status,Acc_PJE_IPAddress,nAcc_PJE_BillCreatedDate,Acc_PJE_Delflag)

SELECT 'Created',Acc_PJE_CreatedBy,Acc_PJE_ID,Acc_PJE_TransactionNo,Acc_PJE_Party,Acc_PJE_Location,
Acc_PJE_BillType,Acc_PJE_BillNo,Acc_PJE_BillDate,Acc_PJE_BillAmount,Acc_PJE_AdvanceAmount,Acc_PJE_AdvanceNaration,
Acc_PJE_BalanceAmount,Acc_PJE_NetAmount,Acc_PJE_PaymentNarration,Acc_PJE_ChequeNo,Acc_PJE_ChequeDate,Acc_PJE_IFSCCode,
Acc_PJE_BankName,Acc_PJE_BranchName,Acc_PJE_YearID,Acc_PJE_CompID,Acc_PJE_Status,Acc_PJE_IPAddress,Acc_PJE_BillCreatedDate,Acc_PJE_Delflag 
			 FROM Inserted
		END
	END  

/

create trigger acc_Receipt_BillDetails_Log_Trigger On acc_Receipt_BillDetails For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_RB_Status from Inserted)='U'
				BEGIN       
				INSERT INTO acc_Receipt_BillDetails_Log
(Log_Operation,Log_UserID,Acc_RB_ID,Acc_RB_BillType,nAcc_RB_BillType,Acc_RB_BillNo,nAcc_RB_BillNo,Acc_RB_BillDate,nAcc_RB_BillDate,Acc_RB_BillAmount
,nAcc_RB_BillAmount,Acc_RB_Narration,nAcc_RB_Narration,Acc_RB_YearID,Acc_RB_CompID,Acc_RB_Status,Acc_RB_IPAddress,Acc_RB_Delflag)
SELECT 'Updated',I.Acc_RB_UpdatedBy,I.Acc_RB_ID,D.Acc_RB_BillType,I.Acc_RB_BillType,D.Acc_RB_BillNo,I.Acc_RB_BillNo,D.Acc_RB_BillDate,I.Acc_RB_BillDate,
D.Acc_RB_BillAmount,I.Acc_RB_BillAmount,D.Acc_RB_Narration,I.Acc_RB_Narration,I.Acc_RB_YearID,I.Acc_RB_CompID,I.Acc_RB_Status,
I.Acc_RB_IPAddress,I.Acc_RB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_RB_ID=I.Acc_RB_ID  
			End

			IF(Select Acc_RB_Status from Inserted)='A'
				BEGIN       
				INSERT INTO acc_Receipt_BillDetails_Log
(Log_Operation,Log_UserID,Acc_RB_ID,Acc_RB_BillType,nAcc_RB_BillType,Acc_RB_BillNo,nAcc_RB_BillNo,Acc_RB_BillDate,nAcc_RB_BillDate,Acc_RB_BillAmount
,nAcc_RB_BillAmount,Acc_RB_Narration,nAcc_RB_Narration,Acc_RB_YearID,Acc_RB_CompID,Acc_RB_Status,Acc_RB_IPAddress,Acc_RB_Delflag)
					SELECT 'Approved',I.Acc_RB_ApprovedBy,I.Acc_RB_ID,D.Acc_RB_BillType,I.Acc_RB_BillType,D.Acc_RB_BillNo,I.Acc_RB_BillNo,D.Acc_RB_BillDate,I.Acc_RB_BillDate,
D.Acc_RB_BillAmount,I.Acc_RB_BillAmount,D.Acc_RB_Narration,I.Acc_RB_Narration,I.Acc_RB_YearID,I.Acc_RB_CompID,I.Acc_RB_Status,
I.Acc_RB_IPAddress,I.Acc_RB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_RB_ID=I.Acc_RB_ID  
			End

			IF(Select Acc_RB_Status from Inserted)='D'
				BEGIN       
				INSERT INTO acc_Receipt_BillDetails_Log
(Log_Operation,Log_UserID,Acc_RB_ID,Acc_RB_BillType,nAcc_RB_BillType,Acc_RB_BillNo,nAcc_RB_BillNo,Acc_RB_BillDate,nAcc_RB_BillDate,Acc_RB_BillAmount
,nAcc_RB_BillAmount,Acc_RB_Narration,nAcc_RB_Narration,Acc_RB_YearID,Acc_RB_CompID,Acc_RB_Status,Acc_RB_IPAddress,Acc_RB_Delflag)
					SELECT 'De-Activated(Not Approved)',I.Acc_RB_DeletedBy,I.Acc_RB_ID,D.Acc_RB_BillType,I.Acc_RB_BillType,D.Acc_RB_BillNo,I.Acc_RB_BillNo,D.Acc_RB_BillDate,I.Acc_RB_BillDate,
D.Acc_RB_BillAmount,I.Acc_RB_BillAmount,D.Acc_RB_Narration,I.Acc_RB_Narration,I.Acc_RB_YearID,I.Acc_RB_CompID,I.Acc_RB_Status,
I.Acc_RB_IPAddress,I.Acc_RB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_RB_ID=I.Acc_RB_ID  
			End

			IF(Select Acc_RB_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO acc_Receipt_BillDetails_Log
(Log_Operation,Log_UserID,Acc_RB_ID,Acc_RB_BillType,nAcc_RB_BillType,Acc_RB_BillNo,nAcc_RB_BillNo,Acc_RB_BillDate,nAcc_RB_BillDate,Acc_RB_BillAmount
,nAcc_RB_BillAmount,Acc_RB_Narration,nAcc_RB_Narration,Acc_RB_YearID,Acc_RB_CompID,Acc_RB_Status,Acc_RB_IPAddress,Acc_RB_Delflag)
					SELECT 'De-Activated',I.Acc_RB_DeletedBy,I.Acc_RB_ID,D.Acc_RB_BillType,I.Acc_RB_BillType,D.Acc_RB_BillNo,I.Acc_RB_BillNo,D.Acc_RB_BillDate,I.Acc_RB_BillDate,
D.Acc_RB_BillAmount,I.Acc_RB_BillAmount,D.Acc_RB_Narration,I.Acc_RB_Narration,I.Acc_RB_YearID,I.Acc_RB_CompID,I.Acc_RB_Status,
I.Acc_RB_IPAddress,I.Acc_RB_Delflag FROM Inserted I Inner Join Deleted D ON D.Acc_RB_ID=I.Acc_RB_ID    
			End
							
		END
	ELSE
		BEGIN  
			INSERT INTO acc_Receipt_BillDetails_Log
(Log_Operation,Log_UserID,Acc_RB_ID,nAcc_RB_BillType,nAcc_RB_BillNo,nAcc_RB_BillDate,nAcc_RB_BillAmount,nAcc_RB_Narration,Acc_RB_YearID,Acc_RB_CompID,Acc_RB_Status,Acc_RB_IPAddress,Acc_RB_Delflag)
SELECT 'Created',Acc_RB_CreatedBy,Acc_RB_ID,Acc_RB_BillType,Acc_RB_BillNo,Acc_RB_BillDate,
Acc_RB_BillAmount,Acc_RB_Narration,Acc_RB_YearID,Acc_RB_CompID,Acc_RB_Status,Acc_RB_IPAddress,Acc_RB_Delflag 
			 FROM Inserted
		END
	END 


/

create trigger Acc_Receipt_Transaction_Log_Trigger On Acc_Receipt_Transaction For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_RT_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_Receipt_Transaction_Log
(Log_Operation,Log_UserID,Acc_RT_ID,Acc_RT_MasterBillID ,nAcc_RT_MasterBillID,Acc_RT_BillAmount,nAcc_RT_BillAmount,Acc_RT_AdvanceAmount,
nAcc_RT_AdvanceAmount,Acc_RT_NetAmount,nAcc_RT_NetAmount,Acc_RT_TDSType,nAcc_RT_TDSType,ACC_RT_TDSPercentage,nACC_RT_TDSPercentage,
ACC_RT_TDSAmount,nACC_RT_TDSAmount,ACC_RT_ReasonforDeduction,nACC_RT_ReasonforDeduction,Acc_RT_PaymentAmount,nAcc_RT_PaymentAmount,
Acc_RT_ChequeNo,nAcc_RT_ChequeNo,Acc_RT_ChequeDate,nAcc_RT_ChequeDate,Acc_RT_ChequeAmount,nAcc_RT_ChequeAmount,Acc_RT_BankName,
nAcc_RT_BankName ,Acc_RT_BranchNane,nAcc_RT_BranchNane,Acc_RT_YearID,Acc_RT_CompID,Acc_RT_IPAddress,Acc_RT_Delflag,Acc_RT_Status)

SELECT 'Updated',I.Acc_RT_UpdatedBy,I.Acc_RT_ID,D.Acc_RT_MasterBillID,I.Acc_RT_MasterBillID,D.Acc_RT_BillAmount,I.Acc_RT_BillAmount,
D.Acc_RT_AdvanceAmount,I.Acc_RT_AdvanceAmount,D.Acc_RT_NetAmount,I.Acc_RT_NetAmount,D.Acc_RT_TDSType,I.Acc_RT_TDSType,D.Acc_RT_TDSPercentage,
I.Acc_RT_TDSPercentage,D.Acc_RT_TDSAmount,I.Acc_RT_TDSAmount,D.Acc_RT_ReasonforDeduction,I.Acc_RT_ReasonforDeduction,D.Acc_RT_PaymentAmount,
I.Acc_RT_PaymentAmount,D.Acc_RT_ChequeNo,I.Acc_RT_ChequeNo,D.Acc_RT_ChequeDate,I.Acc_RT_ChequeDate,D.Acc_RT_ChequeAmount,I.Acc_RT_ChequeAmount,
D.Acc_RT_BankName,I.Acc_RT_BankName,D.Acc_RT_BranchNane,I.Acc_RT_BranchNane,I.Acc_RT_YearID,I.Acc_RT_CompID,I.Acc_RT_IPAddress,I.Acc_RT_Delflag,I.Acc_RT_Status
 FROM Inserted I Inner Join Deleted D ON D.Acc_RT_ID=I.Acc_RT_ID  
			End

			IF(Select Acc_RT_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_Receipt_Transaction_Log
(Log_Operation,Log_UserID,Acc_RT_ID,Acc_RT_MasterBillID ,nAcc_RT_MasterBillID,Acc_RT_BillAmount,nAcc_RT_BillAmount,Acc_RT_AdvanceAmount,
nAcc_RT_AdvanceAmount,Acc_RT_NetAmount,nAcc_RT_NetAmount,Acc_RT_TDSType,nAcc_RT_TDSType,ACC_RT_TDSPercentage,nACC_RT_TDSPercentage,
ACC_RT_TDSAmount,nACC_RT_TDSAmount,ACC_RT_ReasonforDeduction,nACC_RT_ReasonforDeduction,Acc_RT_PaymentAmount,nAcc_RT_PaymentAmount,
Acc_RT_ChequeNo,nAcc_RT_ChequeNo,Acc_RT_ChequeDate,nAcc_RT_ChequeDate,Acc_RT_ChequeAmount,nAcc_RT_ChequeAmount,Acc_RT_BankName,
nAcc_RT_BankName ,Acc_RT_BranchNane,nAcc_RT_BranchNane,Acc_RT_YearID,Acc_RT_CompID,Acc_RT_IPAddress,Acc_RT_Delflag,Acc_RT_Status)
					SELECT 'Approved',I.Acc_RT_ApprovedBy,I.Acc_RT_ID,D.Acc_RT_MasterBillID,I.Acc_RT_MasterBillID,D.Acc_RT_BillAmount,I.Acc_RT_BillAmount,
D.Acc_RT_AdvanceAmount,I.Acc_RT_AdvanceAmount,D.Acc_RT_NetAmount,I.Acc_RT_NetAmount,D.Acc_RT_TDSType,I.Acc_RT_TDSType,D.Acc_RT_TDSPercentage,
I.Acc_RT_TDSPercentage,D.Acc_RT_TDSAmount,I.Acc_RT_TDSAmount,D.Acc_RT_ReasonforDeduction,I.Acc_RT_ReasonforDeduction,D.Acc_RT_PaymentAmount,
I.Acc_RT_PaymentAmount,D.Acc_RT_ChequeNo,I.Acc_RT_ChequeNo,D.Acc_RT_ChequeDate,I.Acc_RT_ChequeDate,D.Acc_RT_ChequeAmount,I.Acc_RT_ChequeAmount,
D.Acc_RT_BankName,I.Acc_RT_BankName,D.Acc_RT_BranchNane,I.Acc_RT_BranchNane,I.Acc_RT_YearID,I.Acc_RT_CompID,I.Acc_RT_IPAddress,I.Acc_RT_Delflag,I.Acc_RT_Status
 FROM Inserted I Inner Join Deleted D ON D.Acc_RT_ID=I.Acc_RT_ID    
			End

			IF(Select Acc_RT_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_Receipt_Transaction_Log
(Log_Operation,Log_UserID,Acc_RT_ID,Acc_RT_MasterBillID ,nAcc_RT_MasterBillID,Acc_RT_BillAmount,nAcc_RT_BillAmount,Acc_RT_AdvanceAmount,
nAcc_RT_AdvanceAmount,Acc_RT_NetAmount,nAcc_RT_NetAmount,Acc_RT_TDSType,nAcc_RT_TDSType,ACC_RT_TDSPercentage,nACC_RT_TDSPercentage,
ACC_RT_TDSAmount,nACC_RT_TDSAmount,ACC_RT_ReasonforDeduction,nACC_RT_ReasonforDeduction,Acc_RT_PaymentAmount,nAcc_RT_PaymentAmount,
Acc_RT_ChequeNo,nAcc_RT_ChequeNo,Acc_RT_ChequeDate,nAcc_RT_ChequeDate,Acc_RT_ChequeAmount,nAcc_RT_ChequeAmount,Acc_RT_BankName,
nAcc_RT_BankName ,Acc_RT_BranchNane,nAcc_RT_BranchNane,Acc_RT_YearID,Acc_RT_CompID,Acc_RT_IPAddress,Acc_RT_Delflag,Acc_RT_Status)
					SELECT 'De-Activated(Not Approved)',I.Acc_RT_DeletedBy,I.Acc_RT_ID,D.Acc_RT_MasterBillID,I.Acc_RT_MasterBillID,D.Acc_RT_BillAmount,I.Acc_RT_BillAmount,
D.Acc_RT_AdvanceAmount,I.Acc_RT_AdvanceAmount,D.Acc_RT_NetAmount,I.Acc_RT_NetAmount,D.Acc_RT_TDSType,I.Acc_RT_TDSType,D.Acc_RT_TDSPercentage,
I.Acc_RT_TDSPercentage,D.Acc_RT_TDSAmount,I.Acc_RT_TDSAmount,D.Acc_RT_ReasonforDeduction,I.Acc_RT_ReasonforDeduction,D.Acc_RT_PaymentAmount,
I.Acc_RT_PaymentAmount,D.Acc_RT_ChequeNo,I.Acc_RT_ChequeNo,D.Acc_RT_ChequeDate,I.Acc_RT_ChequeDate,D.Acc_RT_ChequeAmount,I.Acc_RT_ChequeAmount,
D.Acc_RT_BankName,I.Acc_RT_BankName,D.Acc_RT_BranchNane,I.Acc_RT_BranchNane,I.Acc_RT_YearID,I.Acc_RT_CompID,I.Acc_RT_IPAddress,I.Acc_RT_Delflag,I.Acc_RT_Status
 FROM Inserted I Inner Join Deleted D ON D.Acc_RT_ID=I.Acc_RT_ID   
			End

			IF(Select Acc_RT_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_Receipt_Transaction_Log
(Log_Operation,Log_UserID,Acc_RT_ID,Acc_RT_MasterBillID ,nAcc_RT_MasterBillID,Acc_RT_BillAmount,nAcc_RT_BillAmount,Acc_RT_AdvanceAmount,
nAcc_RT_AdvanceAmount,Acc_RT_NetAmount,nAcc_RT_NetAmount,Acc_RT_TDSType,nAcc_RT_TDSType,ACC_RT_TDSPercentage,nACC_RT_TDSPercentage,
ACC_RT_TDSAmount,nACC_RT_TDSAmount,ACC_RT_ReasonforDeduction,nACC_RT_ReasonforDeduction,Acc_RT_PaymentAmount,nAcc_RT_PaymentAmount,
Acc_RT_ChequeNo,nAcc_RT_ChequeNo,Acc_RT_ChequeDate,nAcc_RT_ChequeDate,Acc_RT_ChequeAmount,nAcc_RT_ChequeAmount,Acc_RT_BankName,
nAcc_RT_BankName ,Acc_RT_BranchNane,nAcc_RT_BranchNane,Acc_RT_YearID,Acc_RT_CompID,Acc_RT_IPAddress,Acc_RT_Delflag,Acc_RT_Status)
					SELECT 'De-Activated',I.Acc_RT_DeletedBy,I.Acc_RT_ID,D.Acc_RT_MasterBillID,I.Acc_RT_MasterBillID,D.Acc_RT_BillAmount,I.Acc_RT_BillAmount,
D.Acc_RT_AdvanceAmount,I.Acc_RT_AdvanceAmount,D.Acc_RT_NetAmount,I.Acc_RT_NetAmount,D.Acc_RT_TDSType,I.Acc_RT_TDSType,D.Acc_RT_TDSPercentage,
I.Acc_RT_TDSPercentage,D.Acc_RT_TDSAmount,I.Acc_RT_TDSAmount,D.Acc_RT_ReasonforDeduction,I.Acc_RT_ReasonforDeduction,D.Acc_RT_PaymentAmount,
I.Acc_RT_PaymentAmount,D.Acc_RT_ChequeNo,I.Acc_RT_ChequeNo,D.Acc_RT_ChequeDate,I.Acc_RT_ChequeDate,D.Acc_RT_ChequeAmount,I.Acc_RT_ChequeAmount,
D.Acc_RT_BankName,I.Acc_RT_BankName,D.Acc_RT_BranchNane,I.Acc_RT_BranchNane,I.Acc_RT_YearID,I.Acc_RT_CompID,I.Acc_RT_IPAddress,I.Acc_RT_Delflag,I.Acc_RT_Status
 FROM Inserted I Inner Join Deleted D ON D.Acc_RT_ID=I.Acc_RT_ID   
			End
							
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_Receipt_Transaction_Log
(Log_Operation,Log_UserID,Acc_RT_ID,nAcc_RT_MasterBillID,nAcc_RT_BillAmount,
nAcc_RT_AdvanceAmount,nAcc_RT_NetAmount,nAcc_RT_TDSType,nACC_RT_TDSPercentage,
nACC_RT_TDSAmount,nACC_RT_ReasonforDeduction,nAcc_RT_PaymentAmount,
nAcc_RT_ChequeNo,nAcc_RT_ChequeDate,nAcc_RT_ChequeAmount,nAcc_RT_BankName,nAcc_RT_BranchNane,Acc_RT_YearID,Acc_RT_CompID,Acc_RT_IPAddress,Acc_RT_Delflag,Acc_RT_Status)
SELECT 'Created',Acc_RT_CreatedBy,Acc_RT_ID,Acc_RT_MasterBillID,Acc_RT_BillAmount,
Acc_RT_AdvanceAmount,Acc_RT_NetAmount,Acc_RT_TDSType,Acc_RT_TDSPercentage,Acc_RT_TDSAmount,Acc_RT_ReasonforDeduction,Acc_RT_PaymentAmount,Acc_RT_ChequeNo,Acc_RT_ChequeDate,Acc_RT_ChequeAmount,
Acc_RT_BankName,Acc_RT_BranchNane,Acc_RT_YearID,Acc_RT_CompID,Acc_RT_IPAddress,Acc_RT_Delflag,Acc_RT_Status
			 FROM Inserted
		END
	END 

/

create trigger Acc_Sales_JE_Master_Log_Trigger On Acc_Sales_JE_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Acc_SJE_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,Acc_SJE_TransactionNo,nAcc_SJE_TransactionNo,Acc_SJE_Party,nAcc_SJE_Party,Acc_SJE_Location,nAcc_SJE_Location,
Acc_SJE_BillType,nAcc_SJE_BillType,Acc_SJE_BillNo,nAcc_SJE_BillNo,Acc_SJE_BillDate,nAcc_SJE_BillDate,Acc_SJE_BillAmount,nAcc_SJE_BillAmount,
Acc_SJE_AdvanceAmount,nAcc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,nAcc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,nAcc_SJE_BalanceAmount,
Acc_SJE_NetAmount,nAcc_SJE_NetAmount,Acc_SJE_PaymentNarration,nAcc_SJE_PaymentNarration,Acc_SJE_ChequeNo,nAcc_SJE_ChequeNo,Acc_SJE_ChequeDate  ,
nAcc_SJE_ChequeDate,Acc_SJE_IFSCCode,nAcc_SJE_IFSCCode,Acc_SJE_BankName,nAcc_SJE_BankName,Acc_SJE_BranchName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,Acc_SJE_Status,nAcc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
SELECT 'Updated',I.Acc_SJE_UpdatedBy,I.Acc_SJE_ID,D.Acc_SJE_TransactionNo,I.Acc_SJE_TransactionNo,D.Acc_SJE_Party,I.Acc_SJE_Party,D.Acc_SJE_Location,
I.Acc_SJE_Location,D.Acc_SJE_BillType,I.Acc_SJE_BillType,D.Acc_SJE_BillNo,I.Acc_SJE_BillNo,D.Acc_SJE_BillDate,I.Acc_SJE_BillDate,D.Acc_SJE_BillAmount,
I.Acc_SJE_BillAmount,D.Acc_SJE_AdvanceAmount,I.Acc_SJE_AdvanceAmount,D.Acc_SJE_AdvanceNaration,I.Acc_SJE_AdvanceNaration,D.Acc_SJE_BalanceAmount,
I.Acc_SJE_BalanceAmount,D.Acc_SJE_NetAmount,I.Acc_SJE_NetAmount,D.Acc_SJE_PaymentNarration,I.Acc_SJE_PaymentNarration,D.Acc_SJE_ChequeNo,I.Acc_SJE_ChequeNo,
D.Acc_SJE_ChequeDate,I.Acc_SJE_ChequeDate,D.Acc_SJE_IFSCCode,I.Acc_SJE_IFSCCode,D.Acc_SJE_BankName,I.Acc_SJE_BankName,D.Acc_SJE_BranchName,I.Acc_SJE_BranchName,
I.Acc_SJE_YearID,I.Acc_SJE_CompID,D.Acc_SJE_Status,I.Acc_SJE_Status,I.Acc_SJE_IPAddress,D.Acc_SJE_BillCreatedDate,I.Acc_SJE_BillCreatedDate,I.Acc_SJE_Delflag
 FROM Inserted I Inner Join Deleted D ON D.Acc_SJE_ID=I.Acc_SJE_ID  
			End

			IF(Select Acc_SJE_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,Acc_SJE_TransactionNo,nAcc_SJE_TransactionNo,Acc_SJE_Party,nAcc_SJE_Party,Acc_SJE_Location,nAcc_SJE_Location,
Acc_SJE_BillType,nAcc_SJE_BillType,Acc_SJE_BillNo,nAcc_SJE_BillNo,Acc_SJE_BillDate,nAcc_SJE_BillDate,Acc_SJE_BillAmount,nAcc_SJE_BillAmount,
Acc_SJE_AdvanceAmount,nAcc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,nAcc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,nAcc_SJE_BalanceAmount,
Acc_SJE_NetAmount,nAcc_SJE_NetAmount,Acc_SJE_PaymentNarration,nAcc_SJE_PaymentNarration,Acc_SJE_ChequeNo,nAcc_SJE_ChequeNo,Acc_SJE_ChequeDate  ,
nAcc_SJE_ChequeDate,Acc_SJE_IFSCCode,nAcc_SJE_IFSCCode,Acc_SJE_BankName,nAcc_SJE_BankName,Acc_SJE_BranchName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,Acc_SJE_Status,nAcc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
SELECT 'Approved',I.Acc_SJE_ApprovedBy,I.Acc_SJE_ID,D.Acc_SJE_TransactionNo,I.Acc_SJE_TransactionNo,D.Acc_SJE_Party,I.Acc_SJE_Party,D.Acc_SJE_Location,
I.Acc_SJE_Location,D.Acc_SJE_BillType,I.Acc_SJE_BillType,D.Acc_SJE_BillNo,I.Acc_SJE_BillNo,D.Acc_SJE_BillDate,I.Acc_SJE_BillDate,D.Acc_SJE_BillAmount,
I.Acc_SJE_BillAmount,D.Acc_SJE_AdvanceAmount,I.Acc_SJE_AdvanceAmount,D.Acc_SJE_AdvanceNaration,I.Acc_SJE_AdvanceNaration,D.Acc_SJE_BalanceAmount,
I.Acc_SJE_BalanceAmount,D.Acc_SJE_NetAmount,I.Acc_SJE_NetAmount,D.Acc_SJE_PaymentNarration,I.Acc_SJE_PaymentNarration,D.Acc_SJE_ChequeNo,I.Acc_SJE_ChequeNo,
D.Acc_SJE_ChequeDate,I.Acc_SJE_ChequeDate,D.Acc_SJE_IFSCCode,I.Acc_SJE_IFSCCode,D.Acc_SJE_BankName,I.Acc_SJE_BankName,D.Acc_SJE_BranchName,I.Acc_SJE_BranchName,
I.Acc_SJE_YearID,I.Acc_SJE_CompID,D.Acc_SJE_Status,I.Acc_SJE_Status,I.Acc_SJE_IPAddress,D.Acc_SJE_BillCreatedDate,I.Acc_SJE_BillCreatedDate,I.Acc_SJE_Delflag
 FROM Inserted I Inner Join Deleted D ON D.Acc_SJE_ID=I.Acc_SJE_ID  
			End

			IF(Select Acc_SJE_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,Acc_SJE_TransactionNo,nAcc_SJE_TransactionNo,Acc_SJE_Party,nAcc_SJE_Party,Acc_SJE_Location,nAcc_SJE_Location,
Acc_SJE_BillType,nAcc_SJE_BillType,Acc_SJE_BillNo,nAcc_SJE_BillNo,Acc_SJE_BillDate,nAcc_SJE_BillDate,Acc_SJE_BillAmount,nAcc_SJE_BillAmount,
Acc_SJE_AdvanceAmount,nAcc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,nAcc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,nAcc_SJE_BalanceAmount,
Acc_SJE_NetAmount,nAcc_SJE_NetAmount,Acc_SJE_PaymentNarration,nAcc_SJE_PaymentNarration,Acc_SJE_ChequeNo,nAcc_SJE_ChequeNo,Acc_SJE_ChequeDate  ,
nAcc_SJE_ChequeDate,Acc_SJE_IFSCCode,nAcc_SJE_IFSCCode,Acc_SJE_BankName,nAcc_SJE_BankName,Acc_SJE_BranchName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,Acc_SJE_Status,nAcc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
					SELECT 'De-Activated(Not Approved)',I.Acc_SJE_DeletedBy,I.Acc_SJE_ID,D.Acc_SJE_TransactionNo,I.Acc_SJE_TransactionNo,D.Acc_SJE_Party,I.Acc_SJE_Party,D.Acc_SJE_Location,
I.Acc_SJE_Location,D.Acc_SJE_BillType,I.Acc_SJE_BillType,D.Acc_SJE_BillNo,I.Acc_SJE_BillNo,D.Acc_SJE_BillDate,I.Acc_SJE_BillDate,D.Acc_SJE_BillAmount,
I.Acc_SJE_BillAmount,D.Acc_SJE_AdvanceAmount,I.Acc_SJE_AdvanceAmount,D.Acc_SJE_AdvanceNaration,I.Acc_SJE_AdvanceNaration,D.Acc_SJE_BalanceAmount,
I.Acc_SJE_BalanceAmount,D.Acc_SJE_NetAmount,I.Acc_SJE_NetAmount,D.Acc_SJE_PaymentNarration,I.Acc_SJE_PaymentNarration,D.Acc_SJE_ChequeNo,I.Acc_SJE_ChequeNo,
D.Acc_SJE_ChequeDate,I.Acc_SJE_ChequeDate,D.Acc_SJE_IFSCCode,I.Acc_SJE_IFSCCode,D.Acc_SJE_BankName,I.Acc_SJE_BankName,D.Acc_SJE_BranchName,I.Acc_SJE_BranchName,
I.Acc_SJE_YearID,I.Acc_SJE_CompID,D.Acc_SJE_Status,I.Acc_SJE_Status,I.Acc_SJE_IPAddress,D.Acc_SJE_BillCreatedDate,I.Acc_SJE_BillCreatedDate,I.Acc_SJE_Delflag
 FROM Inserted I Inner Join Deleted D ON D.Acc_SJE_ID=I.Acc_SJE_ID  
			End

			IF(Select Acc_SJE_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,Acc_SJE_TransactionNo,nAcc_SJE_TransactionNo,Acc_SJE_Party,nAcc_SJE_Party,Acc_SJE_Location,nAcc_SJE_Location,
Acc_SJE_BillType,nAcc_SJE_BillType,Acc_SJE_BillNo,nAcc_SJE_BillNo,Acc_SJE_BillDate,nAcc_SJE_BillDate,Acc_SJE_BillAmount,nAcc_SJE_BillAmount,
Acc_SJE_AdvanceAmount,nAcc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,nAcc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,nAcc_SJE_BalanceAmount,
Acc_SJE_NetAmount,nAcc_SJE_NetAmount,Acc_SJE_PaymentNarration,nAcc_SJE_PaymentNarration,Acc_SJE_ChequeNo,nAcc_SJE_ChequeNo,Acc_SJE_ChequeDate  ,
nAcc_SJE_ChequeDate,Acc_SJE_IFSCCode,nAcc_SJE_IFSCCode,Acc_SJE_BankName,nAcc_SJE_BankName,Acc_SJE_BranchName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,Acc_SJE_Status,nAcc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
					SELECT 'De-Activated',I.Acc_SJE_DeletedBy,I.Acc_SJE_ID,D.Acc_SJE_TransactionNo,I.Acc_SJE_TransactionNo,D.Acc_SJE_Party,I.Acc_SJE_Party,D.Acc_SJE_Location,
I.Acc_SJE_Location,D.Acc_SJE_BillType,I.Acc_SJE_BillType,D.Acc_SJE_BillNo,I.Acc_SJE_BillNo,D.Acc_SJE_BillDate,I.Acc_SJE_BillDate,D.Acc_SJE_BillAmount,
I.Acc_SJE_BillAmount,D.Acc_SJE_AdvanceAmount,I.Acc_SJE_AdvanceAmount,D.Acc_SJE_AdvanceNaration,I.Acc_SJE_AdvanceNaration,D.Acc_SJE_BalanceAmount,
I.Acc_SJE_BalanceAmount,D.Acc_SJE_NetAmount,I.Acc_SJE_NetAmount,D.Acc_SJE_PaymentNarration,I.Acc_SJE_PaymentNarration,D.Acc_SJE_ChequeNo,I.Acc_SJE_ChequeNo,
D.Acc_SJE_ChequeDate,I.Acc_SJE_ChequeDate,D.Acc_SJE_IFSCCode,I.Acc_SJE_IFSCCode,D.Acc_SJE_BankName,I.Acc_SJE_BankName,D.Acc_SJE_BranchName,I.Acc_SJE_BranchName,
I.Acc_SJE_YearID,I.Acc_SJE_CompID,D.Acc_SJE_Status,I.Acc_SJE_Status,I.Acc_SJE_IPAddress,D.Acc_SJE_BillCreatedDate,I.Acc_SJE_BillCreatedDate,I.Acc_SJE_Delflag
FROM Inserted I Inner Join Deleted D ON D.Acc_SJE_ID=I.Acc_SJE_ID  
			End

			IF(Select Acc_SJE_Status from Inserted)='R'
				BEGIN       
				INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,Acc_SJE_TransactionNo,nAcc_SJE_TransactionNo,Acc_SJE_Party,nAcc_SJE_Party,Acc_SJE_Location,nAcc_SJE_Location,
Acc_SJE_BillType,nAcc_SJE_BillType,Acc_SJE_BillNo,nAcc_SJE_BillNo,Acc_SJE_BillDate,nAcc_SJE_BillDate,Acc_SJE_BillAmount,nAcc_SJE_BillAmount,
Acc_SJE_AdvanceAmount,nAcc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,nAcc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,nAcc_SJE_BalanceAmount,
Acc_SJE_NetAmount,nAcc_SJE_NetAmount,Acc_SJE_PaymentNarration,nAcc_SJE_PaymentNarration,Acc_SJE_ChequeNo,nAcc_SJE_ChequeNo,Acc_SJE_ChequeDate  ,
nAcc_SJE_ChequeDate,Acc_SJE_IFSCCode,nAcc_SJE_IFSCCode,Acc_SJE_BankName,nAcc_SJE_BankName,Acc_SJE_BranchName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,Acc_SJE_Status,nAcc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
					SELECT 'Activated(Not Approved)',I.Acc_SJE_RecalledBy,I.Acc_SJE_ID,D.Acc_SJE_TransactionNo,I.Acc_SJE_TransactionNo,D.Acc_SJE_Party,I.Acc_SJE_Party,D.Acc_SJE_Location,
I.Acc_SJE_Location,D.Acc_SJE_BillType,I.Acc_SJE_BillType,D.Acc_SJE_BillNo,I.Acc_SJE_BillNo,D.Acc_SJE_BillDate,I.Acc_SJE_BillDate,D.Acc_SJE_BillAmount,
I.Acc_SJE_BillAmount,D.Acc_SJE_AdvanceAmount,I.Acc_SJE_AdvanceAmount,D.Acc_SJE_AdvanceNaration,I.Acc_SJE_AdvanceNaration,D.Acc_SJE_BalanceAmount,
I.Acc_SJE_BalanceAmount,D.Acc_SJE_NetAmount,I.Acc_SJE_NetAmount,D.Acc_SJE_PaymentNarration,I.Acc_SJE_PaymentNarration,D.Acc_SJE_ChequeNo,I.Acc_SJE_ChequeNo,
D.Acc_SJE_ChequeDate,I.Acc_SJE_ChequeDate,D.Acc_SJE_IFSCCode,I.Acc_SJE_IFSCCode,D.Acc_SJE_BankName,I.Acc_SJE_BankName,D.Acc_SJE_BranchName,I.Acc_SJE_BranchName,
I.Acc_SJE_YearID,I.Acc_SJE_CompID,D.Acc_SJE_Status,I.Acc_SJE_Status,I.Acc_SJE_IPAddress,D.Acc_SJE_BillCreatedDate,I.Acc_SJE_BillCreatedDate,I.Acc_SJE_Delflag
FROM Inserted I Inner Join Deleted D ON D.Acc_SJE_ID=I.Acc_SJE_ID  
			End
			
			IF(Select Acc_SJE_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,Acc_SJE_TransactionNo,nAcc_SJE_TransactionNo,Acc_SJE_Party,nAcc_SJE_Party,Acc_SJE_Location,nAcc_SJE_Location,
Acc_SJE_BillType,nAcc_SJE_BillType,Acc_SJE_BillNo,nAcc_SJE_BillNo,Acc_SJE_BillDate,nAcc_SJE_BillDate,Acc_SJE_BillAmount,nAcc_SJE_BillAmount,
Acc_SJE_AdvanceAmount,nAcc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,nAcc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,nAcc_SJE_BalanceAmount,
Acc_SJE_NetAmount,nAcc_SJE_NetAmount,Acc_SJE_PaymentNarration,nAcc_SJE_PaymentNarration,Acc_SJE_ChequeNo,nAcc_SJE_ChequeNo,Acc_SJE_ChequeDate  ,
nAcc_SJE_ChequeDate,Acc_SJE_IFSCCode,nAcc_SJE_IFSCCode,Acc_SJE_BankName,nAcc_SJE_BankName,Acc_SJE_BranchName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,Acc_SJE_Status,nAcc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
					SELECT 'Activated',I.Acc_SJE_RecalledBy,I.Acc_SJE_ID,D.Acc_SJE_TransactionNo,I.Acc_SJE_TransactionNo,D.Acc_SJE_Party,I.Acc_SJE_Party,D.Acc_SJE_Location,
I.Acc_SJE_Location,D.Acc_SJE_BillType,I.Acc_SJE_BillType,D.Acc_SJE_BillNo,I.Acc_SJE_BillNo,D.Acc_SJE_BillDate,I.Acc_SJE_BillDate,D.Acc_SJE_BillAmount,
I.Acc_SJE_BillAmount,D.Acc_SJE_AdvanceAmount,I.Acc_SJE_AdvanceAmount,D.Acc_SJE_AdvanceNaration,I.Acc_SJE_AdvanceNaration,D.Acc_SJE_BalanceAmount,
I.Acc_SJE_BalanceAmount,D.Acc_SJE_NetAmount,I.Acc_SJE_NetAmount,D.Acc_SJE_PaymentNarration,I.Acc_SJE_PaymentNarration,D.Acc_SJE_ChequeNo,I.Acc_SJE_ChequeNo,
D.Acc_SJE_ChequeDate,I.Acc_SJE_ChequeDate,D.Acc_SJE_IFSCCode,I.Acc_SJE_IFSCCode,D.Acc_SJE_BankName,I.Acc_SJE_BankName,D.Acc_SJE_BranchName,I.Acc_SJE_BranchName,
I.Acc_SJE_YearID,I.Acc_SJE_CompID,D.Acc_SJE_Status,I.Acc_SJE_Status,I.Acc_SJE_IPAddress,D.Acc_SJE_BillCreatedDate,I.Acc_SJE_BillCreatedDate,I.Acc_SJE_Delflag
 FROM Inserted I Inner Join Deleted D ON D.Acc_SJE_ID=I.Acc_SJE_ID  
			End
			
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_Sales_JE_Master_Log
(Log_Operation,Log_UserID,Acc_SJE_ID,nAcc_SJE_TransactionNo,nAcc_SJE_Party,nAcc_SJE_Location,
nAcc_SJE_BillType,nAcc_SJE_BillNo,nAcc_SJE_BillDate,nAcc_SJE_BillAmount,
nAcc_SJE_AdvanceAmount,nAcc_SJE_AdvanceNaration,nAcc_SJE_BalanceAmount,
nAcc_SJE_NetAmount,nAcc_SJE_PaymentNarration,nAcc_SJE_ChequeNo,
nAcc_SJE_ChequeDate,nAcc_SJE_IFSCCode,nAcc_SJE_BankName,nAcc_SJE_BranchName,Acc_SJE_YearID,
Acc_SJE_CompID,nAcc_SJE_Status,Acc_SJE_IPAddress,nAcc_SJE_BillCreatedDate,Acc_SJE_Delflag)
SELECT 'Created',Acc_SJE_CreatedBy,Acc_SJE_ID,Acc_SJE_TransactionNo,Acc_SJE_Party,Acc_SJE_Location,Acc_SJE_BillType,
Acc_SJE_BillNo,Acc_SJE_BillDate,Acc_SJE_BillAmount,Acc_SJE_AdvanceAmount,Acc_SJE_AdvanceNaration,Acc_SJE_BalanceAmount,
Acc_SJE_NetAmount,Acc_SJE_PaymentNarration,Acc_SJE_ChequeNo,Acc_SJE_ChequeDate,Acc_SJE_IFSCCode,Acc_SJE_BankName,
Acc_SJE_BranchName,Acc_SJE_YearID,Acc_SJE_CompID,Acc_SJE_Status,Acc_SJE_IPAddress,Acc_SJE_BillCreatedDate,Acc_SJE_Delflag
			 FROM Inserted
		END
	END 

/

create trigger Acc_Transactions_Details_Log_Trigger On Acc_Transactions_Details For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select ATD_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Acc_Transactions_Details_Log
(Log_Operation,Log_UserID,ATD_ID,ATD_TransactionDate,nATD_TransactionDate,ATD_TrType,nATD_TrType,ATD_BillId,nATD_BillId,ATD_PaymentType,
nATD_PaymentType,ATD_Head,nATD_Head,ATD_GL,nATD_GL,ATD_SubGL,nATD_SubGL,ATD_DbOrCr,nATD_DbOrCr,ATD_Debit,nATD_Debit,ATD_Credit,nATD_Credit,
ATD_Status,nATD_Status,ATD_YearID,ATD_CompID,ATD_IPAddress,ATD_Delflag)
SELECT 'Updated',I.ATD_UpdatedBy,I.ATD_ID,D.ATD_TransactionDate,I.ATD_TransactionDate,D.ATD_TrType,I.ATD_TrType,D.ATD_BillID,I.ATD_BillID,
D.ATD_PaymentType,I.ATD_PaymentType,D.ATD_Head,I.ATD_Head,D.ATD_GL,I.ATD_GL,D.ATD_SubGL,I.ATD_SubGL,D.ATD_DbOrCr,I.ATD_DbOrCr,
D.ATD_Debit,I.ATD_Debit,D.ATD_Credit,I.ATD_Credit,D.ATD_Status,I.ATD_Status,I.ATD_YearID,I.ATD_CompID,I.ATD_IPAddress,I.ATD_Delflag FROM Inserted I Inner Join Deleted D ON D.ATD_ID=I.ATD_ID  
			End

			IF(Select ATD_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Acc_Transactions_Details_Log
(Log_Operation,Log_UserID,ATD_ID,ATD_TransactionDate,nATD_TransactionDate,ATD_TrType,nATD_TrType,ATD_BillId,nATD_BillId,ATD_PaymentType,
nATD_PaymentType,ATD_Head,nATD_Head,ATD_GL,nATD_GL,ATD_SubGL,nATD_SubGL,ATD_DbOrCr,nATD_DbOrCr,ATD_Debit,nATD_Debit,ATD_Credit,nATD_Credit,
ATD_Status,nATD_Status,ATD_YearID,ATD_CompID,ATD_IPAddress,ATD_Delflag)
					SELECT 'Approved',I.ATD_ApprovedBy,I.ATD_ID,D.ATD_TransactionDate,I.ATD_TransactionDate,D.ATD_TrType,I.ATD_TrType,D.ATD_BillID,I.ATD_BillID,
D.ATD_PaymentType,I.ATD_PaymentType,D.ATD_Head,I.ATD_Head,D.ATD_GL,I.ATD_GL,D.ATD_SubGL,I.ATD_SubGL,D.ATD_DbOrCr,I.ATD_DbOrCr,
D.ATD_Debit,I.ATD_Debit,D.ATD_Credit,I.ATD_Credit,D.ATD_Status,I.ATD_Status,I.ATD_YearID,I.ATD_CompID,I.ATD_IPAddress,I.ATD_Delflag FROM Inserted I Inner Join Deleted D ON D.ATD_ID=I.ATD_ID 
			End

			IF(Select ATD_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Acc_Transactions_Details_Log
(Log_Operation,Log_UserID,ATD_ID,ATD_TransactionDate,nATD_TransactionDate,ATD_TrType,nATD_TrType,ATD_BillId,nATD_BillId,ATD_PaymentType,
nATD_PaymentType,ATD_Head,nATD_Head,ATD_GL,nATD_GL,ATD_SubGL,nATD_SubGL,ATD_DbOrCr,nATD_DbOrCr,ATD_Debit,nATD_Debit,ATD_Credit,nATD_Credit,
ATD_Status,nATD_Status,ATD_YearID,ATD_CompID,ATD_IPAddress,ATD_Delflag)
					SELECT 'De-Activated(Not Approved)',I.ATD_Deletedby,I.ATD_ID,D.ATD_TransactionDate,I.ATD_TransactionDate,D.ATD_TrType,I.ATD_TrType,D.ATD_BillID,I.ATD_BillID,
D.ATD_PaymentType,I.ATD_PaymentType,D.ATD_Head,I.ATD_Head,D.ATD_GL,I.ATD_GL,D.ATD_SubGL,I.ATD_SubGL,D.ATD_DbOrCr,I.ATD_DbOrCr,
D.ATD_Debit,I.ATD_Debit,D.ATD_Credit,I.ATD_Credit,D.ATD_Status,I.ATD_Status,I.ATD_YearID,I.ATD_CompID,I.ATD_IPAddress,I.ATD_Delflag FROM Inserted I Inner Join Deleted D ON D.ATD_ID=I.ATD_ID  
			End

			IF(Select ATD_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Acc_Transactions_Details_Log
(Log_Operation,Log_UserID,ATD_ID,ATD_TransactionDate,nATD_TransactionDate,ATD_TrType,nATD_TrType,ATD_BillId,nATD_BillId,ATD_PaymentType,
nATD_PaymentType,ATD_Head,nATD_Head,ATD_GL,nATD_GL,ATD_SubGL,nATD_SubGL,ATD_DbOrCr,nATD_DbOrCr,ATD_Debit,nATD_Debit,ATD_Credit,nATD_Credit,
ATD_Status,nATD_Status,ATD_YearID,ATD_CompID,ATD_IPAddress,ATD_Delflag)
					SELECT 'De-Activated',I.ATD_Deletedby,I.ATD_ID,D.ATD_TransactionDate,I.ATD_TransactionDate,D.ATD_TrType,I.ATD_TrType,D.ATD_BillID,I.ATD_BillID,
D.ATD_PaymentType,I.ATD_PaymentType,D.ATD_Head,I.ATD_Head,D.ATD_GL,I.ATD_GL,D.ATD_SubGL,I.ATD_SubGL,D.ATD_DbOrCr,I.ATD_DbOrCr,
D.ATD_Debit,I.ATD_Debit,D.ATD_Credit,I.ATD_Credit,D.ATD_Status,I.ATD_Status,I.ATD_YearID,I.ATD_CompID,I.ATD_IPAddress,I.ATD_Delflag FROM Inserted I Inner Join Deleted D ON D.ATD_ID=I.ATD_ID   
			End
							
		END
	ELSE
		BEGIN  
			INSERT INTO Acc_Transactions_Details_Log
(Log_Operation,Log_UserID,ATD_ID,nATD_TransactionDate,nATD_TrType,nATD_BillId,
nATD_PaymentType,nATD_Head,nATD_GL,nATD_SubGL,nATD_DbOrCr,nATD_Debit,nATD_Credit,
nATD_Status,ATD_YearID,ATD_CompID,ATD_IPAddress,ATD_Delflag)
SELECT 'Created',ATD_CreatedBy,ATD_ID,ATD_TransactionDate,ATD_TrType,ATD_BillID,
ATD_PaymentType,ATD_Head,ATD_GL,ATD_SubGL,ATD_DbOrCr,
ATD_Debit,ATD_Credit,ATD_Status,ATD_YearID,ATD_CompID,ATD_IPAddress,ATD_Delflag 
			 FROM Inserted
		END
	END  

/


create trigger ACC_Voucher_Settings_Log_Trigger On ACC_Voucher_Settings For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select AVS_Status from Inserted)='U'
				BEGIN       
				INSERT INTO ACC_Voucher_Settings_Log
(Log_Operation,Log_UserID,AVS_Id,AVS_TransType,nAVS_TransType,AVS_Prefix,nAVS_Prefix,AVS_SNTotal,nAVS_SNTotal,AVS_CompId,AVS_IPAddress,AVS_Status,AVS_Delflag)
SELECT 'Updated',I.AVS_UpdatedBy,I.AVS_Id,D.AVS_TransType,I.AVS_TransType,D.AVS_Prefix,I.AVS_Prefix,D.AVS_SNTotal,I.AVS_SNTotal,I.AVS_CompId,I.AVS_IPAddress,I.AVS_Status,I.AVS_Delflag FROM Inserted I Inner Join Deleted D ON D.AVS_Id=I.AVS_Id  
			End							
		END
	ELSE
		BEGIN  
			INSERT INTO ACC_Voucher_Settings_Log
(Log_Operation,Log_UserID,AVS_Id,nAVS_TransType,nAVS_Prefix,nAVS_SNTotal,AVS_CompId,AVS_IPAddress,AVS_Status,AVS_Delflag)
SELECT 'Created',AVS_CreatedBy,AVS_Id,AVS_TransType,AVS_Prefix,AVS_SNTotal,AVS_CompId,AVS_IPAddress,AVS_Status,AVS_Delflag 
			 FROM Inserted
		END
	END  
/
create trigger ACC_Year_Master_Log_Trigger On ACC_Year_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select YMS_Status from Inserted)='U'
				BEGIN       
				INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,YMS_FROMDATE,nYMS_FROMDATE,YMS_TODATE,nYMS_TODATE,yms_FreezeYear,nyms_FreezeYear,YMS_FROM_YEAR,
nYMS_FROM_YEAR,YMS_TO_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
SELECT 'Updated',I.YMS_UpdatedBy,I.YMS_ID,D.YMS_FROMDATE,I.YMS_FROMDATE,D.YMS_TODATE,I.YMS_TODATE,D.yms_FreezeYear,I.yms_FreezeYear,
D.YMS_FROM_YEAR,I.YMS_FROM_YEAR,D.YMS_TO_YEAR,I.YMS_TO_YEAR,I.YMS_CompID,I.YMS_Status,I.YMS_DelFlag,I.YMS_IPAddress FROM Inserted I Inner Join Deleted D ON D.YMS_ID=I.YMS_ID  
			End	
	IF(Select YMS_Status from Inserted)='A'
				BEGIN       
				INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,YMS_FROMDATE,nYMS_FROMDATE,YMS_TODATE,nYMS_TODATE,yms_FreezeYear,nyms_FreezeYear,YMS_FROM_YEAR,
nYMS_FROM_YEAR,YMS_TO_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
					SELECT 'Approved',I.YMS_ApprovedBy,I.YMS_ID,D.YMS_FROMDATE,I.YMS_FROMDATE,D.YMS_TODATE,I.YMS_TODATE,D.yms_FreezeYear,I.yms_FreezeYear,
D.YMS_FROM_YEAR,I.YMS_FROM_YEAR,D.YMS_TO_YEAR,I.YMS_TO_YEAR,I.YMS_CompID,I.YMS_Status,I.YMS_DelFlag,I.YMS_IPAddress FROM Inserted I Inner Join Deleted D ON D.YMS_ID=I.YMS_ID
			End

			IF(Select YMS_Status from Inserted)='D'
				BEGIN       
				INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,YMS_FROMDATE,nYMS_FROMDATE,YMS_TODATE,nYMS_TODATE,yms_FreezeYear,nyms_FreezeYear,YMS_FROM_YEAR,
nYMS_FROM_YEAR,YMS_TO_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.YMS_DeletedBy,I.YMS_ID,D.YMS_FROMDATE,I.YMS_FROMDATE,D.YMS_TODATE,I.YMS_TODATE,D.yms_FreezeYear,I.yms_FreezeYear,
D.YMS_FROM_YEAR,I.YMS_FROM_YEAR,D.YMS_TO_YEAR,I.YMS_TO_YEAR,I.YMS_CompID,I.YMS_Status,I.YMS_DelFlag,I.YMS_IPAddress FROM Inserted I Inner Join Deleted D ON D.YMS_ID=I.YMS_ID  
			End

			IF(Select YMS_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,YMS_FROMDATE,nYMS_FROMDATE,YMS_TODATE,nYMS_TODATE,yms_FreezeYear,nyms_FreezeYear,YMS_FROM_YEAR,
nYMS_FROM_YEAR,YMS_TO_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
					SELECT 'De-Activated',I.YMS_DeletedBy,I.YMS_ID,D.YMS_FROMDATE,I.YMS_FROMDATE,D.YMS_TODATE,I.YMS_TODATE,D.yms_FreezeYear,I.yms_FreezeYear,
D.YMS_FROM_YEAR,I.YMS_FROM_YEAR,D.YMS_TO_YEAR,I.YMS_TO_YEAR,I.YMS_CompID,I.YMS_Status,I.YMS_DelFlag,I.YMS_IPAddress FROM Inserted I Inner Join Deleted D ON D.YMS_ID=I.YMS_ID    
			End		
	
	IF(Select YMS_Status from Inserted)='R'
				BEGIN       
				INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,YMS_FROMDATE,nYMS_FROMDATE,YMS_TODATE,nYMS_TODATE,yms_FreezeYear,nyms_FreezeYear,YMS_FROM_YEAR,
nYMS_FROM_YEAR,YMS_TO_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
					SELECT 'Activated(Not Approved)',I.YMS_ReCalledBy,I.YMS_ID,D.YMS_FROMDATE,I.YMS_FROMDATE,D.YMS_TODATE,I.YMS_TODATE,D.yms_FreezeYear,I.yms_FreezeYear,
D.YMS_FROM_YEAR,I.YMS_FROM_YEAR,D.YMS_TO_YEAR,I.YMS_TO_YEAR,I.YMS_CompID,I.YMS_Status,I.YMS_DelFlag,I.YMS_IPAddress FROM Inserted I Inner Join Deleted D ON D.YMS_ID=I.YMS_ID
			End
			
			IF(Select YMS_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,YMS_FROMDATE,nYMS_FROMDATE,YMS_TODATE,nYMS_TODATE,yms_FreezeYear,nyms_FreezeYear,YMS_FROM_YEAR,
nYMS_FROM_YEAR,YMS_TO_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
					SELECT 'Activated',I.YMS_ReCalledBy,I.YMS_ID,D.YMS_FROMDATE,I.YMS_FROMDATE,D.YMS_TODATE,I.YMS_TODATE,D.yms_FreezeYear,I.yms_FreezeYear,
D.YMS_FROM_YEAR,I.YMS_FROM_YEAR,D.YMS_TO_YEAR,I.YMS_TO_YEAR,I.YMS_CompID,I.YMS_Status,I.YMS_DelFlag,I.YMS_IPAddress FROM Inserted I Inner Join Deleted D ON D.YMS_ID=I.YMS_ID
			End											
		END
	ELSE
		BEGIN  
			INSERT INTO ACC_Year_Master_Log
(Log_Operation,Log_UserID ,YMS_ID,nYMS_FROMDATE,nYMS_TODATE,nyms_FreezeYear,
nYMS_FROM_YEAR,nYMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress)
SELECT 'Created',YMS_CRBY,YMS_ID,YMS_FROMDATE,YMS_TODATE,yms_FreezeYear,
YMS_FROM_YEAR,YMS_TO_YEAR,YMS_CompID,YMS_Status,YMS_DelFlag,YMS_IPAddress
			 FROM Inserted
		END
	END  

/

create trigger account_transactions_Log_Trigger On Account_Transactions For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select ATR_Status from Inserted)='U'
				BEGIN       
				INSERT INTO account_transactions_Log
(Log_Operation,Log_UserID,ATR_Id,ATR_TrNo,nATR_TrNo,ATR_TrType,nATR_TrType,ATR_TRDate,nATR_TRDate,ATR_BIllID,nATR_BIllID,ATR_UserID,
nATR_UserID,ATR_Party,nATR_Party,ATR_GLCode,nATR_GLCode,ATR_SubGL,nATR_SubGL,ATR_DbAmount,nATR_DbAmount,ATR_CrAmount,nATR_CrAmount,
ATR_Particulars,nATR_Particulars,ATR_VoucherNo,nATR_VoucherNo,ATR_Remarks,nATR_Remarks,ATR_SysTrNo,nATR_SysTrNo,ATR_Status,
ATR_YearId,ATR_CompID,ATR_PaymentType,nATR_PaymentType,ATR_IPAddress,ATR_Delflag)
SELECT 'Updated',I.ATR_UpdatedBy,I.ATR_Id,D.ATR_TrNo,I.ATR_TrNo,D.ATR_TrType,I.ATR_TrType,D.ATR_TRDate,I.ATR_TRDate,D.ATR_BIllID,I.ATR_BIllID,
D.ATR_UserID,I.ATR_UserID,D.ATR_Party,I.ATR_Party,D.ATR_GLCode,I.ATR_GLCode,D.ATR_SubGL,I.ATR_SubGL,D.ATR_DBAmount,I.ATR_DBAmount,D.ATR_CrAmount,I.ATR_CrAmount,
D.ATR_Particulars,I.ATR_PArticulars,D.ATR_VoucherNo,I.ATR_VoucherNo,D.ATR_Remarks,I.ATR_Remarks,D.ATR_SysTrNo,I.ATR_SysTrNo,I.ATR_Status,
I.ATR_YearId,I.ATR_CompID,D.ATR_PaymentType,I.ATR_PaymentType,I.ATR_IPAddress,I.ATR_Delflag
 FROM Inserted I Inner Join Deleted D ON D.ATR_Id=I.ATR_Id  
			End	
	IF(Select ATR_Status from Inserted)='A'
				BEGIN       
				INSERT INTO account_transactions_Log
(Log_Operation,Log_UserID,ATR_Id,ATR_TrNo,nATR_TrNo,ATR_TrType,nATR_TrType,ATR_TRDate,nATR_TRDate,ATR_BIllID,nATR_BIllID,ATR_UserID,
nATR_UserID,ATR_Party,nATR_Party,ATR_GLCode,nATR_GLCode,ATR_SubGL,nATR_SubGL,ATR_DbAmount,nATR_DbAmount,ATR_CrAmount,nATR_CrAmount,
ATR_Particulars,nATR_Particulars,ATR_VoucherNo,nATR_VoucherNo,ATR_Remarks,nATR_Remarks,ATR_SysTrNo,nATR_SysTrNo,ATR_Status,
ATR_YearId,ATR_CompID,ATR_PaymentType,nATR_PaymentType,ATR_IPAddress,ATR_Delflag)
					SELECT 'Approved',I.ATR_ApprovedBy, I.ATR_Id,D.ATR_TrNo,I.ATR_TrNo,D.ATR_TrType,I.ATR_TrType,D.ATR_TRDate,I.ATR_TRDate,D.ATR_BIllID,I.ATR_BIllID,
D.ATR_UserID,I.ATR_UserID,D.ATR_Party,I.ATR_Party,D.ATR_GLCode,I.ATR_GLCode,D.ATR_SubGL,I.ATR_SubGL,D.ATR_DBAmount,I.ATR_DBAmount,D.ATR_CrAmount,I.ATR_CrAmount,
D.ATR_Particulars,I.ATR_PArticulars,D.ATR_VoucherNo,I.ATR_VoucherNo,D.ATR_Remarks,I.ATR_Remarks,D.ATR_SysTrNo,I.ATR_SysTrNo,I.ATR_Status,
I.ATR_YearId,I.ATR_CompID,D.ATR_PaymentType,I.ATR_PaymentType,I.ATR_IPAddress,I.ATR_Delflag
 FROM Inserted I Inner Join Deleted D ON D.ATR_Id=I.ATR_Id 
			End

			IF(Select ATR_Status from Inserted)='D'
				BEGIN       
				INSERT INTO account_transactions_Log
(Log_Operation,Log_UserID,ATR_Id,ATR_TrNo,nATR_TrNo,ATR_TrType,nATR_TrType,ATR_TRDate,nATR_TRDate,ATR_BIllID,nATR_BIllID,ATR_UserID,
nATR_UserID,ATR_Party,nATR_Party,ATR_GLCode,nATR_GLCode,ATR_SubGL,nATR_SubGL,ATR_DbAmount,nATR_DbAmount,ATR_CrAmount,nATR_CrAmount,
ATR_Particulars,nATR_Particulars,ATR_VoucherNo,nATR_VoucherNo,ATR_Remarks,nATR_Remarks,ATR_SysTrNo,nATR_SysTrNo,ATR_Status,
ATR_YearId,ATR_CompID,ATR_PaymentType,nATR_PaymentType,ATR_IPAddress,ATR_Delflag)
					SELECT 'De-Activated(Not Approved)',I.ATR_DeletedBy,I.ATR_Id,D.ATR_TrNo,I.ATR_TrNo,D.ATR_TrType,I.ATR_TrType,D.ATR_TRDate,I.ATR_TRDate,D.ATR_BIllID,I.ATR_BIllID,
D.ATR_UserID,I.ATR_UserID,D.ATR_Party,I.ATR_Party,D.ATR_GLCode,I.ATR_GLCode,D.ATR_SubGL,I.ATR_SubGL,D.ATR_DBAmount,I.ATR_DBAmount,D.ATR_CrAmount,I.ATR_CrAmount,
D.ATR_Particulars,I.ATR_PArticulars,D.ATR_VoucherNo,I.ATR_VoucherNo,D.ATR_Remarks,I.ATR_Remarks,D.ATR_SysTrNo,I.ATR_SysTrNo,I.ATR_Status,
I.ATR_YearId,I.ATR_CompID,D.ATR_PaymentType,I.ATR_PaymentType,I.ATR_IPAddress,I.ATR_Delflag
 FROM Inserted I Inner Join Deleted D ON D.ATR_Id=I.ATR_Id  
			End

			IF(Select ATR_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO account_transactions_Log
(Log_Operation,Log_UserID,ATR_Id,ATR_TrNo,nATR_TrNo,ATR_TrType,nATR_TrType,ATR_TRDate,nATR_TRDate,ATR_BIllID,nATR_BIllID,ATR_UserID,
nATR_UserID,ATR_Party,nATR_Party,ATR_GLCode,nATR_GLCode,ATR_SubGL,nATR_SubGL,ATR_DbAmount,nATR_DbAmount,ATR_CrAmount,nATR_CrAmount,
ATR_Particulars,nATR_Particulars,ATR_VoucherNo,nATR_VoucherNo,ATR_Remarks,nATR_Remarks,ATR_SysTrNo,nATR_SysTrNo,ATR_Status,
ATR_YearId,ATR_CompID,ATR_PaymentType,nATR_PaymentType,ATR_IPAddress,ATR_Delflag)
					SELECT 'De-Activated',I.ATR_DeletedBy, I.ATR_Id,D.ATR_TrNo,I.ATR_TrNo,D.ATR_TrType,I.ATR_TrType,D.ATR_TRDate,I.ATR_TRDate,D.ATR_BIllID,I.ATR_BIllID,
D.ATR_UserID,I.ATR_UserID,D.ATR_Party,I.ATR_Party,D.ATR_GLCode,I.ATR_GLCode,D.ATR_SubGL,I.ATR_SubGL,D.ATR_DBAmount,I.ATR_DBAmount,D.ATR_CrAmount,I.ATR_CrAmount,
D.ATR_Particulars,I.ATR_PArticulars,D.ATR_VoucherNo,I.ATR_VoucherNo,D.ATR_Remarks,I.ATR_Remarks,D.ATR_SysTrNo,I.ATR_SysTrNo,I.ATR_Status,
I.ATR_YearId,I.ATR_CompID,D.ATR_PaymentType,I.ATR_PaymentType,I.ATR_IPAddress,I.ATR_Delflag
 FROM Inserted I Inner Join Deleted D ON D.ATR_Id=I.ATR_Id    
			End														
		END
	ELSE
		BEGIN  
			INSERT INTO account_transactions_Log
(Log_Operation,Log_UserID,ATR_Id,nATR_TrNo,nATR_TrType,nATR_TRDate,nATR_BIllID,
nATR_UserID,nATR_Party,nATR_GLCode,nATR_SubGL,nATR_DbAmount,nATR_CrAmount,
nATR_Particulars,nATR_VoucherNo,nATR_Remarks,nATR_SysTrNo,ATR_Status,
ATR_YearId,ATR_CompID,nATR_PaymentType,ATR_IPAddress,ATR_Delflag)
SELECT 'Created',ATR_CreatedBy,ATR_Id,ATR_TrNo,ATR_TrType,ATR_TRDate,ATR_BIllID,
ATR_UserID,ATR_Party,ATR_GLCode,ATR_SubGL,ATR_DBAmount,ATR_CrAmount,
ATR_PArticulars,ATR_VoucherNo,ATR_Remarks,ATR_SysTrNo,ATR_Status,
ATR_YearId,ATR_CompID,ATR_PaymentType,ATR_IPAddress,ATR_Delflag
			 FROM Inserted
		END
	END

/

create trigger Accounts_Party_Master_Log_Trigger On Accounts_Party_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select APM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Accounts_Party_Master_Log
(Log_Operation  ,Log_UserID,APM_ID,APM_IndType ,nAPM_IndType,APM_Name,nAPM_Name,APM_Code,nAPM_Code,APM_Inventory,nAPM_Inventory ,APM_Address,
nAPM_Address,APM_State,nAPM_State,APM_Pincode,nAPM_Pincode,APM_Delflag,APM_CompID,APM_Status,nAPM_Status,APM_ContactPerson,
nAPM_ContactPerson,APM_City,nAPM_City,APM_LandLineNo,nAPM_LandLineNo,APM_MobileNo,nAPM_MobileNo,APM_EmailID,nAPM_EmailID,APM_Fax,nAPM_Fax,APM_Group,
nAPM_Group,APM_SubGroup,nAPM_SubGroup,APM_GL,nAPM_GL,APM_IPAddress)
SELECT 'Updated',I.APM_UpdatedBy,I.APM_ID,D.APM_IndType,I.APM_IndType,D.APM_Name,I.APM_Name,D.APM_Code,I.APM_Code,D.APM_Inventory,I.APM_Inventory,
D.APM_Address,I.APM_Address,D.APM_State,I.APM_State,D.APM_Pincode,I.APM_Pincode,I.APM_Delflag,I.APM_CompID,D.APM_Status,I.APM_Status,D.APM_ContactPerson,
I.APM_ContactPerson,D.APM_City,I.APM_City,D.APM_LandLineNo,I.APM_LandLineNo,D.APM_MobileNo,I.APM_MobileNo,D.APM_EmailID,I.APM_EmailID,D.APM_Fax,I.APM_Fax,
D.APM_Group,I.APM_Group,D.APM_SubGroup,I.APM_SubGroup,D.APM_GL,I.APM_GL,I.APM_Address
 FROM Inserted I Inner Join Deleted D ON D.APM_ID=I.APM_ID
			End	
	IF(Select APM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Accounts_Party_Master_Log
(Log_Operation  ,Log_UserID,APM_ID,APM_IndType ,nAPM_IndType,APM_Name,nAPM_Name,APM_Code,nAPM_Code,APM_Inventory,nAPM_Inventory ,APM_Address,
nAPM_Address,APM_State,nAPM_State,APM_Pincode,nAPM_Pincode,APM_Delflag,APM_CompID,APM_Status,nAPM_Status,APM_ContactPerson,
nAPM_ContactPerson,APM_City,nAPM_City,APM_LandLineNo,nAPM_LandLineNo,APM_MobileNo,nAPM_MobileNo,APM_EmailID,nAPM_EmailID,APM_Fax,nAPM_Fax,APM_Group,
nAPM_Group,APM_SubGroup,nAPM_SubGroup,APM_GL,nAPM_GL,APM_IPAddress)
					SELECT 'Approved',I.APM_ApprovedBy, I.APM_ID,D.APM_IndType,I.APM_IndType,D.APM_Name,I.APM_Name,D.APM_Code,I.APM_Code,D.APM_Inventory,I.APM_Inventory,
D.APM_Address,I.APM_Address,D.APM_State,I.APM_State,D.APM_Pincode,I.APM_Pincode,I.APM_Delflag,I.APM_CompID,D.APM_Status,I.APM_Status,D.APM_ContactPerson,
I.APM_ContactPerson,D.APM_City,I.APM_City,D.APM_LandLineNo,I.APM_LandLineNo,D.APM_MobileNo,I.APM_MobileNo,D.APM_EmailID,I.APM_EmailID,D.APM_Fax,I.APM_Fax,
D.APM_Group,I.APM_Group,D.APM_SubGroup,I.APM_SubGroup,D.APM_GL,I.APM_GL,I.APM_Address
 FROM Inserted I Inner Join Deleted D ON D.APM_ID=I.APM_ID
			End

			IF(Select APM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Accounts_Party_Master_Log
(Log_Operation  ,Log_UserID,APM_ID,APM_IndType ,nAPM_IndType,APM_Name,nAPM_Name,APM_Code,nAPM_Code,APM_Inventory,nAPM_Inventory ,APM_Address,
nAPM_Address,APM_State,nAPM_State,APM_Pincode,nAPM_Pincode,APM_Delflag,APM_CompID,APM_Status,nAPM_Status,APM_ContactPerson,
nAPM_ContactPerson,APM_City,nAPM_City,APM_LandLineNo,nAPM_LandLineNo,APM_MobileNo,nAPM_MobileNo,APM_EmailID,nAPM_EmailID,APM_Fax,nAPM_Fax,APM_Group,
nAPM_Group,APM_SubGroup,nAPM_SubGroup,APM_GL,nAPM_GL,APM_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.APM_DeletedBy,I.APM_ID,D.APM_IndType,I.APM_IndType,D.APM_Name,I.APM_Name,D.APM_Code,I.APM_Code,D.APM_Inventory,I.APM_Inventory,
D.APM_Address,I.APM_Address,D.APM_State,I.APM_State,D.APM_Pincode,I.APM_Pincode,I.APM_Delflag,I.APM_CompID,D.APM_Status,I.APM_Status,D.APM_ContactPerson,
I.APM_ContactPerson,D.APM_City,I.APM_City,D.APM_LandLineNo,I.APM_LandLineNo,D.APM_MobileNo,I.APM_MobileNo,D.APM_EmailID,I.APM_EmailID,D.APM_Fax,I.APM_Fax,
D.APM_Group,I.APM_Group,D.APM_SubGroup,I.APM_SubGroup,D.APM_GL,I.APM_GL,I.APM_Address
 FROM Inserted I Inner Join Deleted D ON D.APM_ID=I.APM_ID
			End

			IF(Select APM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Accounts_Party_Master_Log
(Log_Operation  ,Log_UserID,APM_ID,APM_IndType ,nAPM_IndType,APM_Name,nAPM_Name,APM_Code,nAPM_Code,APM_Inventory,nAPM_Inventory ,APM_Address,
nAPM_Address,APM_State,nAPM_State,APM_Pincode,nAPM_Pincode,APM_Delflag,APM_CompID,APM_Status,nAPM_Status,APM_ContactPerson,
nAPM_ContactPerson,APM_City,nAPM_City,APM_LandLineNo,nAPM_LandLineNo,APM_MobileNo,nAPM_MobileNo,APM_EmailID,nAPM_EmailID,APM_Fax,nAPM_Fax,APM_Group,
nAPM_Group,APM_SubGroup,nAPM_SubGroup,APM_GL,nAPM_GL,APM_IPAddress)
					SELECT 'De-Activated',I.APM_DeletedBy, I.APM_ID,D.APM_IndType,I.APM_IndType,D.APM_Name,I.APM_Name,D.APM_Code,I.APM_Code,D.APM_Inventory,I.APM_Inventory,
D.APM_Address,I.APM_Address,D.APM_State,I.APM_State,D.APM_Pincode,I.APM_Pincode,I.APM_Delflag,I.APM_CompID,D.APM_Status,I.APM_Status,D.APM_ContactPerson,
I.APM_ContactPerson,D.APM_City,I.APM_City,D.APM_LandLineNo,I.APM_LandLineNo,D.APM_MobileNo,I.APM_MobileNo,D.APM_EmailID,I.APM_EmailID,D.APM_Fax,I.APM_Fax,
D.APM_Group,I.APM_Group,D.APM_SubGroup,I.APM_SubGroup,D.APM_GL,I.APM_GL,I.APM_Address
 FROM Inserted I Inner Join Deleted D ON D.APM_ID=I.APM_ID  
			End														
		END
	ELSE
		BEGIN  
			INSERT INTO Accounts_Party_Master_Log
(Log_Operation ,Log_UserID,APM_ID,nAPM_IndType,nAPM_Name,nAPM_Code,nAPM_Inventory ,
nAPM_Address,nAPM_State,nAPM_Pincode,APM_Delflag,APM_CompID,nAPM_Status,
nAPM_ContactPerson,nAPM_City,nAPM_LandLineNo,nAPM_MobileNo,nAPM_EmailID,nAPM_Fax,
nAPM_Group,nAPM_SubGroup,nAPM_GL,APM_IPAddress)
SELECT 'Created',APM_CreatedBy,APM_ID,APM_IndType,APM_Name,APM_Code,APM_Inventory,
APM_Address,APM_State,APM_Pincode,APM_Delflag,APM_CompID,APM_Status,
APM_ContactPerson,APM_City,APM_LandLineNo,APM_MobileNo,APM_EmailID,APM_Fax,
APM_Group,APM_SubGroup,APM_GL,APM_Address
 			 FROM Inserted
		END
	END 

/


create trigger Application_Settings_Log_Trigger On Application_Settings For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select AS_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Application_Settings_Log
(Log_Operation,Log_UserID,AS_ID,AS_IndType,nAS_IndType,AS_Customer ,nAS_Customer ,AS_YearID,AS_DelFlag,AS_CompID ,AS_Default,nAS_Default,
AS_Voucher,nAS_Voucher,AS_Prefix,nAS_Prefix,AS_Food,nAS_Food,AS_Nonfood,nAS_Nonfood,AS_Tools,nAS_Tools,As_IPAddress,AS_Status)
SELECT 'Updated',I.AS_UpdatedBy,I.AS_ID,D.AS_IndType,I.AS_IndType,D.AS_Customer,I.AS_Customer,I.AS_YearID,I.AS_DelFlag,I.AS_CompID,D.AS_Default,I.AS_Default,
D.AS_Voucher,I.AS_Voucher,D.As_Prefix,I.AS_Prefix,D.AS_Food,I.AS_Food,D.AS_Nonfood,I.AS_Nonfood,D.AS_Tools,I.AS_Tools,I.AS_IPAddress,I.AS_Status
 FROM Inserted I Inner Join Deleted D ON D.AS_ID=I.AS_ID
			End															
		END
	ELSE
		BEGIN  
			INSERT INTO Application_Settings_Log
(Log_Operation,Log_UserID,AS_ID,nAS_IndType,nAS_Customer,AS_YearID,AS_DelFlag,AS_CompID ,nAS_Default,
nAS_Voucher,nAS_Prefix,nAS_Food,nAS_Nonfood,nAS_Tools,As_IPAddress,AS_Status)
SELECT 'Created',AS_CreatedBy,AS_ID,AS_IndType,AS_Customer,AS_YearID,AS_DelFlag,AS_CompID,AS_Default,
AS_Voucher,AS_Prefix,AS_Food,AS_Nonfood,AS_Tools,AS_IPAddress,AS_Status
 			 FROM Inserted
		END
	END  
/

create trigger Sales_Buyers_Masters_Log_Trigger On Sales_Buyers_Masters For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select BM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,BM_IndType,nBM_IndType,BM_Name  ,nBM_Name  ,BM_Code  ,nBM_Code  ,BM_Inventry,nBM_Inventry,BM_Address,nBM_Address,
BM_State,nBM_State,BM_Pincode,nBM_Pincode,BM_Delflag,BM_CompID,BM_Status,nBM_Status,BM_ContactPerson  ,nBM_ContactPerson ,BM_City,nBM_City,
BM_LandLineNo,nBM_LandLineNo,BM_MobileNo,nBM_MobileNo,BM_EmailID,nBM_EmailID,BM_Fax,nBM_Fax,BM_Group,nBM_Group ,
BM_SubGroup ,nBM_SubGroup,BM_GL,nBM_GL,BM_IPAddress)
SELECT 'Updated',I.BM_UpdatedBy,I.BM_ID,D.BM_IndType,I.BM_IndType,D.BM_Name,I.BM_Name,D.BM_Code,I.BM_Code,D.BM_Inventry,I.BM_Inventry,D.BM_Address,I.BM_Address,
D.BM_State,I.BM_State,D.BM_Pincode,I.BM_Pincode,I.BM_Delflag,I.BM_CompID,D.BM_Status,I.BM_Status,D.BM_ContactPerson,I.BM_ContactPerson,
D.BM_City,I.BM_City,D.BM_LandLineNo,I.BM_LandLineNo,D.BM_MobileNo,I.BM_MobileNo,D.BM_EmailID,I.BM_EmailID,D.BM_Fax,I.BM_Fax,D.BM_Group,I.BM_Group,
D.BM_SubGroup,I.BM_SubGroup,D.BM_GL,I.BM_GL,I.BM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.BM_ID=I.BM_ID
			End	
			
IF(Select BM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,BM_IndType,nBM_IndType,BM_Name  ,nBM_Name  ,BM_Code  ,nBM_Code  ,BM_Inventry,nBM_Inventry,BM_Address,nBM_Address,
BM_State,nBM_State,BM_Pincode,nBM_Pincode,BM_Delflag,BM_CompID,BM_Status,nBM_Status,BM_ContactPerson  ,nBM_ContactPerson ,BM_City,nBM_City,
BM_LandLineNo,nBM_LandLineNo,BM_MobileNo,nBM_MobileNo,BM_EmailID,nBM_EmailID,BM_Fax,nBM_Fax,BM_Group,nBM_Group ,
BM_SubGroup ,nBM_SubGroup,BM_GL,nBM_GL,BM_IPAddress)
					SELECT 'Approved',I.BM_ApprovedBy, I.BM_ID,D.BM_IndType,I.BM_IndType,D.BM_Name,I.BM_Name,D.BM_Code,I.BM_Code,D.BM_Inventry,I.BM_Inventry,D.BM_Address,I.BM_Address,
D.BM_State,I.BM_State,D.BM_Pincode,I.BM_Pincode,I.BM_Delflag,I.BM_CompID,D.BM_Status,I.BM_Status,D.BM_ContactPerson,I.BM_ContactPerson,
D.BM_City,I.BM_City,D.BM_LandLineNo,I.BM_LandLineNo,D.BM_MobileNo,I.BM_MobileNo,D.BM_EmailID,I.BM_EmailID,D.BM_Fax,I.BM_Fax,D.BM_Group,I.BM_Group,
D.BM_SubGroup,I.BM_SubGroup,D.BM_GL,I.BM_GL,I.BM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.BM_ID=I.BM_ID
			End

			IF(Select BM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,BM_IndType,nBM_IndType,BM_Name  ,nBM_Name  ,BM_Code  ,nBM_Code  ,BM_Inventry,nBM_Inventry,BM_Address,nBM_Address,
BM_State,nBM_State,BM_Pincode,nBM_Pincode,BM_Delflag,BM_CompID,BM_Status,nBM_Status,BM_ContactPerson  ,nBM_ContactPerson ,BM_City,nBM_City,
BM_LandLineNo,nBM_LandLineNo,BM_MobileNo,nBM_MobileNo,BM_EmailID,nBM_EmailID,BM_Fax,nBM_Fax,BM_Group,nBM_Group ,
BM_SubGroup ,nBM_SubGroup,BM_GL,nBM_GL,BM_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.BM_DeletedBy,I.BM_ID,D.BM_IndType,I.BM_IndType,D.BM_Name,I.BM_Name,D.BM_Code,I.BM_Code,D.BM_Inventry,I.BM_Inventry,D.BM_Address,I.BM_Address,
D.BM_State,I.BM_State,D.BM_Pincode,I.BM_Pincode,I.BM_Delflag,I.BM_CompID,D.BM_Status,I.BM_Status,D.BM_ContactPerson,I.BM_ContactPerson,
D.BM_City,I.BM_City,D.BM_LandLineNo,I.BM_LandLineNo,D.BM_MobileNo,I.BM_MobileNo,D.BM_EmailID,I.BM_EmailID,D.BM_Fax,I.BM_Fax,D.BM_Group,I.BM_Group,
D.BM_SubGroup,I.BM_SubGroup,D.BM_GL,I.BM_GL,I.BM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.BM_ID=I.BM_ID
			End

			IF(Select BM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,BM_IndType,nBM_IndType,BM_Name  ,nBM_Name  ,BM_Code  ,nBM_Code  ,BM_Inventry,nBM_Inventry,BM_Address,nBM_Address,
BM_State,nBM_State,BM_Pincode,nBM_Pincode,BM_Delflag,BM_CompID,BM_Status,nBM_Status,BM_ContactPerson  ,nBM_ContactPerson ,BM_City,nBM_City,
BM_LandLineNo,nBM_LandLineNo,BM_MobileNo,nBM_MobileNo,BM_EmailID,nBM_EmailID,BM_Fax,nBM_Fax,BM_Group,nBM_Group ,
BM_SubGroup ,nBM_SubGroup,BM_GL,nBM_GL,BM_IPAddress)
					SELECT 'De-Activated',I.BM_DeletedBy, I.BM_ID,D.BM_IndType,I.BM_IndType,D.BM_Name,I.BM_Name,D.BM_Code,I.BM_Code,D.BM_Inventry,I.BM_Inventry,D.BM_Address,I.BM_Address,
D.BM_State,I.BM_State,D.BM_Pincode,I.BM_Pincode,I.BM_Delflag,I.BM_CompID,D.BM_Status,I.BM_Status,D.BM_ContactPerson,I.BM_ContactPerson,
D.BM_City,I.BM_City,D.BM_LandLineNo,I.BM_LandLineNo,D.BM_MobileNo,I.BM_MobileNo,D.BM_EmailID,I.BM_EmailID,D.BM_Fax,I.BM_Fax,D.BM_Group,I.BM_Group,
D.BM_SubGroup,I.BM_SubGroup,D.BM_GL,I.BM_GL,I.BM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.BM_ID=I.BM_ID
			End								
			IF(Select BM_Status from Inserted)='R'
				BEGIN       
				INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,BM_IndType,nBM_IndType,BM_Name  ,nBM_Name  ,BM_Code  ,nBM_Code  ,BM_Inventry,nBM_Inventry,BM_Address,nBM_Address,
BM_State,nBM_State,BM_Pincode,nBM_Pincode,BM_Delflag,BM_CompID,BM_Status,nBM_Status,BM_ContactPerson  ,nBM_ContactPerson ,BM_City,nBM_City,
BM_LandLineNo,nBM_LandLineNo,BM_MobileNo,nBM_MobileNo,BM_EmailID,nBM_EmailID,BM_Fax,nBM_Fax,BM_Group,nBM_Group ,
BM_SubGroup ,nBM_SubGroup,BM_GL,nBM_GL,BM_IPAddress)
					SELECT 'Activated(Not Approved)',I.BM_RecalldBy,I.BM_ID,D.BM_IndType,I.BM_IndType,D.BM_Name,I.BM_Name,D.BM_Code,I.BM_Code,D.BM_Inventry,I.BM_Inventry,D.BM_Address,I.BM_Address,
D.BM_State,I.BM_State,D.BM_Pincode,I.BM_Pincode,I.BM_Delflag,I.BM_CompID,D.BM_Status,I.BM_Status,D.BM_ContactPerson,I.BM_ContactPerson,
D.BM_City,I.BM_City,D.BM_LandLineNo,I.BM_LandLineNo,D.BM_MobileNo,I.BM_MobileNo,D.BM_EmailID,I.BM_EmailID,D.BM_Fax,I.BM_Fax,D.BM_Group,I.BM_Group,
D.BM_SubGroup,I.BM_SubGroup,D.BM_GL,I.BM_GL,I.BM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.BM_ID=I.BM_ID
			End
			
			IF(Select BM_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,BM_IndType,nBM_IndType,BM_Name  ,nBM_Name  ,BM_Code  ,nBM_Code  ,BM_Inventry,nBM_Inventry,BM_Address,nBM_Address,
BM_State,nBM_State,BM_Pincode,nBM_Pincode,BM_Delflag,BM_CompID,BM_Status,nBM_Status,BM_ContactPerson  ,nBM_ContactPerson ,BM_City,nBM_City,
BM_LandLineNo,nBM_LandLineNo,BM_MobileNo,nBM_MobileNo,BM_EmailID,nBM_EmailID,BM_Fax,nBM_Fax,BM_Group,nBM_Group ,
BM_SubGroup ,nBM_SubGroup,BM_GL,nBM_GL,BM_IPAddress)
					SELECT 'Activated',I.BM_RecalldBy,I.BM_ID,D.BM_IndType,I.BM_IndType,D.BM_Name,I.BM_Name,D.BM_Code,I.BM_Code,D.BM_Inventry,I.BM_Inventry,D.BM_Address,I.BM_Address,
D.BM_State,I.BM_State,D.BM_Pincode,I.BM_Pincode,I.BM_Delflag,I.BM_CompID,D.BM_Status,I.BM_Status,D.BM_ContactPerson,I.BM_ContactPerson,
D.BM_City,I.BM_City,D.BM_LandLineNo,I.BM_LandLineNo,D.BM_MobileNo,I.BM_MobileNo,D.BM_EmailID,I.BM_EmailID,D.BM_Fax,I.BM_Fax,D.BM_Group,I.BM_Group,
D.BM_SubGroup,I.BM_SubGroup,D.BM_GL,I.BM_GL,I.BM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.BM_ID=I.BM_ID
			End																		
		END
	ELSE
		BEGIN  
			INSERT INTO Sales_Buyers_Masters_Log
(Log_Operation,Log_UserID,BM_ID,nBM_IndType,nBM_Name,nBM_Code,nBM_Inventry,nBM_Address,
nBM_State,nBM_Pincode,BM_Delflag,BM_CompID,nBM_Status,nBM_ContactPerson ,nBM_City,
nBM_LandLineNo,nBM_MobileNo,nBM_EmailID,nBM_Fax,nBM_Group ,nBM_SubGroup,nBM_GL,BM_IPAddress)
SELECT 'Created',BM_CreatedBy,BM_ID,BM_IndType,BM_Name,BM_Code,BM_Inventry,BM_Address,
BM_State,BM_Pincode,BM_Delflag,BM_CompID,BM_Status,BM_ContactPerson,
BM_City,BM_LandLineNo,BM_MobileNo,BM_EmailID,BM_Fax,BM_Group,
BM_SubGroup,BM_GL,BM_IPAddress
 			 FROM Inserted
		END
	END 
/

create trigger chart_of_accounts_Log_Trigger On chart_of_Accounts For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select gl_Status from Inserted)='U'
				BEGIN       
				INSERT INTO chart_of_accounts_Log
(Log_Operation,Log_UserID,gl_id,gl_glcode,ngl_glcode,gl_parent,ngl_parent,gl_desc,ngl_desc,gl_head,ngl_head,gl_subglexist,ngl_subglexist,
gl_delflag,gl_AccHead,ngl_AccHead,gl_reason_Creation,ngl_reason_Creation,gl_SortOrder,ngl_SortOrder,gl_CompId,gl_Status,gl_AccType,
ngl_AccType,gl_orderby ,ngl_orderby ,gl_reason,ngl_reason  ,gl_IPAddress)
SELECT 'Updated',I.gl_UpdatedBy,I.gl_id,D.gl_glcode,I.gl_glcode,D.gl_parent,I.gl_parent,D.gl_desc,I.gl_desc,D.gl_head,I.gl_head,D.gl_subglexist,I.gl_subglexist,
I.gl_delflag,D.gl_AccHead,I.gl_AccHead,D.gl_reason_Creation,I.gl_reason_Creation,D.gl_SortOrder,I.gl_SortOrder,I.gl_CompId,I.gl_Status,
D.gl_AccType,I.gl_AccType,D.gl_orderby,I.gl_orderby,D.gl_reason,I.gl_reason,I.gl_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.gl_id=I.gl_id
			End	
			
IF(Select gl_Status from Inserted)='A'
				BEGIN       
				INSERT INTO chart_of_accounts_Log
(Log_Operation,Log_UserID,gl_id,gl_glcode,ngl_glcode,gl_parent,ngl_parent,gl_desc,ngl_desc,gl_head,ngl_head,gl_subglexist,ngl_subglexist,
gl_delflag,gl_AccHead,ngl_AccHead,gl_reason_Creation,ngl_reason_Creation,gl_SortOrder,ngl_SortOrder,gl_CompId,gl_Status,gl_AccType,
ngl_AccType,gl_orderby ,ngl_orderby ,gl_reason,ngl_reason  ,gl_IPAddress)
					SELECT 'Approved',I.gl_AppBy, I.gl_id,D.gl_glcode,I.gl_glcode,D.gl_parent,I.gl_parent,D.gl_desc,I.gl_desc,D.gl_head,I.gl_head,D.gl_subglexist,I.gl_subglexist,
I.gl_delflag,D.gl_AccHead,I.gl_AccHead,D.gl_reason_Creation,I.gl_reason_Creation,D.gl_SortOrder,I.gl_SortOrder,I.gl_CompId,I.gl_Status,
D.gl_AccType,I.gl_AccType,D.gl_orderby,I.gl_orderby,D.gl_reason,I.gl_reason,I.gl_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.gl_id=I.gl_id
			End							
																	
		END
	ELSE
		BEGIN  
			INSERT INTO chart_of_accounts_Log
(Log_Operation,Log_UserID,gl_id,ngl_glcode,ngl_parent,ngl_desc,ngl_head,ngl_subglexist,
gl_delflag,ngl_AccHead,ngl_reason_Creation,ngl_SortOrder,gl_CompId,gl_Status,
ngl_AccType,ngl_orderby,ngl_reason ,gl_IPAddress)
SELECT 'Created',gl_CrBy,gl_id,gl_glcode,gl_parent,gl_desc,gl_head,gl_subglexist,
gl_delflag,gl_AccHead,gl_reason_Creation,gl_SortOrder,gl_CompId,gl_Status,
gl_AccType,gl_orderby,gl_reason,gl_IPAddress
 			 FROM Inserted
		END
	END 

/

create trigger CustomerSupplierMaster_Log_Trigger On CustomerSupplierMaster For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select CSM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,CSM_IndType,nCSM_IndType,CSM_Name ,nCSM_Name ,CSM_Code ,nCSM_Code ,CSM_Inventry,nCSM_Inventry,CSM_ContactPerson ,
nCSM_ContactPerson ,CSM_EmailID ,nCSM_EmailID,CSM_MobileNo,nCSM_MobileNo,CSM_LandLineNo,nCSM_LandLineNo,CSM_Fax,nCSM_Fax,CSM_Address,nCSM_Address ,
CSM_Pincode,nCSM_Pincode,CSM_City,nCSM_City,CSM_State,nCSM_State,CSM_Delflag,CSM_CompID,CSM_Status,nCSM_Status,CSM_ProductDescription,
nCSM_ProductDescription,CSM_Group,nCSM_Group,CSM_SubGroup,nCSM_SubGroup,CSM_GL,nCSM_GL,CSM_IPAddress)
SELECT 'Updated',I.CSM_UpdatedBy,I.CSM_ID,D.CSM_IndType,I.CSM_IndType,D.CSM_Name,I.CSM_Name,D.CSM_Code,I.CSM_Code,D.CSM_Inventry,I.CSM_Inventry,
D.CSM_ContactPerson,I.CSM_ContactPerson,D.CSM_EmailID,I.CSM_EmailID,D.CSM_MobileNo,I.CSM_MobileNo,D.CSM_LandLineNo,I.CSM_LandLineNo,D.CSM_Fax,
I.CSM_Fax,D.CSM_Address,I.CSM_Address,D.CSM_PinCode,I.CSM_PinCode,D.CSM_City,I.CSM_City,D.CSM_State,I.CSM_State,I.CSM_Delflag,I.CSM_CompID,
D.CSM_Status,I.CSM_Status,D.CSM_ProductDescription,I.CSM_ProductDescription,D.CSM_Group,I.CSM_Group,D.CSM_SubGroup,I.CSM_SubGroup,D.CSM_GL,I.CSM_GL,
I.CSM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.CSM_ID=I.CSM_ID
			End	
			
IF(Select CSM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,CSM_IndType,nCSM_IndType,CSM_Name ,nCSM_Name ,CSM_Code ,nCSM_Code ,CSM_Inventry,nCSM_Inventry,CSM_ContactPerson ,
nCSM_ContactPerson ,CSM_EmailID ,nCSM_EmailID,CSM_MobileNo,nCSM_MobileNo,CSM_LandLineNo,nCSM_LandLineNo,CSM_Fax,nCSM_Fax,CSM_Address,nCSM_Address ,
CSM_Pincode,nCSM_Pincode,CSM_City,nCSM_City,CSM_State,nCSM_State,CSM_Delflag,CSM_CompID,CSM_Status,nCSM_Status,CSM_ProductDescription,
nCSM_ProductDescription,CSM_Group,nCSM_Group,CSM_SubGroup,nCSM_SubGroup,CSM_GL,nCSM_GL,CSM_IPAddress)
					SELECT 'Approved',I.CSM_ApprovedBy, I.CSM_ID,D.CSM_IndType,I.CSM_IndType,D.CSM_Name,I.CSM_Name,D.CSM_Code,I.CSM_Code,D.CSM_Inventry,I.CSM_Inventry,
D.CSM_ContactPerson,I.CSM_ContactPerson,D.CSM_EmailID,I.CSM_EmailID,D.CSM_MobileNo,I.CSM_MobileNo,D.CSM_LandLineNo,I.CSM_LandLineNo,D.CSM_Fax,
I.CSM_Fax,D.CSM_Address,I.CSM_Address,D.CSM_PinCode,I.CSM_PinCode,D.CSM_City,I.CSM_City,D.CSM_State,I.CSM_State,I.CSM_Delflag,I.CSM_CompID,
D.CSM_Status,I.CSM_Status,D.CSM_ProductDescription,I.CSM_ProductDescription,D.CSM_Group,I.CSM_Group,D.CSM_SubGroup,I.CSM_SubGroup,D.CSM_GL,I.CSM_GL,
I.CSM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.CSM_ID=I.CSM_ID
			End				
	IF(Select CSM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,CSM_IndType,nCSM_IndType,CSM_Name ,nCSM_Name ,CSM_Code ,nCSM_Code ,CSM_Inventry,nCSM_Inventry,CSM_ContactPerson ,
nCSM_ContactPerson ,CSM_EmailID ,nCSM_EmailID,CSM_MobileNo,nCSM_MobileNo,CSM_LandLineNo,nCSM_LandLineNo,CSM_Fax,nCSM_Fax,CSM_Address,nCSM_Address ,
CSM_Pincode,nCSM_Pincode,CSM_City,nCSM_City,CSM_State,nCSM_State,CSM_Delflag,CSM_CompID,CSM_Status,nCSM_Status,CSM_ProductDescription,
nCSM_ProductDescription,CSM_Group,nCSM_Group,CSM_SubGroup,nCSM_SubGroup,CSM_GL,nCSM_GL,CSM_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.CSM_DeletedBy,I.CSM_ID,D.CSM_IndType,I.CSM_IndType,D.CSM_Name,I.CSM_Name,D.CSM_Code,I.CSM_Code,D.CSM_Inventry,I.CSM_Inventry,
D.CSM_ContactPerson,I.CSM_ContactPerson,D.CSM_EmailID,I.CSM_EmailID,D.CSM_MobileNo,I.CSM_MobileNo,D.CSM_LandLineNo,I.CSM_LandLineNo,D.CSM_Fax,
I.CSM_Fax,D.CSM_Address,I.CSM_Address,D.CSM_PinCode,I.CSM_PinCode,D.CSM_City,I.CSM_City,D.CSM_State,I.CSM_State,I.CSM_Delflag,I.CSM_CompID,
D.CSM_Status,I.CSM_Status,D.CSM_ProductDescription,I.CSM_ProductDescription,D.CSM_Group,I.CSM_Group,D.CSM_SubGroup,I.CSM_SubGroup,D.CSM_GL,I.CSM_GL,
I.CSM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.CSM_ID=I.CSM_ID
			End

			IF(Select CSM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,CSM_IndType,nCSM_IndType,CSM_Name ,nCSM_Name ,CSM_Code ,nCSM_Code ,CSM_Inventry,nCSM_Inventry,CSM_ContactPerson ,
nCSM_ContactPerson ,CSM_EmailID ,nCSM_EmailID,CSM_MobileNo,nCSM_MobileNo,CSM_LandLineNo,nCSM_LandLineNo,CSM_Fax,nCSM_Fax,CSM_Address,nCSM_Address ,
CSM_Pincode,nCSM_Pincode,CSM_City,nCSM_City,CSM_State,nCSM_State,CSM_Delflag,CSM_CompID,CSM_Status,nCSM_Status,CSM_ProductDescription,
nCSM_ProductDescription,CSM_Group,nCSM_Group,CSM_SubGroup,nCSM_SubGroup,CSM_GL,nCSM_GL,CSM_IPAddress)
					SELECT 'De-Activated',I.CSM_DeletedBy, I.CSM_ID,D.CSM_IndType,I.CSM_IndType,D.CSM_Name,I.CSM_Name,D.CSM_Code,I.CSM_Code,D.CSM_Inventry,I.CSM_Inventry,
D.CSM_ContactPerson,I.CSM_ContactPerson,D.CSM_EmailID,I.CSM_EmailID,D.CSM_MobileNo,I.CSM_MobileNo,D.CSM_LandLineNo,I.CSM_LandLineNo,D.CSM_Fax,
I.CSM_Fax,D.CSM_Address,I.CSM_Address,D.CSM_PinCode,I.CSM_PinCode,D.CSM_City,I.CSM_City,D.CSM_State,I.CSM_State,I.CSM_Delflag,I.CSM_CompID,
D.CSM_Status,I.CSM_Status,D.CSM_ProductDescription,I.CSM_ProductDescription,D.CSM_Group,I.CSM_Group,D.CSM_SubGroup,I.CSM_SubGroup,D.CSM_GL,I.CSM_GL,
I.CSM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.CSM_ID=I.CSM_ID
			End								
			IF(Select CSM_Status from Inserted)='R'
				BEGIN       
				INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,CSM_IndType,nCSM_IndType,CSM_Name ,nCSM_Name ,CSM_Code ,nCSM_Code ,CSM_Inventry,nCSM_Inventry,CSM_ContactPerson ,
nCSM_ContactPerson ,CSM_EmailID ,nCSM_EmailID,CSM_MobileNo,nCSM_MobileNo,CSM_LandLineNo,nCSM_LandLineNo,CSM_Fax,nCSM_Fax,CSM_Address,nCSM_Address ,
CSM_Pincode,nCSM_Pincode,CSM_City,nCSM_City,CSM_State,nCSM_State,CSM_Delflag,CSM_CompID,CSM_Status,nCSM_Status,CSM_ProductDescription,
nCSM_ProductDescription,CSM_Group,nCSM_Group,CSM_SubGroup,nCSM_SubGroup,CSM_GL,nCSM_GL,CSM_IPAddress)
					SELECT 'Activated(Not Approved)',I.CSM_RecalldBy,I.CSM_ID,D.CSM_IndType,I.CSM_IndType,D.CSM_Name,I.CSM_Name,D.CSM_Code,I.CSM_Code,D.CSM_Inventry,I.CSM_Inventry,
D.CSM_ContactPerson,I.CSM_ContactPerson,D.CSM_EmailID,I.CSM_EmailID,D.CSM_MobileNo,I.CSM_MobileNo,D.CSM_LandLineNo,I.CSM_LandLineNo,D.CSM_Fax,
I.CSM_Fax,D.CSM_Address,I.CSM_Address,D.CSM_PinCode,I.CSM_PinCode,D.CSM_City,I.CSM_City,D.CSM_State,I.CSM_State,I.CSM_Delflag,I.CSM_CompID,
D.CSM_Status,I.CSM_Status,D.CSM_ProductDescription,I.CSM_ProductDescription,D.CSM_Group,I.CSM_Group,D.CSM_SubGroup,I.CSM_SubGroup,D.CSM_GL,I.CSM_GL,
I.CSM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.CSM_ID=I.CSM_ID
			End
			
			IF(Select CSM_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,CSM_IndType,nCSM_IndType,CSM_Name ,nCSM_Name ,CSM_Code ,nCSM_Code ,CSM_Inventry,nCSM_Inventry,CSM_ContactPerson ,
nCSM_ContactPerson ,CSM_EmailID ,nCSM_EmailID,CSM_MobileNo,nCSM_MobileNo,CSM_LandLineNo,nCSM_LandLineNo,CSM_Fax,nCSM_Fax,CSM_Address,nCSM_Address ,
CSM_Pincode,nCSM_Pincode,CSM_City,nCSM_City,CSM_State,nCSM_State,CSM_Delflag,CSM_CompID,CSM_Status,nCSM_Status,CSM_ProductDescription,
nCSM_ProductDescription,CSM_Group,nCSM_Group,CSM_SubGroup,nCSM_SubGroup,CSM_GL,nCSM_GL,CSM_IPAddress)
					SELECT 'Activated',I.CSM_RecalldBy,I.CSM_ID,D.CSM_IndType,I.CSM_IndType,D.CSM_Name,I.CSM_Name,D.CSM_Code,I.CSM_Code,D.CSM_Inventry,I.CSM_Inventry,
D.CSM_ContactPerson,I.CSM_ContactPerson,D.CSM_EmailID,I.CSM_EmailID,D.CSM_MobileNo,I.CSM_MobileNo,D.CSM_LandLineNo,I.CSM_LandLineNo,D.CSM_Fax,
I.CSM_Fax,D.CSM_Address,I.CSM_Address,D.CSM_PinCode,I.CSM_PinCode,D.CSM_City,I.CSM_City,D.CSM_State,I.CSM_State,I.CSM_Delflag,I.CSM_CompID,
D.CSM_Status,I.CSM_Status,D.CSM_ProductDescription,I.CSM_ProductDescription,D.CSM_Group,I.CSM_Group,D.CSM_SubGroup,I.CSM_SubGroup,D.CSM_GL,I.CSM_GL,
I.CSM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.CSM_ID=I.CSM_ID
			End					
																			
		END
	ELSE
		BEGIN  
			INSERT INTO CustomerSupplierMaster_Log
(Log_Operation,Log_UserID,CSM_ID,nCSM_IndType,nCSM_Name ,nCSM_Code ,nCSM_Inventry,
nCSM_ContactPerson ,nCSM_EmailID,nCSM_MobileNo,nCSM_LandLineNo,nCSM_Fax,nCSM_Address ,
nCSM_Pincode,nCSM_City,nCSM_State,CSM_Delflag,CSM_CompID,nCSM_Status,
nCSM_ProductDescription,nCSM_Group,nCSM_SubGroup,nCSM_GL,CSM_IPAddress)
SELECT 'Created',CSM_CreatedBy,CSM_ID,CSM_IndType,CSM_Name,CSM_Code,CSM_Inventry,
CSM_ContactPerson,CSM_EmailID,CSM_MobileNo,CSM_LandLineNo,CSM_Fax,CSM_Address,CSM_PinCode,CSM_City,CSM_State,CSM_Delflag,CSM_CompID,
CSM_Status,CSM_ProductDescription,CSM_Group,CSM_SubGroup,CSM_GL,CSM_IPAddress
 			 FROM Inserted
		END
	END 

/

create trigger Inventory_Master_History_Log_Trigger On Inventory_Master_History For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select InvH_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,nInvH_Unit,InvH_AlterUnit,nInvH_AlterUnit,InvH_Price,nInvH_Price,InvH_Excise,
nInvH_Excise,InvH_Vat,nInvH_Vat,InvH_CompID  ,InvH_PerPieces  ,nInvH_PerPieces  ,INVH_MRP  ,nINVH_MRP  ,INVH_Retail  ,nINVH_Retail  ,
INVH_PreDeterminedPrice  ,nINVH_PreDeterminedPrice  ,INVH_EffeFrom  ,nINVH_EffeFrom  ,INVH_EffeTo  ,nINVH_EffeTo  ,INVH_Others  ,nINVH_Others  ,
TMD_HistoryID  ,nTMD_HistoryID  ,InvH_Color  ,nInvH_Color  ,InvH_Size  ,nInvH_Size  ,InvH_Cst  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
SELECT 'Updated',I.InvH_UpdatedBy,I.InvH_ID,I.InvH_INV_ID,I.InvH_Flag,D.InvH_Unit,I.InvH_Unit,D.InvH_AlterUnit,I.InvH_AlterUnit,D.InvH_Price,I.InvH_Price,
D.InvH_Excise,I.InvH_Excise,D.InvH_Vat,I.InvH_Vat,I.InvH_CompID,D.InvH_PerPieces,I.InvH_PerPieces,D.INVH_MRP,I.INVH_MRP,D.INVH_Retail,I.INVH_Retail,
D.INVH_PreDeterminedPrice ,I.INVH_PreDeterminedPrice ,D.INVH_EffeFrom,I.INVH_EffeFrom,D.INVH_EffeTo,I.INVH_EffeTo,D.INVH_Others,I.INVH_Others ,
D.TMD_HistoryID ,I.TMD_HistoryID ,D.InvH_Color ,I.InvH_Color ,D.InvH_Size,I.InvH_Size ,D.InvH_Cst,I.InvH_Cst ,I.InvH_IPAddress,I.InvH_Status 
 FROM Inserted I Inner Join Deleted D ON D.InvH_ID=I.InvH_ID
			End	
			
IF(Select InvH_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,nInvH_Unit,InvH_AlterUnit,nInvH_AlterUnit,InvH_Price,nInvH_Price,InvH_Excise,
nInvH_Excise,InvH_Vat,nInvH_Vat,InvH_CompID  ,InvH_PerPieces  ,nInvH_PerPieces  ,INVH_MRP  ,nINVH_MRP  ,INVH_Retail  ,nINVH_Retail  ,
INVH_PreDeterminedPrice  ,nINVH_PreDeterminedPrice  ,INVH_EffeFrom  ,nINVH_EffeFrom  ,INVH_EffeTo  ,nINVH_EffeTo  ,INVH_Others  ,nINVH_Others  ,
TMD_HistoryID  ,nTMD_HistoryID  ,InvH_Color  ,nInvH_Color  ,InvH_Size  ,nInvH_Size  ,InvH_Cst  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
					SELECT 'Approved',I.InvH_ApporvedBy, I.InvH_ID,I.InvH_INV_ID,I.InvH_Flag,D.InvH_Unit,I.InvH_Unit,D.InvH_AlterUnit,I.InvH_AlterUnit,D.InvH_Price,I.InvH_Price,
D.InvH_Excise,I.InvH_Excise,D.InvH_Vat,I.InvH_Vat,I.InvH_CompID,D.InvH_PerPieces,I.InvH_PerPieces,D.INVH_MRP,I.INVH_MRP,D.INVH_Retail,I.INVH_Retail,
D.INVH_PreDeterminedPrice ,I.INVH_PreDeterminedPrice ,D.INVH_EffeFrom,I.INVH_EffeFrom,D.INVH_EffeTo,I.INVH_EffeTo,D.INVH_Others,I.INVH_Others ,
D.TMD_HistoryID ,I.TMD_HistoryID ,D.InvH_Color ,I.InvH_Color ,D.InvH_Size,I.InvH_Size ,D.InvH_Cst,I.InvH_Cst ,I.InvH_IPAddress,I.InvH_Status 
 FROM Inserted I Inner Join Deleted D ON D.InvH_ID=I.InvH_ID
			End				
	IF(Select InvH_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,nInvH_Unit,InvH_AlterUnit,nInvH_AlterUnit,InvH_Price,nInvH_Price,InvH_Excise,
nInvH_Excise,InvH_Vat,nInvH_Vat,InvH_CompID  ,InvH_PerPieces  ,nInvH_PerPieces  ,INVH_MRP  ,nINVH_MRP  ,INVH_Retail  ,nINVH_Retail  ,
INVH_PreDeterminedPrice  ,nINVH_PreDeterminedPrice  ,INVH_EffeFrom  ,nINVH_EffeFrom  ,INVH_EffeTo  ,nINVH_EffeTo  ,INVH_Others  ,nINVH_Others  ,
TMD_HistoryID  ,nTMD_HistoryID  ,InvH_Color  ,nInvH_Color  ,InvH_Size  ,nInvH_Size  ,InvH_Cst  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
					SELECT 'De-Activated(Not Approved)',I.InvH_DeletedBy,I.InvH_ID,I.InvH_INV_ID,I.InvH_Flag,D.InvH_Unit,I.InvH_Unit,D.InvH_AlterUnit,I.InvH_AlterUnit,D.InvH_Price,I.InvH_Price,
D.InvH_Excise,I.InvH_Excise,D.InvH_Vat,I.InvH_Vat,I.InvH_CompID,D.InvH_PerPieces,I.InvH_PerPieces,D.INVH_MRP,I.INVH_MRP,D.INVH_Retail,I.INVH_Retail,
D.INVH_PreDeterminedPrice ,I.INVH_PreDeterminedPrice ,D.INVH_EffeFrom,I.INVH_EffeFrom,D.INVH_EffeTo,I.INVH_EffeTo,D.INVH_Others,I.INVH_Others ,
D.TMD_HistoryID ,I.TMD_HistoryID ,D.InvH_Color ,I.InvH_Color ,D.InvH_Size,I.InvH_Size ,D.InvH_Cst,I.InvH_Cst ,I.InvH_IPAddress,I.InvH_Status 
 FROM Inserted I Inner Join Deleted D ON D.InvH_ID=I.InvH_ID
			End

			IF(Select InvH_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,nInvH_Unit,InvH_AlterUnit,nInvH_AlterUnit,InvH_Price,nInvH_Price,InvH_Excise,
nInvH_Excise,InvH_Vat,nInvH_Vat,InvH_CompID  ,InvH_PerPieces  ,nInvH_PerPieces  ,INVH_MRP  ,nINVH_MRP  ,INVH_Retail  ,nINVH_Retail  ,
INVH_PreDeterminedPrice  ,nINVH_PreDeterminedPrice  ,INVH_EffeFrom  ,nINVH_EffeFrom  ,INVH_EffeTo  ,nINVH_EffeTo  ,INVH_Others  ,nINVH_Others  ,
TMD_HistoryID  ,nTMD_HistoryID  ,InvH_Color  ,nInvH_Color  ,InvH_Size  ,nInvH_Size  ,InvH_Cst  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
					SELECT 'De-Activated',I.InvH_DeletedBy, I.InvH_ID,I.InvH_INV_ID,I.InvH_Flag,D.InvH_Unit,I.InvH_Unit,D.InvH_AlterUnit,I.InvH_AlterUnit,D.InvH_Price,I.InvH_Price,
D.InvH_Excise,I.InvH_Excise,D.InvH_Vat,I.InvH_Vat,I.InvH_CompID,D.InvH_PerPieces,I.InvH_PerPieces,D.INVH_MRP,I.INVH_MRP,D.INVH_Retail,I.INVH_Retail,
D.INVH_PreDeterminedPrice ,I.INVH_PreDeterminedPrice ,D.INVH_EffeFrom,I.INVH_EffeFrom,D.INVH_EffeTo,I.INVH_EffeTo,D.INVH_Others,I.INVH_Others ,
D.TMD_HistoryID ,I.TMD_HistoryID ,D.InvH_Color ,I.InvH_Color ,D.InvH_Size,I.InvH_Size ,D.InvH_Cst,I.InvH_Cst ,I.InvH_IPAddress,I.InvH_Status 
 FROM Inserted I Inner Join Deleted D ON D.InvH_ID=I.InvH_ID
			End								
			IF(Select InvH_Status from Inserted)='R'
				BEGIN       
				INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,nInvH_Unit,InvH_AlterUnit,nInvH_AlterUnit,InvH_Price,nInvH_Price,InvH_Excise,
nInvH_Excise,InvH_Vat,nInvH_Vat,InvH_CompID  ,InvH_PerPieces  ,nInvH_PerPieces  ,INVH_MRP  ,nINVH_MRP  ,INVH_Retail  ,nINVH_Retail  ,
INVH_PreDeterminedPrice  ,nINVH_PreDeterminedPrice  ,INVH_EffeFrom  ,nINVH_EffeFrom  ,INVH_EffeTo  ,nINVH_EffeTo  ,INVH_Others  ,nINVH_Others  ,
TMD_HistoryID  ,nTMD_HistoryID  ,InvH_Color  ,nInvH_Color  ,InvH_Size  ,nInvH_Size  ,InvH_Cst  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
					SELECT 'Activated(Not Approved)',I.InvH_RecallBy,I.InvH_ID,I.InvH_INV_ID,I.InvH_Flag,D.InvH_Unit,I.InvH_Unit,D.InvH_AlterUnit,I.InvH_AlterUnit,D.InvH_Price,I.InvH_Price,
D.InvH_Excise,I.InvH_Excise,D.InvH_Vat,I.InvH_Vat,I.InvH_CompID,D.InvH_PerPieces,I.InvH_PerPieces,D.INVH_MRP,I.INVH_MRP,D.INVH_Retail,I.INVH_Retail,
D.INVH_PreDeterminedPrice ,I.INVH_PreDeterminedPrice ,D.INVH_EffeFrom,I.INVH_EffeFrom,D.INVH_EffeTo,I.INVH_EffeTo,D.INVH_Others,I.INVH_Others ,
D.TMD_HistoryID ,I.TMD_HistoryID ,D.InvH_Color ,I.InvH_Color ,D.InvH_Size,I.InvH_Size ,D.InvH_Cst,I.InvH_Cst ,I.InvH_IPAddress,I.InvH_Status 
 FROM Inserted I Inner Join Deleted D ON D.InvH_ID=I.InvH_ID
			End
			
			IF(Select InvH_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,nInvH_Unit,InvH_AlterUnit,nInvH_AlterUnit,InvH_Price,nInvH_Price,InvH_Excise,
nInvH_Excise,InvH_Vat,nInvH_Vat,InvH_CompID  ,InvH_PerPieces  ,nInvH_PerPieces  ,INVH_MRP  ,nINVH_MRP  ,INVH_Retail  ,nINVH_Retail  ,
INVH_PreDeterminedPrice  ,nINVH_PreDeterminedPrice  ,INVH_EffeFrom  ,nINVH_EffeFrom  ,INVH_EffeTo  ,nINVH_EffeTo  ,INVH_Others  ,nINVH_Others  ,
TMD_HistoryID  ,nTMD_HistoryID  ,InvH_Color  ,nInvH_Color  ,InvH_Size  ,nInvH_Size  ,InvH_Cst  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
					SELECT 'Activated',I.InvH_RecallBy,I.InvH_ID,I.InvH_INV_ID,I.InvH_Flag,D.InvH_Unit,I.InvH_Unit,D.InvH_AlterUnit,I.InvH_AlterUnit,D.InvH_Price,I.InvH_Price,
D.InvH_Excise,I.InvH_Excise,D.InvH_Vat,I.InvH_Vat,I.InvH_CompID,D.InvH_PerPieces,I.InvH_PerPieces,D.INVH_MRP,I.INVH_MRP,D.INVH_Retail,I.INVH_Retail,
D.INVH_PreDeterminedPrice ,I.INVH_PreDeterminedPrice ,D.INVH_EffeFrom,I.INVH_EffeFrom,D.INVH_EffeTo,I.INVH_EffeTo,D.INVH_Others,I.INVH_Others ,
D.TMD_HistoryID ,I.TMD_HistoryID ,D.InvH_Color ,I.InvH_Color ,D.InvH_Size,I.InvH_Size ,D.InvH_Cst,I.InvH_Cst ,I.InvH_IPAddress,I.InvH_Status 
 FROM Inserted I Inner Join Deleted D ON D.InvH_ID=I.InvH_ID
			End					
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Inventory_Master_History_Log
(Log_Operation,Log_UserID,InvH_ID,InvH_INV_ID,InvH_Flag,nInvH_Unit,nInvH_AlterUnit,nInvH_Price,
nInvH_Excise,nInvH_Vat,InvH_CompID  ,nInvH_PerPieces  ,nINVH_MRP  ,nINVH_Retail  ,
nINVH_PreDeterminedPrice  ,nINVH_EffeFrom  ,nINVH_EffeTo  ,nINVH_Others  ,
nTMD_HistoryID  ,nInvH_Color  ,nInvH_Size  ,nInvH_Cst  ,InvH_IPAddress  ,InvH_Status)
SELECT 'Created',InvH_CreatedBy,InvH_ID,InvH_INV_ID,InvH_Flag,InvH_Unit,InvH_AlterUnit,InvH_Price,
InvH_Excise,InvH_Vat,InvH_CompID,InvH_PerPieces,INVH_MRP,INVH_Retail,
INVH_PreDeterminedPrice ,INVH_EffeFrom,INVH_EffeTo,INVH_Others ,
TMD_HistoryID ,InvH_Color ,InvH_Size ,InvH_Cst ,InvH_IPAddress,InvH_Status 
 			 FROM Inserted
		END
	END 

/
create trigger Inventory_Master_Log_Trigger On Inventory_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select Inv_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,Inv_Code ,nInv_Code ,Inv_Description ,nInv_Description ,Inv_Parent ,nInv_Parent ,Inv_Flag ,Inv_Unit ,
nInv_Unit ,Inv_AlterUnit ,nInv_AlterUnit ,Inv_Price,nInv_Price,Inv_Excise ,nInv_Excise ,Inv_Vat ,nInv_Vat ,Inv_CompID ,Inv_PerPieces ,
nInv_PerPieces ,INV_MRP,nINV_MRP,INV_Retail,nINV_Retail,INV_PreDeterminedPrice,nINV_PreDeterminedPrice,INV_EffeFrom ,nINV_EffeFrom ,
INV_EffeTo ,nINV_EffeTo ,INV_Others,nINV_Others,Inv_Size,nInv_Size ,Inv_Color ,nInv_Color ,Inv_Acode ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
SELECT 'Updated',I.Inv_UpdatedBy,I.Inv_ID,D.Inv_Code,I.Inv_Code, D.Inv_Description,I.Inv_Description,D.Inv_Parent ,I.Inv_Parent ,I.Inv_Flag,
D.Inv_Unit,I.Inv_Unit,D.Inv_AlterUnit,I.Inv_AlterUnit,D.Inv_Price,I.Inv_Price,D.Inv_Excise ,I.Inv_Excise ,D.Inv_Vat,I.Inv_Vat,I.Inv_CompID,
D.Inv_PerPieces,I.Inv_PerPieces,D.INV_MRP,I.INV_MRP,D.INV_Retail,I.INV_Retail,D.INV_PreDeterminedPrice,I.INV_PreDeterminedPrice,D.INV_EffeFrom,I.INV_EffeFrom,
D.INV_EffeTo,I.INV_EffeTo,D.INV_Others,I.INV_Others,D.Inv_Size,I.Inv_Size,D.Inv_Color,I.Inv_Color,D.Inv_Acode,I.Inv_Acode,I.Inv_IPAddress,I.Inv_Status
 FROM Inserted I Inner Join Deleted D ON D.Inv_ID=I.Inv_ID
			End	
			
IF(Select Inv_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,Inv_Code ,nInv_Code ,Inv_Description ,nInv_Description ,Inv_Parent ,nInv_Parent ,Inv_Flag ,Inv_Unit ,
nInv_Unit ,Inv_AlterUnit ,nInv_AlterUnit ,Inv_Price,nInv_Price,Inv_Excise ,nInv_Excise ,Inv_Vat ,nInv_Vat ,Inv_CompID ,Inv_PerPieces ,
nInv_PerPieces ,INV_MRP,nINV_MRP,INV_Retail,nINV_Retail,INV_PreDeterminedPrice,nINV_PreDeterminedPrice,INV_EffeFrom ,nINV_EffeFrom ,
INV_EffeTo ,nINV_EffeTo ,INV_Others,nINV_Others,Inv_Size,nInv_Size ,Inv_Color ,nInv_Color ,Inv_Acode ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
					SELECT 'Approved',I.Inv_ApporvedBy, I.Inv_ID,D.Inv_Code,I.Inv_Code, D.Inv_Description,I.Inv_Description,D.Inv_Parent ,I.Inv_Parent ,I.Inv_Flag,
D.Inv_Unit,I.Inv_Unit,D.Inv_AlterUnit,I.Inv_AlterUnit,D.Inv_Price,I.Inv_Price,D.Inv_Excise ,I.Inv_Excise ,D.Inv_Vat,I.Inv_Vat,I.Inv_CompID,
D.Inv_PerPieces,I.Inv_PerPieces,D.INV_MRP,I.INV_MRP,D.INV_Retail,I.INV_Retail,D.INV_PreDeterminedPrice,I.INV_PreDeterminedPrice,D.INV_EffeFrom,I.INV_EffeFrom,
D.INV_EffeTo,I.INV_EffeTo,D.INV_Others,I.INV_Others,D.Inv_Size,I.Inv_Size,D.Inv_Color,I.Inv_Color,D.Inv_Acode,I.Inv_Acode,I.Inv_IPAddress,I.Inv_Status
 FROM Inserted I Inner Join Deleted D ON D.Inv_ID=I.Inv_ID
			End				
	IF(Select Inv_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,Inv_Code ,nInv_Code ,Inv_Description ,nInv_Description ,Inv_Parent ,nInv_Parent ,Inv_Flag ,Inv_Unit ,
nInv_Unit ,Inv_AlterUnit ,nInv_AlterUnit ,Inv_Price,nInv_Price,Inv_Excise ,nInv_Excise ,Inv_Vat ,nInv_Vat ,Inv_CompID ,Inv_PerPieces ,
nInv_PerPieces ,INV_MRP,nINV_MRP,INV_Retail,nINV_Retail,INV_PreDeterminedPrice,nINV_PreDeterminedPrice,INV_EffeFrom ,nINV_EffeFrom ,
INV_EffeTo ,nINV_EffeTo ,INV_Others,nINV_Others,Inv_Size,nInv_Size ,Inv_Color ,nInv_Color ,Inv_Acode ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
					SELECT 'De-Activated(Not Approved)',I.Inv_DeletedBy,I.Inv_ID,D.Inv_Code,I.Inv_Code, D.Inv_Description,I.Inv_Description,D.Inv_Parent ,I.Inv_Parent ,I.Inv_Flag,
D.Inv_Unit,I.Inv_Unit,D.Inv_AlterUnit,I.Inv_AlterUnit,D.Inv_Price,I.Inv_Price,D.Inv_Excise ,I.Inv_Excise ,D.Inv_Vat,I.Inv_Vat,I.Inv_CompID,
D.Inv_PerPieces,I.Inv_PerPieces,D.INV_MRP,I.INV_MRP,D.INV_Retail,I.INV_Retail,D.INV_PreDeterminedPrice,I.INV_PreDeterminedPrice,D.INV_EffeFrom,I.INV_EffeFrom,
D.INV_EffeTo,I.INV_EffeTo,D.INV_Others,I.INV_Others,D.Inv_Size,I.Inv_Size,D.Inv_Color,I.Inv_Color,D.Inv_Acode,I.Inv_Acode,I.Inv_IPAddress,I.Inv_Status
 FROM Inserted I Inner Join Deleted D ON D.Inv_ID=I.Inv_ID
			End

			IF(Select Inv_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,Inv_Code ,nInv_Code ,Inv_Description ,nInv_Description ,Inv_Parent ,nInv_Parent ,Inv_Flag ,Inv_Unit ,
nInv_Unit ,Inv_AlterUnit ,nInv_AlterUnit ,Inv_Price,nInv_Price,Inv_Excise ,nInv_Excise ,Inv_Vat ,nInv_Vat ,Inv_CompID ,Inv_PerPieces ,
nInv_PerPieces ,INV_MRP,nINV_MRP,INV_Retail,nINV_Retail,INV_PreDeterminedPrice,nINV_PreDeterminedPrice,INV_EffeFrom ,nINV_EffeFrom ,
INV_EffeTo ,nINV_EffeTo ,INV_Others,nINV_Others,Inv_Size,nInv_Size ,Inv_Color ,nInv_Color ,Inv_Acode ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
					SELECT 'De-Activated',I.Inv_DeletedBy, I.Inv_ID,D.Inv_Code,I.Inv_Code, D.Inv_Description,I.Inv_Description,D.Inv_Parent ,I.Inv_Parent ,I.Inv_Flag,
D.Inv_Unit,I.Inv_Unit,D.Inv_AlterUnit,I.Inv_AlterUnit,D.Inv_Price,I.Inv_Price,D.Inv_Excise ,I.Inv_Excise ,D.Inv_Vat,I.Inv_Vat,I.Inv_CompID,
D.Inv_PerPieces,I.Inv_PerPieces,D.INV_MRP,I.INV_MRP,D.INV_Retail,I.INV_Retail,D.INV_PreDeterminedPrice,I.INV_PreDeterminedPrice,D.INV_EffeFrom,I.INV_EffeFrom,
D.INV_EffeTo,I.INV_EffeTo,D.INV_Others,I.INV_Others,D.Inv_Size,I.Inv_Size,D.Inv_Color,I.Inv_Color,D.Inv_Acode,I.Inv_Acode,I.Inv_IPAddress,I.Inv_Status
 FROM Inserted I Inner Join Deleted D ON D.Inv_ID=I.Inv_ID
			End								
			IF(Select Inv_Status from Inserted)='R'
				BEGIN       
				INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,Inv_Code ,nInv_Code ,Inv_Description ,nInv_Description ,Inv_Parent ,nInv_Parent ,Inv_Flag ,Inv_Unit ,
nInv_Unit ,Inv_AlterUnit ,nInv_AlterUnit ,Inv_Price,nInv_Price,Inv_Excise ,nInv_Excise ,Inv_Vat ,nInv_Vat ,Inv_CompID ,Inv_PerPieces ,
nInv_PerPieces ,INV_MRP,nINV_MRP,INV_Retail,nINV_Retail,INV_PreDeterminedPrice,nINV_PreDeterminedPrice,INV_EffeFrom ,nINV_EffeFrom ,
INV_EffeTo ,nINV_EffeTo ,INV_Others,nINV_Others,Inv_Size,nInv_Size ,Inv_Color ,nInv_Color ,Inv_Acode ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
					SELECT 'Activated(Not Approved)',I.Inv_RecallBy,I.Inv_ID,D.Inv_Code,I.Inv_Code, D.Inv_Description,I.Inv_Description,D.Inv_Parent ,I.Inv_Parent ,I.Inv_Flag,
D.Inv_Unit,I.Inv_Unit,D.Inv_AlterUnit,I.Inv_AlterUnit,D.Inv_Price,I.Inv_Price,D.Inv_Excise ,I.Inv_Excise ,D.Inv_Vat,I.Inv_Vat,I.Inv_CompID,
D.Inv_PerPieces,I.Inv_PerPieces,D.INV_MRP,I.INV_MRP,D.INV_Retail,I.INV_Retail,D.INV_PreDeterminedPrice,I.INV_PreDeterminedPrice,D.INV_EffeFrom,I.INV_EffeFrom,
D.INV_EffeTo,I.INV_EffeTo,D.INV_Others,I.INV_Others,D.Inv_Size,I.Inv_Size,D.Inv_Color,I.Inv_Color,D.Inv_Acode,I.Inv_Acode,I.Inv_IPAddress,I.Inv_Status
 FROM Inserted I Inner Join Deleted D ON D.Inv_ID=I.Inv_ID
			End
			
			IF(Select Inv_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,Inv_Code ,nInv_Code ,Inv_Description ,nInv_Description ,Inv_Parent ,nInv_Parent ,Inv_Flag ,Inv_Unit ,
nInv_Unit ,Inv_AlterUnit ,nInv_AlterUnit ,Inv_Price,nInv_Price,Inv_Excise ,nInv_Excise ,Inv_Vat ,nInv_Vat ,Inv_CompID ,Inv_PerPieces ,
nInv_PerPieces ,INV_MRP,nINV_MRP,INV_Retail,nINV_Retail,INV_PreDeterminedPrice,nINV_PreDeterminedPrice,INV_EffeFrom ,nINV_EffeFrom ,
INV_EffeTo ,nINV_EffeTo ,INV_Others,nINV_Others,Inv_Size,nInv_Size ,Inv_Color ,nInv_Color ,Inv_Acode ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
					SELECT 'Activated',I.Inv_RecallBy,I.Inv_ID,D.Inv_Code,I.Inv_Code, D.Inv_Description,I.Inv_Description,D.Inv_Parent ,I.Inv_Parent ,I.Inv_Flag,
D.Inv_Unit,I.Inv_Unit,D.Inv_AlterUnit,I.Inv_AlterUnit,D.Inv_Price,I.Inv_Price,D.Inv_Excise ,I.Inv_Excise ,D.Inv_Vat,I.Inv_Vat,I.Inv_CompID,
D.Inv_PerPieces,I.Inv_PerPieces,D.INV_MRP,I.INV_MRP,D.INV_Retail,I.INV_Retail,D.INV_PreDeterminedPrice,I.INV_PreDeterminedPrice,D.INV_EffeFrom,I.INV_EffeFrom,
D.INV_EffeTo,I.INV_EffeTo,D.INV_Others,I.INV_Others,D.Inv_Size,I.Inv_Size,D.Inv_Color,I.Inv_Color,D.Inv_Acode,I.Inv_Acode,I.Inv_IPAddress,I.Inv_Status
 FROM Inserted I Inner Join Deleted D ON D.Inv_ID=I.Inv_ID
			End					
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Inventory_Master_Log
(Log_Operation ,Log_UserID ,Inv_ID ,nInv_Code ,nInv_Description ,nInv_Parent ,Inv_Flag ,
nInv_Unit ,nInv_AlterUnit ,nInv_Price,nInv_Excise ,nInv_Vat ,Inv_CompID ,
nInv_PerPieces ,nINV_MRP,nINV_Retail,nINV_PreDeterminedPrice,nINV_EffeFrom ,
nINV_EffeTo ,nINV_Others,nInv_Size ,nInv_Color ,nInv_Acode ,Inv_IPAddress ,Inv_Status)
SELECT 'Created',Inv_CreatedBy,Inv_ID,Inv_Code, Inv_Description,Inv_Parent ,Inv_Flag,
Inv_Unit,Inv_AlterUnit,Inv_Price,Inv_Excise ,Inv_Vat,Inv_CompID,
Inv_PerPieces,INV_MRP,INV_Retail,INV_PreDeterminedPrice,INV_EffeFrom,
INV_EffeTo,INV_Others,Inv_Size,Inv_Color,Inv_Acode,Inv_IPAddress,Inv_Status
 			 FROM Inserted
		END
	END 

/

create trigger Purchase_GIN_Details_Log_Trigger On Purchase_GIN_Details For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select PGD_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_GIN_Details_Log
(Log_Operation ,Log_UserID,PGD_ID,PGD_MasterID,nPGD_MasterID,PGD_OrderID,nPGD_OrderID,PGD_CommodityID,nPGD_CommodityID,PGD_DescriptionID,
nPGD_DescriptionID,PGD_HistoryID,nPGD_HistoryID,PGD_UnitID,nPGD_UnitID,PGD_MRP,nPGD_MRP,PGD_OrderQnt,nPGD_OrderQnt,PGD_PendingQnt,nPGD_PendingQnt,
PGD_ReceivedQnt,nPGD_ReceivedQnt,PGD_RejectedQnt,nPGD_RejectedQnt,PGD_Accepted,nPGD_Accepted,PGD_Excess,nPGD_Excess,PGD_ManufactureDate ,nPGD_ManufactureDate ,
PGD_ExpireDate ,nPGD_ExpireDate ,PGD_Status,PGD_CompID,PGD_IPAddress)
SELECT 'Updated',I.PGD_UpdatedBy,I.PGD_ID,D.PGD_MasterID,I.PGD_MasterID,D.PGD_OrderID,I.PGD_OrderID,D.PGD_CommodityID,I.PGD_CommodityID,D.PGD_DescriptionID,
I.PGD_DescriptionID,D.PGD_HistoryID,I.PGD_HistoryID,D.PGD_UnitID,I.PGD_UnitID,D.PGD_MRP,I.PGD_MRP,D.PGD_OrderQnt,I.PGD_OrderQnt,D.PGD_PendingQnt,I.PGD_PendingQnt,
D.PGD_ReceivedQnt,I.PGD_ReceivedQnt,D.PGD_RejectedQnt,I.PGD_RejectedQnt,D.PGD_Accepted,I.PGD_Accepted,D.PGD_Excess,I.PGD_Excess,D.PGD_ManufactureDate,I.PGD_ManufactureDate,
D.PGD_ExpireDate,I.PGD_ExpireDate,I.PGD_Status,I.PGD_CompID,I.PGD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PGD_ID=I.PGD_ID
			End	
			
IF(Select PGD_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Purchase_GIN_Details_Log
(Log_Operation ,Log_UserID,PGD_ID,PGD_MasterID,nPGD_MasterID,PGD_OrderID,nPGD_OrderID,PGD_CommodityID,nPGD_CommodityID,PGD_DescriptionID,
nPGD_DescriptionID,PGD_HistoryID,nPGD_HistoryID,PGD_UnitID,nPGD_UnitID,PGD_MRP,nPGD_MRP,PGD_OrderQnt,nPGD_OrderQnt,PGD_PendingQnt,nPGD_PendingQnt,
PGD_ReceivedQnt,nPGD_ReceivedQnt,PGD_RejectedQnt,nPGD_RejectedQnt,PGD_Accepted,nPGD_Accepted,PGD_Excess,nPGD_Excess,PGD_ManufactureDate ,nPGD_ManufactureDate ,
PGD_ExpireDate ,nPGD_ExpireDate ,PGD_Status,PGD_CompID,PGD_IPAddress)
					SELECT 'Approved',I.PGM_ApprovedBy, I.PGD_ID,D.PGD_MasterID,I.PGD_MasterID,D.PGD_OrderID,I.PGD_OrderID,D.PGD_CommodityID,I.PGD_CommodityID,D.PGD_DescriptionID,
I.PGD_DescriptionID,D.PGD_HistoryID,I.PGD_HistoryID,D.PGD_UnitID,I.PGD_UnitID,D.PGD_MRP,I.PGD_MRP,D.PGD_OrderQnt,I.PGD_OrderQnt,D.PGD_PendingQnt,I.PGD_PendingQnt,
D.PGD_ReceivedQnt,I.PGD_ReceivedQnt,D.PGD_RejectedQnt,I.PGD_RejectedQnt,D.PGD_Accepted,I.PGD_Accepted,D.PGD_Excess,I.PGD_Excess,D.PGD_ManufactureDate,I.PGD_ManufactureDate,
D.PGD_ExpireDate,I.PGD_ExpireDate,I.PGD_Status,I.PGD_CompID,I.PGD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PGD_ID=I.PGD_ID
			End				
	IF(Select PGD_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_GIN_Details_Log
(Log_Operation ,Log_UserID,PGD_ID,PGD_MasterID,nPGD_MasterID,PGD_OrderID,nPGD_OrderID,PGD_CommodityID,nPGD_CommodityID,PGD_DescriptionID,
nPGD_DescriptionID,PGD_HistoryID,nPGD_HistoryID,PGD_UnitID,nPGD_UnitID,PGD_MRP,nPGD_MRP,PGD_OrderQnt,nPGD_OrderQnt,PGD_PendingQnt,nPGD_PendingQnt,
PGD_ReceivedQnt,nPGD_ReceivedQnt,PGD_RejectedQnt,nPGD_RejectedQnt,PGD_Accepted,nPGD_Accepted,PGD_Excess,nPGD_Excess,PGD_ManufactureDate ,nPGD_ManufactureDate ,
PGD_ExpireDate ,nPGD_ExpireDate ,PGD_Status,PGD_CompID,PGD_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.PGD_DeletedBy,I.PGD_ID,D.PGD_MasterID,I.PGD_MasterID,D.PGD_OrderID,I.PGD_OrderID,D.PGD_CommodityID,I.PGD_CommodityID,D.PGD_DescriptionID,
I.PGD_DescriptionID,D.PGD_HistoryID,I.PGD_HistoryID,D.PGD_UnitID,I.PGD_UnitID,D.PGD_MRP,I.PGD_MRP,D.PGD_OrderQnt,I.PGD_OrderQnt,D.PGD_PendingQnt,I.PGD_PendingQnt,
D.PGD_ReceivedQnt,I.PGD_ReceivedQnt,D.PGD_RejectedQnt,I.PGD_RejectedQnt,D.PGD_Accepted,I.PGD_Accepted,D.PGD_Excess,I.PGD_Excess,D.PGD_ManufactureDate,I.PGD_ManufactureDate,
D.PGD_ExpireDate,I.PGD_ExpireDate,I.PGD_Status,I.PGD_CompID,I.PGD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PGD_ID=I.PGD_ID
			End

			IF(Select PGD_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_GIN_Details_Log
(Log_Operation ,Log_UserID,PGD_ID,PGD_MasterID,nPGD_MasterID,PGD_OrderID,nPGD_OrderID,PGD_CommodityID,nPGD_CommodityID,PGD_DescriptionID,
nPGD_DescriptionID,PGD_HistoryID,nPGD_HistoryID,PGD_UnitID,nPGD_UnitID,PGD_MRP,nPGD_MRP,PGD_OrderQnt,nPGD_OrderQnt,PGD_PendingQnt,nPGD_PendingQnt,
PGD_ReceivedQnt,nPGD_ReceivedQnt,PGD_RejectedQnt,nPGD_RejectedQnt,PGD_Accepted,nPGD_Accepted,PGD_Excess,nPGD_Excess,PGD_ManufactureDate ,nPGD_ManufactureDate ,
PGD_ExpireDate ,nPGD_ExpireDate ,PGD_Status,PGD_CompID,PGD_IPAddress)
					SELECT 'De-Activated',I.PGD_DeletedBy, I.PGD_ID,D.PGD_MasterID,I.PGD_MasterID,D.PGD_OrderID,I.PGD_OrderID,D.PGD_CommodityID,I.PGD_CommodityID,D.PGD_DescriptionID,
I.PGD_DescriptionID,D.PGD_HistoryID,I.PGD_HistoryID,D.PGD_UnitID,I.PGD_UnitID,D.PGD_MRP,I.PGD_MRP,D.PGD_OrderQnt,I.PGD_OrderQnt,D.PGD_PendingQnt,I.PGD_PendingQnt,
D.PGD_ReceivedQnt,I.PGD_ReceivedQnt,D.PGD_RejectedQnt,I.PGD_RejectedQnt,D.PGD_Accepted,I.PGD_Accepted,D.PGD_Excess,I.PGD_Excess,D.PGD_ManufactureDate,I.PGD_ManufactureDate,
D.PGD_ExpireDate,I.PGD_ExpireDate,I.PGD_Status,I.PGD_CompID,I.PGD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PGD_ID=I.PGD_ID
			End								
			
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_GIN_Details_Log
(Log_Operation ,Log_UserID,PGD_ID,nPGD_MasterID,nPGD_OrderID,nPGD_CommodityID,
nPGD_DescriptionID,nPGD_HistoryID,nPGD_UnitID,nPGD_MRP,nPGD_OrderQnt,nPGD_PendingQnt,
nPGD_ReceivedQnt,nPGD_RejectedQnt,nPGD_Accepted,nPGD_Excess,nPGD_ManufactureDate ,
nPGD_ExpireDate ,PGD_Status,PGD_CompID,PGD_IPAddress)
SELECT 'Created',PGD_CreatedBy,PGD_ID,PGD_MasterID,PGD_OrderID,PGD_CommodityID,
PGD_DescriptionID,PGD_HistoryID,PGD_UnitID,PGD_MRP,PGD_OrderQnt,PGD_PendingQnt,
PGD_ReceivedQnt,PGD_RejectedQnt,PGD_Accepted,PGD_Excess,PGD_ManufactureDate,
PGD_ExpireDate,PGD_Status,PGD_CompID,PGD_IPAddress
 			 FROM Inserted
		END
	END 

/

create trigger Purchase_GIN_Master_Log_Trigger On Purchase_GIN_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select PGM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_GIN_Master_Log
(Log_Operation,Log_UserID,PGM_ID,PGM_OrderID,nPGM_OrderID,PGM_OrderDate,nPGM_OrderDate,PGM_GIN_Number,nPGM_GIN_Number,PGM_Supplier,nPGM_Supplier ,
PGM_DocumentRefNo,nPGM_DocumentRefNo,PGM_ModeOFshipping,nPGM_ModeOFshipping,PGM_InvoiceDate ,nPGM_InvoiceDate,PGM_ESugamNo,nPGM_ESugamNo,PGM_Status ,
PGM_YearID,PGM_CompID,PGM_IPAddress,PGM_Delflag)
SELECT 'Updated',I.PGM_UpdatedBy,I.PGM_ID,D.PGM_OrderID,I.PGM_OrderID,D.PGM_OrderDate,I.PGM_OrderDate,D.PGM_GIN_Number,I.PGM_GIN_Number,D.PGM_Supplier,
I.PGM_Supplier,D.PGM_DocumentRefNo,I.PGM_DocumentRefNo,D.PGM_ModeOFshipping,I.PGM_ModeOFshipping,D.PGM_InvoiceDate,I.PGM_InvoiceDate,
D.PGM_ESugamNo,I.PGM_ESugamNo,I.PGM_Status,I.PGM_YearID,I.PGM_CompID,I.PGM_IPAddress,I.PGM_Delflag
 FROM Inserted I Inner Join Deleted D ON D.PGM_ID=I.PGM_ID
			End	
			
IF(Select PGM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Purchase_GIN_Master_Log
(Log_Operation,Log_UserID,PGM_ID,PGM_OrderID,nPGM_OrderID,PGM_OrderDate,nPGM_OrderDate,PGM_GIN_Number,nPGM_GIN_Number,PGM_Supplier,nPGM_Supplier ,
PGM_DocumentRefNo,nPGM_DocumentRefNo,PGM_ModeOFshipping,nPGM_ModeOFshipping,PGM_InvoiceDate ,nPGM_InvoiceDate,PGM_ESugamNo,nPGM_ESugamNo,PGM_Status ,
PGM_YearID,PGM_CompID,PGM_IPAddress,PGM_Delflag)

					SELECT 'Approved',I.PGM_ApprovedBy, I.PGM_ID,D.PGM_OrderID,I.PGM_OrderID,D.PGM_OrderDate,I.PGM_OrderDate,D.PGM_GIN_Number,I.PGM_GIN_Number,D.PGM_Supplier,
I.PGM_Supplier,D.PGM_DocumentRefNo,I.PGM_DocumentRefNo,D.PGM_ModeOFshipping,I.PGM_ModeOFshipping,D.PGM_InvoiceDate,I.PGM_InvoiceDate,
D.PGM_ESugamNo,I.PGM_ESugamNo,I.PGM_Status,I.PGM_YearID,I.PGM_CompID,I.PGM_IPAddress,I.PGM_Delflag
 FROM Inserted I Inner Join Deleted D ON D.PGM_ID=I.PGM_ID
			End				
	IF(Select PGM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_GIN_Master_Log
(Log_Operation,Log_UserID,PGM_ID,PGM_OrderID,nPGM_OrderID,PGM_OrderDate,nPGM_OrderDate,PGM_GIN_Number,nPGM_GIN_Number,PGM_Supplier,nPGM_Supplier ,
PGM_DocumentRefNo,nPGM_DocumentRefNo,PGM_ModeOFshipping,nPGM_ModeOFshipping,PGM_InvoiceDate ,nPGM_InvoiceDate,PGM_ESugamNo,nPGM_ESugamNo,PGM_Status ,
PGM_YearID,PGM_CompID,PGM_IPAddress,PGM_Delflag)

					SELECT 'De-Activated(Not Approved)',I.PGM_DeletedBy,I.PGM_ID,D.PGM_OrderID,I.PGM_OrderID,D.PGM_OrderDate,I.PGM_OrderDate,D.PGM_GIN_Number,I.PGM_GIN_Number,D.PGM_Supplier,
I.PGM_Supplier,D.PGM_DocumentRefNo,I.PGM_DocumentRefNo,D.PGM_ModeOFshipping,I.PGM_ModeOFshipping,D.PGM_InvoiceDate,I.PGM_InvoiceDate,
D.PGM_ESugamNo,I.PGM_ESugamNo,I.PGM_Status,I.PGM_YearID,I.PGM_CompID,I.PGM_IPAddress,I.PGM_Delflag
 FROM Inserted I Inner Join Deleted D ON D.PGM_ID=I.PGM_ID
			End

			IF(Select PGM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_GIN_Master_Log
(Log_Operation,Log_UserID,PGM_ID,PGM_OrderID,nPGM_OrderID,PGM_OrderDate,nPGM_OrderDate,PGM_GIN_Number,nPGM_GIN_Number,PGM_Supplier,nPGM_Supplier ,
PGM_DocumentRefNo,nPGM_DocumentRefNo,PGM_ModeOFshipping,nPGM_ModeOFshipping,PGM_InvoiceDate ,nPGM_InvoiceDate,PGM_ESugamNo,nPGM_ESugamNo,PGM_Status ,
PGM_YearID,PGM_CompID,PGM_IPAddress,PGM_Delflag)

					SELECT 'De-Activated',I.PGM_DeletedBy, I.PGM_ID,D.PGM_OrderID,I.PGM_OrderID,D.PGM_OrderDate,I.PGM_OrderDate,D.PGM_GIN_Number,I.PGM_GIN_Number,D.PGM_Supplier,
I.PGM_Supplier,D.PGM_DocumentRefNo,I.PGM_DocumentRefNo,D.PGM_ModeOFshipping,I.PGM_ModeOFshipping,D.PGM_InvoiceDate,I.PGM_InvoiceDate,
D.PGM_ESugamNo,I.PGM_ESugamNo,I.PGM_Status,I.PGM_YearID,I.PGM_CompID,I.PGM_IPAddress,I.PGM_Delflag
 FROM Inserted I Inner Join Deleted D ON D.PGM_ID=I.PGM_ID
			End								
			
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_GIN_Master_Log
(Log_Operation,Log_UserID,PGM_ID,nPGM_OrderID,nPGM_OrderDate,nPGM_GIN_Number,nPGM_Supplier ,
nPGM_DocumentRefNo,nPGM_ModeOFshipping,nPGM_InvoiceDate,nPGM_ESugamNo,PGM_Status,
PGM_YearID,PGM_CompID,PGM_IPAddress,PGM_Delflag)
SELECT 'Created',PGM_CreatedBy,PGM_ID,PGM_OrderID,PGM_OrderDate,PGM_GIN_Number,PGM_Supplier,PGM_DocumentRefNo,
PGM_ModeOFshipping,PGM_InvoiceDate,PGM_ESugamNo,
PGM_Status,PGM_YearID,PGM_CompID,PGM_IPAddress,PGM_Delflag


 			 FROM Inserted
		END
	END 

/

create trigger Purchase_Invoice_Excess_Log_Trigger On Purchase_Invoice_Excess For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select PIE_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_Invoice_Excess_Log
(Log_Operation,Log_UserID ,PIE_ID ,PIE_OrderID ,nPIE_OrderID ,PIE_GINID,nPIE_GINID,PIE_CommodityID ,nPIE_CommodityID ,PIE_Description ,
nPIE_Description ,PIE_HistoryID ,nPIE_HistoryID ,PIE_UnitID ,nPIE_UnitID ,PIE_Rate,nPIE_Rate,PIE_Quantity ,nPIE_Quantity ,PIE_RateAmount,
nPIE_RateAmount,PIE_Discount,nPIE_Discount,PIE_DiscountAmount,nPIE_DiscountAmount,PIE_Excise,nPIE_Excise,PIE_ExciseAmount,nPIE_ExciseAmount,
PIE_Vat,nPIE_Vat,PIE_VatAmount,nPIE_VatAmount,PIE_TotalAmount,nPIE_TotalAmount,PIE_Status,PIE_Delflag,PIE_COmpID ,PIE_AcceptQty ,nPIE_AcceptQty ,
PIE_Rejected ,nPIE_Rejected ,PIE_DocRef,nPIE_DocRef,PIE_RecivedQty ,nPIE_RecivedQty ,PIE_OrderedQty ,nPIE_OrderedQty ,PIE_ManufactureDate ,
nPIE_ManufactureDate ,PIE_ExpireDate ,nPIE_ExpireDate ,PIE_YearID ,PIE_IPAddress)
SELECT 'Updated',I.PIE_UpdatedBy,I.PIE_ID,D.PIE_OrderID,I.PIE_OrderID,D.PIE_GINID,I.PIE_GINID,D.PIE_CommodityID,I.PIE_CommodityID,D.PIE_Description,I.PIE_Description,
D.PIE_HistoryID,I.PIE_HistoryID,D.PIE_UnitID,I.PIE_UnitID,D.PIE_Rate,I.PIE_Rate,D.PIE_Quantity,I.PIE_Quantity,D.PIE_RateAmount,I.PIE_RateAmount,
D.PIE_Discount,I.PIE_Discount,D.PIE_DiscountAmount,I.PIE_DiscountAmount,D.PIE_Excise,I.PIE_Excise,D.PIE_ExciseAmount,I.PIE_ExciseAmount,
D.PIE_Vat,I.PIE_Vat,D.PIE_VatAmount,I.PIE_VatAmount,D.PIE_TotalAmount,I.PIE_TotalAmount,I.PIE_Status,I.PIE_Delflag,I.PIE_COmpID,D.PIE_AcceptQty,I.PIE_AcceptQty,
D.PIE_Rejected,I.PIE_Rejected,D.PIE_DocRef,I.PIE_DocRef,D.PIE_RecivedQty,I.PIE_RecivedQty,D.PIE_OrderedQty,I.PIE_OrderedQty,D.PIE_ManufactureDate,I.PIE_ManufactureDate,
D.PIE_ExpireDate,I.PIE_ExpireDate,I.PIE_YearID,I.PIE_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PIE_ID=I.PIE_ID
			End	
			
		
	IF(Select PIE_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_Invoice_Excess_Log
(Log_Operation,Log_UserID ,PIE_ID ,PIE_OrderID ,nPIE_OrderID ,PIE_GINID,nPIE_GINID,PIE_CommodityID ,nPIE_CommodityID ,PIE_Description ,
nPIE_Description ,PIE_HistoryID ,nPIE_HistoryID ,PIE_UnitID ,nPIE_UnitID ,PIE_Rate,nPIE_Rate,PIE_Quantity ,nPIE_Quantity ,PIE_RateAmount,
nPIE_RateAmount,PIE_Discount,nPIE_Discount,PIE_DiscountAmount,nPIE_DiscountAmount,PIE_Excise,nPIE_Excise,PIE_ExciseAmount,nPIE_ExciseAmount,
PIE_Vat,nPIE_Vat,PIE_VatAmount,nPIE_VatAmount,PIE_TotalAmount,nPIE_TotalAmount,PIE_Status,PIE_Delflag,PIE_COmpID ,PIE_AcceptQty ,nPIE_AcceptQty ,
PIE_Rejected ,nPIE_Rejected ,PIE_DocRef,nPIE_DocRef,PIE_RecivedQty ,nPIE_RecivedQty ,PIE_OrderedQty ,nPIE_OrderedQty ,PIE_ManufactureDate ,
nPIE_ManufactureDate ,PIE_ExpireDate ,nPIE_ExpireDate ,PIE_YearID ,PIE_IPAddress)

					SELECT 'De-Activated(Not Approved)',I.PIE_DeletedBy,I.PIE_ID,D.PIE_OrderID,I.PIE_OrderID,D.PIE_GINID,I.PIE_GINID,D.PIE_CommodityID,I.PIE_CommodityID,D.PIE_Description,I.PIE_Description,
D.PIE_HistoryID,I.PIE_HistoryID,D.PIE_UnitID,I.PIE_UnitID,D.PIE_Rate,I.PIE_Rate,D.PIE_Quantity,I.PIE_Quantity,D.PIE_RateAmount,I.PIE_RateAmount,
D.PIE_Discount,I.PIE_Discount,D.PIE_DiscountAmount,I.PIE_DiscountAmount,D.PIE_Excise,I.PIE_Excise,D.PIE_ExciseAmount,I.PIE_ExciseAmount,
D.PIE_Vat,I.PIE_Vat,D.PIE_VatAmount,I.PIE_VatAmount,D.PIE_TotalAmount,I.PIE_TotalAmount,I.PIE_Status,I.PIE_Delflag,I.PIE_COmpID,D.PIE_AcceptQty,I.PIE_AcceptQty,
D.PIE_Rejected,I.PIE_Rejected,D.PIE_DocRef,I.PIE_DocRef,D.PIE_RecivedQty,I.PIE_RecivedQty,D.PIE_OrderedQty,I.PIE_OrderedQty,D.PIE_ManufactureDate,I.PIE_ManufactureDate,
D.PIE_ExpireDate,I.PIE_ExpireDate,I.PIE_YearID,I.PIE_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PIE_ID=I.PIE_ID
			End

			IF(Select PIE_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_Invoice_Excess_Log
(Log_Operation,Log_UserID ,PIE_ID ,PIE_OrderID ,nPIE_OrderID ,PIE_GINID,nPIE_GINID,PIE_CommodityID ,nPIE_CommodityID ,PIE_Description ,
nPIE_Description ,PIE_HistoryID ,nPIE_HistoryID ,PIE_UnitID ,nPIE_UnitID ,PIE_Rate,nPIE_Rate,PIE_Quantity ,nPIE_Quantity ,PIE_RateAmount,
nPIE_RateAmount,PIE_Discount,nPIE_Discount,PIE_DiscountAmount,nPIE_DiscountAmount,PIE_Excise,nPIE_Excise,PIE_ExciseAmount,nPIE_ExciseAmount,
PIE_Vat,nPIE_Vat,PIE_VatAmount,nPIE_VatAmount,PIE_TotalAmount,nPIE_TotalAmount,PIE_Status,PIE_Delflag,PIE_COmpID ,PIE_AcceptQty ,nPIE_AcceptQty ,
PIE_Rejected ,nPIE_Rejected ,PIE_DocRef,nPIE_DocRef,PIE_RecivedQty ,nPIE_RecivedQty ,PIE_OrderedQty ,nPIE_OrderedQty ,PIE_ManufactureDate ,
nPIE_ManufactureDate ,PIE_ExpireDate ,nPIE_ExpireDate ,PIE_YearID ,PIE_IPAddress)

					SELECT 'De-Activated',I.PIE_DeletedBy, I.PIE_ID,D.PIE_OrderID,I.PIE_OrderID,D.PIE_GINID,I.PIE_GINID,D.PIE_CommodityID,I.PIE_CommodityID,D.PIE_Description,I.PIE_Description,
D.PIE_HistoryID,I.PIE_HistoryID,D.PIE_UnitID,I.PIE_UnitID,D.PIE_Rate,I.PIE_Rate,D.PIE_Quantity,I.PIE_Quantity,D.PIE_RateAmount,I.PIE_RateAmount,
D.PIE_Discount,I.PIE_Discount,D.PIE_DiscountAmount,I.PIE_DiscountAmount,D.PIE_Excise,I.PIE_Excise,D.PIE_ExciseAmount,I.PIE_ExciseAmount,
D.PIE_Vat,I.PIE_Vat,D.PIE_VatAmount,I.PIE_VatAmount,D.PIE_TotalAmount,I.PIE_TotalAmount,I.PIE_Status,I.PIE_Delflag,I.PIE_COmpID,D.PIE_AcceptQty,I.PIE_AcceptQty,
D.PIE_Rejected,I.PIE_Rejected,D.PIE_DocRef,I.PIE_DocRef,D.PIE_RecivedQty,I.PIE_RecivedQty,D.PIE_OrderedQty,I.PIE_OrderedQty,D.PIE_ManufactureDate,I.PIE_ManufactureDate,
D.PIE_ExpireDate,I.PIE_ExpireDate,I.PIE_YearID,I.PIE_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PIE_ID=I.PIE_ID
			End								
			
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_Invoice_Excess_Log
(Log_Operation,Log_UserID ,PIE_ID ,nPIE_OrderID ,nPIE_GINID,nPIE_CommodityID ,
nPIE_Description ,nPIE_HistoryID ,nPIE_UnitID ,nPIE_Rate,nPIE_Quantity ,
nPIE_RateAmount,nPIE_Discount,nPIE_DiscountAmount,nPIE_Excise,nPIE_ExciseAmount,
nPIE_Vat,nPIE_VatAmount,nPIE_TotalAmount,PIE_Status,PIE_Delflag,PIE_COmpID ,nPIE_AcceptQty ,
nPIE_Rejected ,nPIE_DocRef,nPIE_RecivedQty ,nPIE_OrderedQty ,
nPIE_ManufactureDate ,nPIE_ExpireDate ,PIE_YearID ,PIE_IPAddress)
SELECT 'Created',PIE_CreatedBy,PIE_ID,PIE_OrderID,PIE_GINID,PIE_CommodityID,PIE_Description,
PIE_HistoryID,PIE_UnitID,PIE_Rate,PIE_Quantity,PIE_RateAmount,
PIE_Discount,PIE_DiscountAmount,PIE_Excise,PIE_ExciseAmount,
PIE_Vat,PIE_VatAmount,PIE_TotalAmount,PIE_Status,PIE_Delflag,PIE_COmpID,PIE_AcceptQty,
PIE_Rejected,PIE_DocRef,PIE_RecivedQty,PIE_OrderedQty,PIE_ManufactureDate,
PIE_ExpireDate,PIE_YearID,PIE_IPAddress
 


 			 FROM Inserted
		END
	END 

/

create trigger Purchase_Order_Details_Log_Trigger On Purchase_Order_Details For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select POD_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_Order_Details_Log
(Log_Operation,Log_UserID,POD_ID,POD_MasterID,nPOD_MasterID,POD_Commodity,nPOD_Commodity,POD_DescriptionID,nPOD_DescriptionID,POD_HistoryID,
nPOD_HistoryID,POD_Unit,nPOD_Unit,POD_Rate,nPOD_Rate,POD_Quantity,nPOD_Quantity,POD_RateAmount,nPOD_RateAmount,POD_Discount,nPOD_Discount ,
POD_DiscountAmount,nPOD_DiscountAmount,POD_Excise,nPOD_Excise,POD_ExciseAmount,nPOD_ExciseAmount,POD_VAT,nPOD_VAT,POD_VATAmount,nPOD_VATAmount ,
POD_CST,nPOD_CST,POD_CSTAmount,nPOD_CSTAmount,POD_RequiredDate,nPOD_RequiredDate,POD_TotalAmount,nPOD_TotalAmount,POD_CompID,POD_Status,POD_IPAddress)
SELECT 'Updated',I.POD_UpdatedBy,I.POD_ID,D.POD_MasterID,I.POD_MasterID,D.POD_Commodity,I.POD_Commodity,D.POD_DescriptionID,I.POD_DescriptionID,D.POD_HistoryID,
I.POD_HistoryID,D.POD_Unit,I.POD_Unit,D.POD_Rate,I.POD_Rate,D.POD_Quantity,I.POD_Quantity,D.POD_RateAmount,I.POD_RateAmount,D.POD_Discount,I.POD_Discount,
D.POD_DiscountAmount,I.POD_DiscountAmount,D.POD_Excise,I.POD_Excise,D.POD_ExciseAmount,I.POD_ExciseAmount,D.POD_VAT,I.POD_VAT,D.POD_VATAmount,I.POD_VATAmount,
D.POD_CST,I.POD_CST,D.POD_CSTAmount,I.POD_CSTAmount,D.POD_RequiredDate,I.POD_RequiredDate,D.POD_TotalAmount,I.POD_TotalAmount,I.POD_CompID,I.POD_Status,I.POD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.POD_ID=I.POD_ID
			End	
			
		
	IF(Select POD_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_Order_Details_Log
(Log_Operation,Log_UserID,POD_ID,POD_MasterID,nPOD_MasterID,POD_Commodity,nPOD_Commodity,POD_DescriptionID,nPOD_DescriptionID,POD_HistoryID,
nPOD_HistoryID,POD_Unit,nPOD_Unit,POD_Rate,nPOD_Rate,POD_Quantity,nPOD_Quantity,POD_RateAmount,nPOD_RateAmount,POD_Discount,nPOD_Discount ,
POD_DiscountAmount,nPOD_DiscountAmount,POD_Excise,nPOD_Excise,POD_ExciseAmount,nPOD_ExciseAmount,POD_VAT,nPOD_VAT,POD_VATAmount,nPOD_VATAmount ,
POD_CST,nPOD_CST,POD_CSTAmount,nPOD_CSTAmount,POD_RequiredDate,nPOD_RequiredDate,POD_TotalAmount,nPOD_TotalAmount,POD_CompID,POD_Status,POD_IPAddress)

					SELECT 'De-Activated(Not Approved)',I.POD_DeletedBy,I.POD_ID,D.POD_MasterID,I.POD_MasterID,D.POD_Commodity,I.POD_Commodity,D.POD_DescriptionID,I.POD_DescriptionID,D.POD_HistoryID,
I.POD_HistoryID,D.POD_Unit,I.POD_Unit,D.POD_Rate,I.POD_Rate,D.POD_Quantity,I.POD_Quantity,D.POD_RateAmount,I.POD_RateAmount,D.POD_Discount,I.POD_Discount,
D.POD_DiscountAmount,I.POD_DiscountAmount,D.POD_Excise,I.POD_Excise,D.POD_ExciseAmount,I.POD_ExciseAmount,D.POD_VAT,I.POD_VAT,D.POD_VATAmount,I.POD_VATAmount,
D.POD_CST,I.POD_CST,D.POD_CSTAmount,I.POD_CSTAmount,D.POD_RequiredDate,I.POD_RequiredDate,D.POD_TotalAmount,I.POD_TotalAmount,I.POD_CompID,I.POD_Status,I.POD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.POD_ID=I.POD_ID
			End

			IF(Select POD_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_Order_Details_Log
(Log_Operation,Log_UserID,POD_ID,POD_MasterID,nPOD_MasterID,POD_Commodity,nPOD_Commodity,POD_DescriptionID,nPOD_DescriptionID,POD_HistoryID,
nPOD_HistoryID,POD_Unit,nPOD_Unit,POD_Rate,nPOD_Rate,POD_Quantity,nPOD_Quantity,POD_RateAmount,nPOD_RateAmount,POD_Discount,nPOD_Discount ,
POD_DiscountAmount,nPOD_DiscountAmount,POD_Excise,nPOD_Excise,POD_ExciseAmount,nPOD_ExciseAmount,POD_VAT,nPOD_VAT,POD_VATAmount,nPOD_VATAmount ,
POD_CST,nPOD_CST,POD_CSTAmount,nPOD_CSTAmount,POD_RequiredDate,nPOD_RequiredDate,POD_TotalAmount,nPOD_TotalAmount,POD_CompID,POD_Status,POD_IPAddress)

					SELECT 'De-Activated',I.POD_DeletedBy, I.POD_ID,D.POD_MasterID,I.POD_MasterID,D.POD_Commodity,I.POD_Commodity,D.POD_DescriptionID,I.POD_DescriptionID,D.POD_HistoryID,
I.POD_HistoryID,D.POD_Unit,I.POD_Unit,D.POD_Rate,I.POD_Rate,D.POD_Quantity,I.POD_Quantity,D.POD_RateAmount,I.POD_RateAmount,D.POD_Discount,I.POD_Discount,
D.POD_DiscountAmount,I.POD_DiscountAmount,D.POD_Excise,I.POD_Excise,D.POD_ExciseAmount,I.POD_ExciseAmount,D.POD_VAT,I.POD_VAT,D.POD_VATAmount,I.POD_VATAmount,
D.POD_CST,I.POD_CST,D.POD_CSTAmount,I.POD_CSTAmount,D.POD_RequiredDate,I.POD_RequiredDate,D.POD_TotalAmount,I.POD_TotalAmount,I.POD_CompID,I.POD_Status,I.POD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.POD_ID=I.POD_ID
			End								
			
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_Order_Details_Log
(Log_Operation,Log_UserID,POD_ID,nPOD_MasterID,nPOD_Commodity,nPOD_DescriptionID,
nPOD_HistoryID,nPOD_Unit,nPOD_Rate,nPOD_Quantity,nPOD_RateAmount,nPOD_Discount ,
nPOD_DiscountAmount,nPOD_Excise,nPOD_ExciseAmount,nPOD_VAT,nPOD_VATAmount ,
nPOD_CST,nPOD_CSTAmount,nPOD_RequiredDate,nPOD_TotalAmount,POD_CompID,POD_Status,POD_IPAddress)
SELECT 'Created',POD_CreatedBy,POD_ID,POD_MasterID,POD_Commodity,POD_DescriptionID,
POD_HistoryID,POD_Unit,POD_Rate,POD_Quantity,POD_RateAmount,POD_Discount,
POD_DiscountAmount,POD_Excise,POD_ExciseAmount,POD_VAT,POD_VATAmount,
POD_CST,POD_CSTAmount,POD_RequiredDate,POD_TotalAmount,POD_CompID,POD_Status,POD_IPAddress
 

 			 FROM Inserted
		END
	END 

/

create trigger Purchase_Order_Master_Log_Trigger On Purchase_Order_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select POM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_Order_Master_Log
(Log_Operation ,Log_UserID ,POM_ID ,POM_OrderDate,nPOM_OrderDate,POM_OrderNo ,nPOM_OrderNo ,POM_Supplier ,nPOM_Supplier ,POM_ModeOfShipping ,
nPOM_ModeOfShipping ,POM_Status ,POM_YearID ,POM_CompID ,POM_IPAddress)
SELECT 'Updated',I.POM_UpdatedBy,I.POM_ID,D.POM_OrderDate,I.POM_OrderDate,D.POM_OrderNo,I.POM_OrderNo,D.POM_Supplier,I.POM_Supplier,
D.POM_ModeOfShipping,I.POM_ModeOfShipping,I.POM_Status,I.POM_YearID,I.POM_CompID,I.POM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.POM_ID=I.POM_ID
			End	
			
		
	IF(Select POM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_Order_Master_Log
(Log_Operation ,Log_UserID ,POM_ID ,POM_OrderDate,nPOM_OrderDate,POM_OrderNo ,nPOM_OrderNo ,POM_Supplier ,nPOM_Supplier ,POM_ModeOfShipping ,
nPOM_ModeOfShipping ,POM_Status ,POM_YearID ,POM_CompID ,POM_IPAddress)

					SELECT 'De-Activated(Not Approved)',I.POM_DeletedBy,I.POM_ID,D.POM_OrderDate,I.POM_OrderDate,D.POM_OrderNo,I.POM_OrderNo,D.POM_Supplier,I.POM_Supplier,
D.POM_ModeOfShipping,I.POM_ModeOfShipping,I.POM_Status,I.POM_YearID,I.POM_CompID,I.POM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.POM_ID=I.POM_ID
			End

			IF(Select POM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_Order_Master_Log
(Log_Operation ,Log_UserID ,POM_ID ,POM_OrderDate,nPOM_OrderDate,POM_OrderNo ,nPOM_OrderNo ,POM_Supplier ,nPOM_Supplier ,POM_ModeOfShipping ,
nPOM_ModeOfShipping ,POM_Status ,POM_YearID ,POM_CompID ,POM_IPAddress)

					SELECT 'De-Activated',I.POM_DeletedBy, I.POM_ID,D.POM_OrderDate,I.POM_OrderDate,D.POM_OrderNo,I.POM_OrderNo,D.POM_Supplier,I.POM_Supplier,
D.POM_ModeOfShipping,I.POM_ModeOfShipping,I.POM_Status,I.POM_YearID,I.POM_CompID,I.POM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.POM_ID=I.POM_ID
			End								
			
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_Order_Master_Log
(Log_Operation ,Log_UserID ,POM_ID ,nPOM_OrderDate,nPOM_OrderNo ,nPOM_Supplier ,
nPOM_ModeOfShipping ,POM_Status ,POM_YearID ,POM_CompID ,POM_IPAddress)
SELECT 'Created',POM_CreatedBy,POM_ID,POM_OrderDate,POM_OrderNo,POM_Supplier,
POM_ModeOfShipping,POM_Status,POM_YearID,POM_CompID,POM_IPAddress

 			 FROM Inserted
		END
	END
	
/	 

create trigger Purchase_Registry_Details_Log_Trigger On Purchase_Registry_Details For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select PRD_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_Registry_Details_Log
(Log_Operation,Log_UserID,PRD_ID  ,PRD_MasterID  ,nPRD_MasterID  ,PRD_OrderNo  ,nPRD_OrderNo  ,PRD_Commodity  ,nPRD_Commodity  ,PRD_DescID  ,
nPRD_DescID  ,PRD_HistoryID  ,nPRD_HistoryID  ,PRD_UnitID  ,nPRD_UnitID  ,PRD_OrderQuntity  ,nPRD_OrderQuntity  ,PRD_OrderRate  ,nPRD_OrderRate  ,
PRD_MRP  ,nPRD_MRP  ,PRD_RecievedQnt  ,nPRD_RecievedQnt  ,PRD_Discount  ,nPRD_Discount  ,PRD_DiscountAmount  ,nPRD_DiscountAmount  ,PRD_Excise  ,
nPRD_Excise  ,PRD_ExciseAmount  ,nPRD_ExciseAmount  ,PRD_VAT  ,nPRD_VAT  ,PRD_VATAmount  ,nPRD_VATAmount  ,PRD_CST  ,nPRD_CST  ,
PRD_CSTAmount  ,nPRD_CSTAmount  ,PRD_TotalAmount  ,nPRD_TotalAmount  ,PRD_CompID  ,PRD_Status  ,PRD_ExcessQty  ,NPRD_ExcessQty  ,
PRD_ManufactureDate  ,nPRD_ManufactureDate  ,PRD_ExpireDate  ,nPRD_ExpireDate  ,PRD_IPAddress)
SELECT 'Updated',I.PRD_UpdatedBy,I.PRD_ID,D.PRD_MasterID,I.PRD_MasterID,D.PRD_OrderNo,I.PRD_OrderNo,D.PRD_Commodity,I.PRD_Commodity,D.PRD_DescID,
I.PRD_DescID,D.PRD_HistoryID ,I.PRD_HistoryID ,D.PRD_UnitID ,I.PRD_UnitID ,D.PRD_OrderQuntity,I.PRD_OrderQuntity,D.PRD_OrderRate,I.PRD_OrderRate,
D.PRD_MRP ,I.PRD_MRP ,D.PRD_RecievedQnt,I.PRD_RecievedQnt,D.PRD_Discount,I.PRD_Discount,D.PRD_DiscountAmount ,I.PRD_DiscountAmount ,D.PRD_Excise ,I.PRD_Excise ,
D.PRD_ExciseAmount,I.PRD_ExciseAmount,D.PRD_VAT ,I.PRD_VAT ,D.PRD_VATAmount ,I.PRD_VATAmount ,D.PRD_CST ,I.PRD_CST ,D.PRD_CSTAmount ,I.PRD_CSTAmount ,
D.PRD_TotalAmount,I.PRD_TotalAmount,I.PRD_CompID,I.PRD_Status,D.PRD_ExcessQty ,I.PRD_ExcessQty ,D.PRD_ManufactureDate,I.PRD_ManufactureDate,D.PRD_ExpireDate,I.PRD_ExpireDate,I.PRD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRD_ID=I.PRD_ID
			End	
			
		
	IF(Select PRD_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_Registry_Details_Log
(Log_Operation,Log_UserID,PRD_ID  ,PRD_MasterID  ,nPRD_MasterID  ,PRD_OrderNo  ,nPRD_OrderNo  ,PRD_Commodity  ,nPRD_Commodity  ,PRD_DescID  ,
nPRD_DescID  ,PRD_HistoryID  ,nPRD_HistoryID  ,PRD_UnitID  ,nPRD_UnitID  ,PRD_OrderQuntity  ,nPRD_OrderQuntity  ,PRD_OrderRate  ,nPRD_OrderRate  ,
PRD_MRP  ,nPRD_MRP  ,PRD_RecievedQnt  ,nPRD_RecievedQnt  ,PRD_Discount  ,nPRD_Discount  ,PRD_DiscountAmount  ,nPRD_DiscountAmount  ,PRD_Excise  ,
nPRD_Excise  ,PRD_ExciseAmount  ,nPRD_ExciseAmount  ,PRD_VAT  ,nPRD_VAT  ,PRD_VATAmount  ,nPRD_VATAmount  ,PRD_CST  ,nPRD_CST  ,
PRD_CSTAmount  ,nPRD_CSTAmount  ,PRD_TotalAmount  ,nPRD_TotalAmount  ,PRD_CompID  ,PRD_Status  ,PRD_ExcessQty  ,NPRD_ExcessQty  ,
PRD_ManufactureDate  ,nPRD_ManufactureDate  ,PRD_ExpireDate  ,nPRD_ExpireDate  ,PRD_IPAddress)

					SELECT 'De-Activated(Not Approved)',I.PRD_DeletedBy,I.PRD_ID,D.PRD_MasterID,I.PRD_MasterID,D.PRD_OrderNo,I.PRD_OrderNo,D.PRD_Commodity,I.PRD_Commodity,D.PRD_DescID,
I.PRD_DescID,D.PRD_HistoryID ,I.PRD_HistoryID ,D.PRD_UnitID ,I.PRD_UnitID ,D.PRD_OrderQuntity,I.PRD_OrderQuntity,D.PRD_OrderRate,I.PRD_OrderRate,
D.PRD_MRP ,I.PRD_MRP ,D.PRD_RecievedQnt,I.PRD_RecievedQnt,D.PRD_Discount,I.PRD_Discount,D.PRD_DiscountAmount ,I.PRD_DiscountAmount ,D.PRD_Excise ,I.PRD_Excise ,
D.PRD_ExciseAmount,I.PRD_ExciseAmount,D.PRD_VAT ,I.PRD_VAT ,D.PRD_VATAmount ,I.PRD_VATAmount ,D.PRD_CST ,I.PRD_CST ,D.PRD_CSTAmount ,I.PRD_CSTAmount ,
D.PRD_TotalAmount,I.PRD_TotalAmount,I.PRD_CompID,I.PRD_Status,D.PRD_ExcessQty ,I.PRD_ExcessQty ,D.PRD_ManufactureDate,I.PRD_ManufactureDate,D.PRD_ExpireDate,I.PRD_ExpireDate,I.PRD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRD_ID=I.PRD_ID
			End

			IF(Select PRD_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_Registry_Details_Log
(Log_Operation,Log_UserID,PRD_ID  ,PRD_MasterID  ,nPRD_MasterID  ,PRD_OrderNo  ,nPRD_OrderNo  ,PRD_Commodity  ,nPRD_Commodity  ,PRD_DescID  ,
nPRD_DescID  ,PRD_HistoryID  ,nPRD_HistoryID  ,PRD_UnitID  ,nPRD_UnitID  ,PRD_OrderQuntity  ,nPRD_OrderQuntity  ,PRD_OrderRate  ,nPRD_OrderRate  ,
PRD_MRP  ,nPRD_MRP  ,PRD_RecievedQnt  ,nPRD_RecievedQnt  ,PRD_Discount  ,nPRD_Discount  ,PRD_DiscountAmount  ,nPRD_DiscountAmount  ,PRD_Excise  ,
nPRD_Excise  ,PRD_ExciseAmount  ,nPRD_ExciseAmount  ,PRD_VAT  ,nPRD_VAT  ,PRD_VATAmount  ,nPRD_VATAmount  ,PRD_CST  ,nPRD_CST  ,
PRD_CSTAmount  ,nPRD_CSTAmount  ,PRD_TotalAmount  ,nPRD_TotalAmount  ,PRD_CompID  ,PRD_Status  ,PRD_ExcessQty  ,NPRD_ExcessQty  ,
PRD_ManufactureDate  ,nPRD_ManufactureDate  ,PRD_ExpireDate  ,nPRD_ExpireDate  ,PRD_IPAddress)

					SELECT 'De-Activated',I.PRD_DeletedBy, I.PRD_ID,D.PRD_MasterID,I.PRD_MasterID,D.PRD_OrderNo,I.PRD_OrderNo,D.PRD_Commodity,I.PRD_Commodity,D.PRD_DescID,
I.PRD_DescID,D.PRD_HistoryID ,I.PRD_HistoryID ,D.PRD_UnitID ,I.PRD_UnitID ,D.PRD_OrderQuntity,I.PRD_OrderQuntity,D.PRD_OrderRate,I.PRD_OrderRate,
D.PRD_MRP ,I.PRD_MRP ,D.PRD_RecievedQnt,I.PRD_RecievedQnt,D.PRD_Discount,I.PRD_Discount,D.PRD_DiscountAmount ,I.PRD_DiscountAmount ,D.PRD_Excise ,I.PRD_Excise ,
D.PRD_ExciseAmount,I.PRD_ExciseAmount,D.PRD_VAT ,I.PRD_VAT ,D.PRD_VATAmount ,I.PRD_VATAmount ,D.PRD_CST ,I.PRD_CST ,D.PRD_CSTAmount ,I.PRD_CSTAmount ,
D.PRD_TotalAmount,I.PRD_TotalAmount,I.PRD_CompID,I.PRD_Status,D.PRD_ExcessQty ,I.PRD_ExcessQty ,D.PRD_ManufactureDate,I.PRD_ManufactureDate,D.PRD_ExpireDate,I.PRD_ExpireDate,I.PRD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRD_ID=I.PRD_ID
			End								
	IF(Select PRD_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Purchase_Registry_Details_Log
					(Log_Operation,Log_UserID,PRD_ID  ,PRD_MasterID  ,nPRD_MasterID  ,PRD_OrderNo  ,nPRD_OrderNo  ,PRD_Commodity  ,nPRD_Commodity  ,PRD_DescID  ,
nPRD_DescID  ,PRD_HistoryID  ,nPRD_HistoryID  ,PRD_UnitID  ,nPRD_UnitID  ,PRD_OrderQuntity  ,nPRD_OrderQuntity  ,PRD_OrderRate  ,nPRD_OrderRate  ,
PRD_MRP  ,nPRD_MRP  ,PRD_RecievedQnt  ,nPRD_RecievedQnt  ,PRD_Discount  ,nPRD_Discount  ,PRD_DiscountAmount  ,nPRD_DiscountAmount  ,PRD_Excise  ,
nPRD_Excise  ,PRD_ExciseAmount  ,nPRD_ExciseAmount  ,PRD_VAT  ,nPRD_VAT  ,PRD_VATAmount  ,nPRD_VATAmount  ,PRD_CST  ,nPRD_CST  ,
PRD_CSTAmount  ,nPRD_CSTAmount  ,PRD_TotalAmount  ,nPRD_TotalAmount  ,PRD_CompID  ,PRD_Status  ,PRD_ExcessQty  ,NPRD_ExcessQty  ,
PRD_ManufactureDate  ,nPRD_ManufactureDate  ,PRD_ExpireDate  ,nPRD_ExpireDate  ,PRD_IPAddress)
					SELECT 'Approved',I.PRD_ApprovedBy,I.PRD_ID,D.PRD_MasterID,I.PRD_MasterID,D.PRD_OrderNo,I.PRD_OrderNo,D.PRD_Commodity,I.PRD_Commodity,D.PRD_DescID,
I.PRD_DescID,D.PRD_HistoryID ,I.PRD_HistoryID ,D.PRD_UnitID ,I.PRD_UnitID ,D.PRD_OrderQuntity,I.PRD_OrderQuntity,D.PRD_OrderRate,I.PRD_OrderRate,
D.PRD_MRP ,I.PRD_MRP ,D.PRD_RecievedQnt,I.PRD_RecievedQnt,D.PRD_Discount,I.PRD_Discount,D.PRD_DiscountAmount ,I.PRD_DiscountAmount ,D.PRD_Excise ,I.PRD_Excise ,
D.PRD_ExciseAmount,I.PRD_ExciseAmount,D.PRD_VAT ,I.PRD_VAT ,D.PRD_VATAmount ,I.PRD_VATAmount ,D.PRD_CST ,I.PRD_CST ,D.PRD_CSTAmount ,I.PRD_CSTAmount ,
D.PRD_TotalAmount,I.PRD_TotalAmount,I.PRD_CompID,I.PRD_Status,D.PRD_ExcessQty ,I.PRD_ExcessQty ,D.PRD_ManufactureDate,I.PRD_ManufactureDate,D.PRD_ExpireDate,I.PRD_ExpireDate,I.PRD_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRD_ID=I.PRD_ID  
			End		
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_Registry_Details_Log
(Log_Operation,Log_UserID,PRD_ID  ,nPRD_MasterID  ,nPRD_OrderNo  ,nPRD_Commodity  ,
nPRD_DescID  ,nPRD_HistoryID  ,nPRD_UnitID  ,nPRD_OrderQuntity  ,nPRD_OrderRate  ,
nPRD_MRP  ,nPRD_RecievedQnt  ,nPRD_Discount  ,nPRD_DiscountAmount  ,
nPRD_Excise  ,nPRD_ExciseAmount  ,nPRD_VAT  ,nPRD_VATAmount  ,nPRD_CST  ,
nPRD_CSTAmount  ,nPRD_TotalAmount  ,PRD_CompID  ,PRD_Status  ,NPRD_ExcessQty  ,
nPRD_ManufactureDate  ,nPRD_ExpireDate  ,PRD_IPAddress)
SELECT 'Created',PRD_CreatedBy,PRD_ID,PRD_MasterID,PRD_OrderNo,PRD_Commodity,
PRD_DescID,PRD_HistoryID ,PRD_UnitID ,PRD_OrderQuntity,PRD_OrderRate,
PRD_MRP ,PRD_RecievedQnt,PRD_Discount,PRD_DiscountAmount ,PRD_Excise ,
PRD_ExciseAmount,PRD_VAT ,PRD_VATAmount ,PRD_CST ,PRD_CSTAmount ,
PRD_TotalAmount,PRD_CompID,PRD_Status,PRD_ExcessQty ,PRD_ManufactureDate,PRD_ExpireDate,PRD_IPAddress
 
 			 FROM Inserted
		END
	END

/

create trigger Purchase_Registry_master_Log_Trigger On Purchase_Registry_master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select PRM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_Registry_master_Log
(Log_Operation,Log_UserID,PRM_ID,PRM_OrderNo,nPRM_OrderNo,PRM_OrderDate,nPRM_OrderDate,PRM_InvoiceDate,nPRM_InvoiceDate,PRM_RegistryNo,
nPRM_RegistryNo ,PRM_Supplier ,nPRM_Supplier ,PRM_DocumentRefNo ,nPRM_DocumentRefNo ,PRM_ESugamNo ,nPRM_ESugamNo ,
PRM_YearID ,PRM_Status ,PRM_CompID ,PRM_IPAddress)
SELECT 'Updated',I.PRM_UpdatedBy,I.PRM_ID,D.PRM_OrderNo,I.PRM_OrderNo,D.PRM_OrderDate,I.PRM_OrderDate,D.PRM_InvoiceDate,I.PRM_InvoiceDate,
D.PRM_RegistryNo,I.PRM_RegistryNo,D.PRM_Supplier,I.PRM_Supplier,D.PRM_DocumentRefNo,I.PRM_DocumentRefNo,D.PRM_ESugamNo,I.PRM_ESugamNo,
I.PRM_YearID,I.PRM_Status,I.PRM_CompID,I.PRM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRM_ID=I.PRM_ID
			End	
			
		
	IF(Select PRM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_Registry_master_Log
(Log_Operation,Log_UserID,PRM_ID,PRM_OrderNo,nPRM_OrderNo,PRM_OrderDate,nPRM_OrderDate,PRM_InvoiceDate,nPRM_InvoiceDate,PRM_RegistryNo,
nPRM_RegistryNo ,PRM_Supplier ,nPRM_Supplier ,PRM_DocumentRefNo ,nPRM_DocumentRefNo ,PRM_ESugamNo ,nPRM_ESugamNo ,
PRM_YearID ,PRM_Status ,PRM_CompID ,PRM_IPAddress)

					SELECT 'De-Activated(Not Approved)',I.PRM_DeletedBy,I.PRM_ID,D.PRM_OrderNo,I.PRM_OrderNo,D.PRM_OrderDate,I.PRM_OrderDate,D.PRM_InvoiceDate,I.PRM_InvoiceDate,
D.PRM_RegistryNo,I.PRM_RegistryNo,D.PRM_Supplier,I.PRM_Supplier,D.PRM_DocumentRefNo,I.PRM_DocumentRefNo,D.PRM_ESugamNo,I.PRM_ESugamNo,
I.PRM_YearID,I.PRM_Status,I.PRM_CompID,I.PRM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRM_ID=I.PRM_ID
			End

			IF(Select PRM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_Registry_master_Log
(Log_Operation,Log_UserID,PRM_ID,PRM_OrderNo,nPRM_OrderNo,PRM_OrderDate,nPRM_OrderDate,PRM_InvoiceDate,nPRM_InvoiceDate,PRM_RegistryNo,
nPRM_RegistryNo ,PRM_Supplier ,nPRM_Supplier ,PRM_DocumentRefNo ,nPRM_DocumentRefNo ,PRM_ESugamNo ,nPRM_ESugamNo ,
PRM_YearID ,PRM_Status ,PRM_CompID ,PRM_IPAddress)

					SELECT 'De-Activated',I.PRM_DeletedBy, I.PRM_ID,D.PRM_OrderNo,I.PRM_OrderNo,D.PRM_OrderDate,I.PRM_OrderDate,D.PRM_InvoiceDate,I.PRM_InvoiceDate,
D.PRM_RegistryNo,I.PRM_RegistryNo,D.PRM_Supplier,I.PRM_Supplier,D.PRM_DocumentRefNo,I.PRM_DocumentRefNo,D.PRM_ESugamNo,I.PRM_ESugamNo,
I.PRM_YearID,I.PRM_Status,I.PRM_CompID,I.PRM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRM_ID=I.PRM_ID
			End								
	IF(Select PRM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Purchase_Registry_master_Log
					(Log_Operation,Log_UserID,PRM_ID,PRM_OrderNo,nPRM_OrderNo,PRM_OrderDate,nPRM_OrderDate,PRM_InvoiceDate,nPRM_InvoiceDate,PRM_RegistryNo,
nPRM_RegistryNo ,PRM_Supplier ,nPRM_Supplier ,PRM_DocumentRefNo ,nPRM_DocumentRefNo ,PRM_ESugamNo ,nPRM_ESugamNo ,
PRM_YearID ,PRM_Status ,PRM_CompID ,PRM_IPAddress)
					SELECT 'Approved',I.PRM_ApprovedBy,I.PRM_ID,D.PRM_OrderNo,I.PRM_OrderNo,D.PRM_OrderDate,I.PRM_OrderDate,D.PRM_InvoiceDate,I.PRM_InvoiceDate,
D.PRM_RegistryNo,I.PRM_RegistryNo,D.PRM_Supplier,I.PRM_Supplier,D.PRM_DocumentRefNo,I.PRM_DocumentRefNo,D.PRM_ESugamNo,I.PRM_ESugamNo,
I.PRM_YearID,I.PRM_Status,I.PRM_CompID,I.PRM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PRM_ID=I.PRM_ID
			End		
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_Registry_master_Log
(Log_Operation,Log_UserID,PRM_ID,nPRM_OrderNo,nPRM_OrderDate,nPRM_InvoiceDate,
nPRM_RegistryNo ,nPRM_Supplier ,nPRM_DocumentRefNo ,nPRM_ESugamNo ,
PRM_YearID ,PRM_Status ,PRM_CompID ,PRM_IPAddress)
SELECT 'Created',PRM_CreatedBy,PRM_ID,PRM_OrderNo,PRM_OrderDate,PRM_InvoiceDate,
PRM_RegistryNo,PRM_Supplier,PRM_DocumentRefNo,PRM_ESugamNo,
PRM_YearID,PRM_Status,PRM_CompID,PRM_IPAddress

			 FROM Inserted
		END
	END

/

create trigger Purchase_Verification_Log_Trigger On Purchase_Verification For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select PV_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Purchase_Verification_Log
(Log_Operation ,Log_UserID ,PV_ID ,PV_OrderNo ,nPV_OrderNo ,PV_GinNo ,nPV_GinNo ,PV_CompID ,PV_Status ,PV_BillNo ,
nPV_BillNo ,PV_DocRefNo ,nPV_DocRefNo ,PV_YearID ,PV_IPAddress)
SELECT 'Updated',I.PV_UpdatedBy,I.PV_ID,D.PV_OrderNo,I.PV_OrderNo,D.PV_GinNo,I.PV_GinNo,I.PV_CompID,I.PV_Status,D.PV_BillNo,I.PV_BillNo ,
D.PV_DocRefNo,I.PV_DocRefNo,I.PV_YearID,I.PV_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PV_ID=I.PV_ID
			End	
			
		
	IF(Select PV_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Purchase_Verification_Log
(Log_Operation ,Log_UserID ,PV_ID ,PV_OrderNo ,nPV_OrderNo ,PV_GinNo ,nPV_GinNo ,PV_CompID ,PV_Status ,PV_BillNo ,
nPV_BillNo ,PV_DocRefNo ,nPV_DocRefNo ,PV_YearID ,PV_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.PV_DeletedBy,I.PV_ID,D.PV_OrderNo,I.PV_OrderNo,D.PV_GinNo,I.PV_GinNo,I.PV_CompID,I.PV_Status,D.PV_BillNo,I.PV_BillNo ,
D.PV_DocRefNo,I.PV_DocRefNo,I.PV_YearID,I.PV_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PV_ID=I.PV_ID
			End

			IF(Select PV_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Purchase_Verification_Log
(Log_Operation ,Log_UserID ,PV_ID ,PV_OrderNo ,nPV_OrderNo ,PV_GinNo ,nPV_GinNo ,PV_CompID ,PV_Status ,PV_BillNo ,
nPV_BillNo ,PV_DocRefNo ,nPV_DocRefNo ,PV_YearID ,PV_IPAddress)

					SELECT 'De-Activated',I.PV_DeletedBy, I.PV_ID,D.PV_OrderNo,I.PV_OrderNo,D.PV_GinNo,I.PV_GinNo,I.PV_CompID,I.PV_Status,D.PV_BillNo,I.PV_BillNo ,
D.PV_DocRefNo,I.PV_DocRefNo,I.PV_YearID,I.PV_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PV_ID=I.PV_ID
			End								
	IF(Select PV_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Purchase_Verification_Log
					(Log_Operation ,Log_UserID ,PV_ID ,PV_OrderNo ,nPV_OrderNo ,PV_GinNo ,nPV_GinNo ,PV_CompID ,PV_Status ,PV_BillNo ,
nPV_BillNo ,PV_DocRefNo ,nPV_DocRefNo ,PV_YearID ,PV_IPAddress)
					SELECT 'Approved',I.PV_AppBy,I.PV_ID,D.PV_OrderNo,I.PV_OrderNo,D.PV_GinNo,I.PV_GinNo,I.PV_CompID,I.PV_Status,D.PV_BillNo,I.PV_BillNo ,
D.PV_DocRefNo,I.PV_DocRefNo,I.PV_YearID,I.PV_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.PV_ID=I.PV_ID
			End		
																			
		END
	ELSE
		BEGIN  
			INSERT INTO Purchase_Verification_Log
(Log_Operation ,Log_UserID ,PV_ID ,nPV_OrderNo ,nPV_GinNo ,PV_CompID ,PV_Status ,
nPV_BillNo ,nPV_DocRefNo ,PV_YearID ,PV_IPAddress)
SELECT 'Created',PV_CreatedBy,PV_ID,PV_OrderNo,PV_GinNo,PV_CompID,PV_Status,PV_BillNo ,
PV_DocRefNo,PV_YearID,PV_IPAddress
 
			 FROM Inserted
		END
	END

/

create trigger sad_UserDetails_Log_Trigger On sad_UserDetails For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select usr_Status from Inserted)='U'
				BEGIN       
				INSERT INTO sad_UserDetails_Log
					(Log_Operation ,Log_UserID ,usr_Id ,usr_Code ,nusr_Code ,usr_FullName ,nusr_FullName ,usr_LoginName ,nusr_LoginName ,usr_PassWord ,nusr_PassWord ,
usr_Email ,nusr_Email ,usr_DutyStatus ,nusr_DutyStatus ,usr_PhoneNo ,nusr_PhoneNo ,usr_MobileNo ,nusr_MobileNo ,usr_Designation ,nusr_Designation ,
usr_DelFlag ,usr_Status ,nusr_Status ,Usr_GrpOrUserLvlPerm ,nUsr_GrpOrUserLvlPerm ,usr_NoOfUnSucsfAtteptts ,nusr_NoOfUnSucsfAtteptts ,
usr_Que ,nusr_Que ,usr_Ans ,nusr_Ans ,USR_NoOfLogin ,nUSR_NoOfLogin ,USR_LastLoginDate ,nUSR_LastLoginDate ,usr_ReasonPwd_Block ,
nusr_ReasonPwd_Block ,USR_Address ,nUSR_Address ,USR_CompId ,USR_IPAddress)
SELECT 'Updated',I.usr_UpdatedBy,I.usr_Id,D.usr_Code,I.usr_Code,D.usr_FullName,I.usr_FullName,D.usr_LoginName ,I.usr_LoginName ,D.usr_PassWord,I.usr_PassWord,
D.usr_Email,I.usr_Email,D.usr_DutyStatus,I.usr_DutyStatus,D.usr_PhoneNo,I.usr_PhoneNo,D.usr_MobileNo,I.usr_MobileNo,D.usr_Designation,I.usr_Designation,
I.usr_DelFlag,D.usr_Status,I.usr_Status,D.Usr_GrpOrUserLvlPerm,I.Usr_GrpOrUserLvlPerm,D.usr_NoOfUnSucsfAtteptts,I.usr_NoOfUnSucsfAtteptts,D.usr_Que,I.usr_Que,
D.usr_Ans,I.usr_Ans,D.USR_NoOfLogin,I.USR_NoOfLogin,D.USR_LastLoginDate,I.USR_LastLoginDate,D.usr_ReasonPwd_Block,I.usr_ReasonPwd_Block,
D.USR_Address,I.USR_Address,I.USR_CompId,I.USR_IPAddress
					 FROM Inserted I Inner Join Deleted D ON D.usr_Id=I.usr_Id 
			End

			IF(Select usr_Status from Inserted)='A'
				BEGIN       
				INSERT INTO sad_UserDetails_Log
					(Log_Operation ,Log_UserID ,usr_Id ,usr_Code ,nusr_Code ,usr_FullName ,nusr_FullName ,usr_LoginName ,nusr_LoginName ,usr_PassWord ,nusr_PassWord ,
usr_Email ,nusr_Email ,usr_DutyStatus ,nusr_DutyStatus ,usr_PhoneNo ,nusr_PhoneNo ,usr_MobileNo ,nusr_MobileNo ,usr_Designation ,nusr_Designation ,
usr_DelFlag ,usr_Status ,nusr_Status ,Usr_GrpOrUserLvlPerm ,nUsr_GrpOrUserLvlPerm ,usr_NoOfUnSucsfAtteptts ,nusr_NoOfUnSucsfAtteptts ,
usr_Que ,nusr_Que ,usr_Ans ,nusr_Ans ,USR_NoOfLogin ,nUSR_NoOfLogin ,USR_LastLoginDate ,nUSR_LastLoginDate ,usr_ReasonPwd_Block ,
nusr_ReasonPwd_Block ,USR_Address ,nUSR_Address ,USR_CompId ,USR_IPAddress)
					SELECT 'Approved',I.usr_AppBy,I.usr_Id,D.usr_Code,I.usr_Code,D.usr_FullName,I.usr_FullName,D.usr_LoginName ,I.usr_LoginName ,D.usr_PassWord,I.usr_PassWord,
D.usr_Email,I.usr_Email,D.usr_DutyStatus,I.usr_DutyStatus,D.usr_PhoneNo,I.usr_PhoneNo,D.usr_MobileNo,I.usr_MobileNo,D.usr_Designation,I.usr_Designation,
I.usr_DelFlag,D.usr_Status,I.usr_Status,D.Usr_GrpOrUserLvlPerm,I.Usr_GrpOrUserLvlPerm,D.usr_NoOfUnSucsfAtteptts,I.usr_NoOfUnSucsfAtteptts,D.usr_Que,I.usr_Que,
D.usr_Ans,I.usr_Ans,D.USR_NoOfLogin,I.USR_NoOfLogin,D.USR_LastLoginDate,I.USR_LastLoginDate,D.usr_ReasonPwd_Block,I.usr_ReasonPwd_Block,
D.USR_Address,I.USR_Address,I.USR_CompId,I.USR_IPAddress
					 FROM Inserted I Inner Join Deleted D ON D.usr_Id=I.usr_Id  
			End

			IF(Select usr_Status from Inserted)='D'
				BEGIN       
				INSERT INTO sad_UserDetails_Log
					(Log_Operation ,Log_UserID ,usr_Id ,usr_Code ,nusr_Code ,usr_FullName ,nusr_FullName ,usr_LoginName ,nusr_LoginName ,usr_PassWord ,nusr_PassWord ,
usr_Email ,nusr_Email ,usr_DutyStatus ,nusr_DutyStatus ,usr_PhoneNo ,nusr_PhoneNo ,usr_MobileNo ,nusr_MobileNo ,usr_Designation ,nusr_Designation ,
usr_DelFlag ,usr_Status ,nusr_Status ,Usr_GrpOrUserLvlPerm ,nUsr_GrpOrUserLvlPerm ,usr_NoOfUnSucsfAtteptts ,nusr_NoOfUnSucsfAtteptts ,
usr_Que ,nusr_Que ,usr_Ans ,nusr_Ans ,USR_NoOfLogin ,nUSR_NoOfLogin ,USR_LastLoginDate ,nUSR_LastLoginDate ,usr_ReasonPwd_Block ,
nusr_ReasonPwd_Block ,USR_Address ,nUSR_Address ,USR_CompId ,USR_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.Usr_DeletedBy,I.usr_Id,D.usr_Code,I.usr_Code,D.usr_FullName,I.usr_FullName,D.usr_LoginName ,I.usr_LoginName ,D.usr_PassWord,I.usr_PassWord,
D.usr_Email,I.usr_Email,D.usr_DutyStatus,I.usr_DutyStatus,D.usr_PhoneNo,I.usr_PhoneNo,D.usr_MobileNo,I.usr_MobileNo,D.usr_Designation,I.usr_Designation,
I.usr_DelFlag,D.usr_Status,I.usr_Status,D.Usr_GrpOrUserLvlPerm,I.Usr_GrpOrUserLvlPerm,D.usr_NoOfUnSucsfAtteptts,I.usr_NoOfUnSucsfAtteptts,D.usr_Que,I.usr_Que,
D.usr_Ans,I.usr_Ans,D.USR_NoOfLogin,I.USR_NoOfLogin,D.USR_LastLoginDate,I.USR_LastLoginDate,D.usr_ReasonPwd_Block,I.usr_ReasonPwd_Block,
D.USR_Address,I.USR_Address,I.USR_CompId,I.USR_IPAddress
					 FROM Inserted I Inner Join Deleted D ON D.usr_Id=I.usr_Id  
			End

			IF(Select usr_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO sad_UserDetails_Log
					(Log_Operation ,Log_UserID ,usr_Id ,usr_Code ,nusr_Code ,usr_FullName ,nusr_FullName ,usr_LoginName ,nusr_LoginName ,usr_PassWord ,nusr_PassWord ,
usr_Email ,nusr_Email ,usr_DutyStatus ,nusr_DutyStatus ,usr_PhoneNo ,nusr_PhoneNo ,usr_MobileNo ,nusr_MobileNo ,usr_Designation ,nusr_Designation ,
usr_DelFlag ,usr_Status ,nusr_Status ,Usr_GrpOrUserLvlPerm ,nUsr_GrpOrUserLvlPerm ,usr_NoOfUnSucsfAtteptts ,nusr_NoOfUnSucsfAtteptts ,
usr_Que ,nusr_Que ,usr_Ans ,nusr_Ans ,USR_NoOfLogin ,nUSR_NoOfLogin ,USR_LastLoginDate ,nUSR_LastLoginDate ,usr_ReasonPwd_Block ,
nusr_ReasonPwd_Block ,USR_Address ,nUSR_Address ,USR_CompId ,USR_IPAddress)
					SELECT 'De-Activated',I.Usr_DeletedBy,I.usr_Id,D.usr_Code,I.usr_Code,D.usr_FullName,I.usr_FullName,D.usr_LoginName ,I.usr_LoginName ,D.usr_PassWord,I.usr_PassWord,
D.usr_Email,I.usr_Email,D.usr_DutyStatus,I.usr_DutyStatus,D.usr_PhoneNo,I.usr_PhoneNo,D.usr_MobileNo,I.usr_MobileNo,D.usr_Designation,I.usr_Designation,
I.usr_DelFlag,D.usr_Status,I.usr_Status,D.Usr_GrpOrUserLvlPerm,I.Usr_GrpOrUserLvlPerm,D.usr_NoOfUnSucsfAtteptts,I.usr_NoOfUnSucsfAtteptts,D.usr_Que,I.usr_Que,
D.usr_Ans,I.usr_Ans,D.USR_NoOfLogin,I.USR_NoOfLogin,D.USR_LastLoginDate,I.USR_LastLoginDate,D.usr_ReasonPwd_Block,I.usr_ReasonPwd_Block,
D.USR_Address,I.USR_Address,I.USR_CompId,I.USR_IPAddress
					 FROM Inserted I Inner Join Deleted D ON D.usr_Id=I.usr_Id 
			End

			IF(Select usr_Status from Inserted)='R'
				BEGIN       
				INSERT INTO sad_UserDetails_Log
					(Log_Operation ,Log_UserID ,usr_Id ,usr_Code ,nusr_Code ,usr_FullName ,nusr_FullName ,usr_LoginName ,nusr_LoginName ,usr_PassWord ,nusr_PassWord ,
usr_Email ,nusr_Email ,usr_DutyStatus ,nusr_DutyStatus ,usr_PhoneNo ,nusr_PhoneNo ,usr_MobileNo ,nusr_MobileNo ,usr_Designation ,nusr_Designation ,
usr_DelFlag ,usr_Status ,nusr_Status ,Usr_GrpOrUserLvlPerm ,nUsr_GrpOrUserLvlPerm ,usr_NoOfUnSucsfAtteptts ,nusr_NoOfUnSucsfAtteptts ,
usr_Que ,nusr_Que ,usr_Ans ,nusr_Ans ,USR_NoOfLogin ,nUSR_NoOfLogin ,USR_LastLoginDate ,nUSR_LastLoginDate ,usr_ReasonPwd_Block ,
nusr_ReasonPwd_Block ,USR_Address ,nUSR_Address ,USR_CompId ,USR_IPAddress)
					SELECT 'Activated(Not Approved)',I.Usr_RecalledBy,I.usr_Id,D.usr_Code,I.usr_Code,D.usr_FullName,I.usr_FullName,D.usr_LoginName ,I.usr_LoginName ,D.usr_PassWord,I.usr_PassWord,
D.usr_Email,I.usr_Email,D.usr_DutyStatus,I.usr_DutyStatus,D.usr_PhoneNo,I.usr_PhoneNo,D.usr_MobileNo,I.usr_MobileNo,D.usr_Designation,I.usr_Designation,
I.usr_DelFlag,D.usr_Status,I.usr_Status,D.Usr_GrpOrUserLvlPerm,I.Usr_GrpOrUserLvlPerm,D.usr_NoOfUnSucsfAtteptts,I.usr_NoOfUnSucsfAtteptts,D.usr_Que,I.usr_Que,
D.usr_Ans,I.usr_Ans,D.USR_NoOfLogin,I.USR_NoOfLogin,D.USR_LastLoginDate,I.USR_LastLoginDate,D.usr_ReasonPwd_Block,I.usr_ReasonPwd_Block,
D.USR_Address,I.USR_Address,I.USR_CompId,I.USR_IPAddress
					 FROM Inserted I Inner Join Deleted D ON D.usr_Id=I.usr_Id 
			End
			
			IF(Select usr_Status from Inserted)='AR'
				BEGIN       
				INSERT INTO sad_UserDetails_Log
					(Log_Operation ,Log_UserID ,usr_Id ,usr_Code ,nusr_Code ,usr_FullName ,nusr_FullName ,usr_LoginName ,nusr_LoginName ,usr_PassWord ,nusr_PassWord ,
usr_Email ,nusr_Email ,usr_DutyStatus ,nusr_DutyStatus ,usr_PhoneNo ,nusr_PhoneNo ,usr_MobileNo ,nusr_MobileNo ,usr_Designation ,nusr_Designation ,
usr_DelFlag ,usr_Status ,nusr_Status ,Usr_GrpOrUserLvlPerm ,nUsr_GrpOrUserLvlPerm ,usr_NoOfUnSucsfAtteptts ,nusr_NoOfUnSucsfAtteptts ,
usr_Que ,nusr_Que ,usr_Ans ,nusr_Ans ,USR_NoOfLogin ,nUSR_NoOfLogin ,USR_LastLoginDate ,nUSR_LastLoginDate ,usr_ReasonPwd_Block ,
nusr_ReasonPwd_Block ,USR_Address ,nUSR_Address ,USR_CompId ,USR_IPAddress)
				    SELECT 'Activated',I.Usr_RecalledBy,I.usr_Id,D.usr_Code,I.usr_Code,D.usr_FullName,I.usr_FullName,D.usr_LoginName ,I.usr_LoginName ,D.usr_PassWord,I.usr_PassWord,
D.usr_Email,I.usr_Email,D.usr_DutyStatus,I.usr_DutyStatus,D.usr_PhoneNo,I.usr_PhoneNo,D.usr_MobileNo,I.usr_MobileNo,D.usr_Designation,I.usr_Designation,
I.usr_DelFlag,D.usr_Status,I.usr_Status,D.Usr_GrpOrUserLvlPerm,I.Usr_GrpOrUserLvlPerm,D.usr_NoOfUnSucsfAtteptts,I.usr_NoOfUnSucsfAtteptts,D.usr_Que,I.usr_Que,
D.usr_Ans,I.usr_Ans,D.USR_NoOfLogin,I.USR_NoOfLogin,D.USR_LastLoginDate,I.USR_LastLoginDate,D.usr_ReasonPwd_Block,I.usr_ReasonPwd_Block,
D.USR_Address,I.USR_Address,I.USR_CompId,I.USR_IPAddress
					 FROM Inserted I Inner Join Deleted D ON D.usr_Id=I.usr_Id  
			End
			
		END
	ELSE
		BEGIN  
			INSERT INTO sad_UserDetails_Log
				(Log_Operation ,Log_UserID ,usr_Id ,nusr_Code ,nusr_FullName ,nusr_LoginName ,nusr_PassWord ,
nusr_Email ,nusr_DutyStatus ,nusr_PhoneNo ,nusr_MobileNo ,nusr_Designation ,
usr_DelFlag ,nusr_Status ,nUsr_GrpOrUserLvlPerm ,nusr_NoOfUnSucsfAtteptts ,
nusr_Que ,nusr_Ans ,nUSR_NoOfLogin ,nUSR_LastLoginDate ,
nusr_ReasonPwd_Block ,nUSR_Address ,USR_CompId ,USR_IPAddress)
				SELECT 'Created',usr_CreatedBy,usr_Id,usr_Code,usr_FullName,usr_LoginName ,usr_PassWord,
usr_Email,usr_DutyStatus,usr_PhoneNo,usr_MobileNo,usr_Designation,
usr_DelFlag,usr_Status,Usr_GrpOrUserLvlPerm,usr_NoOfUnSucsfAtteptts,usr_Que,
usr_Ans,USR_NoOfLogin,USR_LastLoginDate,usr_ReasonPwd_Block,
USR_Address,USR_CompId,USR_IPAddress
					 
			 FROM Inserted
		END
	END  

/

create trigger Sales_Allocate_Details_Log_Trigger On Sales_Allocate_Details For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SAD_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Sales_Allocate_Details_Log
(Log_Operation ,Log_UserID ,SAD_ID ,SAD_MasterID ,nSAD_MasterID ,SAD_Commodity ,nSAD_Commodity ,SAD_DescID ,nSAD_DescID ,SAD_HisotryID ,
nSAD_HisotryID ,SAD_OpeningBal ,nSAD_OpeningBal ,SAD_UnitID ,nSAD_UnitID ,SAD_MRP ,nSAD_MRP ,SAD_OrderQnt ,nSAD_OrderQnt ,SAD_OrderAmount ,
nSAD_OrderAmount ,SAD_Discount ,nSAD_Discount ,SAD_DiscountAMount ,nSAD_DiscountAMount ,SAD_TotalAmount ,nSAD_TotalAmount ,SAD_PlacedQnt ,
nSAD_PlacedQnt ,SAD_PlacedQntAmount ,nSAD_PlacedQntAmount ,SAD_PlacedDiscount ,nSAD_PlacedDiscount ,SAD_PlacedDiscountAmount ,nSAD_PlacedDiscountAmount ,
SAD_PlacedTotalAmount ,nSAD_PlacedTotalAmount ,SAD_ClosingBal ,nSAD_ClosingBal ,SAD_VAT ,nSAD_VAT ,SAD_VATAmount ,nSAD_VATAmount ,SAD_CST ,
nSAD_CST,SAD_CSTAmount,nSAD_CSTAmount,SAD_Exice,nSAD_Exice,SAD_ExiceAmount ,nSAD_ExiceAmount ,SAD_CompID ,SAD_YearID ,SAD_IPAddress ,SAD_Status)
SELECT 'Updated',I.SAD_UpdatedBy,I.SAD_ID,D.SAD_MasterID,I.SAD_MasterID,D.SAD_Commodity ,I.SAD_Commodity ,D.SAD_DescID ,I.SAD_DescID ,D.SAD_HisotryID,I.SAD_HisotryID,
D.SAD_OpeningBal,I.SAD_OpeningBal,D.SAD_UnitID ,I.SAD_UnitID ,D.SAD_MRP,I.SAD_MRP,D.SAD_OrderQnt ,I.SAD_OrderQnt ,D.SAD_OrderAmount,I.SAD_OrderAmount,
D.SAD_Discount,I.SAD_Discount,D.SAD_DiscountAMount,I.SAD_DiscountAMount,D.SAD_TotalAmount,I.SAD_TotalAmount,D.SAD_PlacedQnt,I.SAD_PlacedQnt,
D.SAD_PlacedQntAmount,I.SAD_PlacedQntAmount,D.SAD_PlacedDiscount,I.SAD_PlacedDiscount,D.SAD_PlacedDiscountAmount,I.SAD_PlacedDiscountAmount,
D.SAD_PlacedTotalAmount,I.SAD_PlacedTotalAmount,D.SAD_ClosingBal,I.SAD_ClosingBal,D.SAD_VAT ,I.SAD_VAT ,D.SAD_VATAmount,I.SAD_VATAmount,D.SAD_CST,I.SAD_CST,
D.SAD_CSTAmount,I.SAD_CSTAmount,D.SAD_Exice,I.SAD_Exice,D.SAD_ExiceAmount,I.SAD_ExiceAmount,I.SAD_CompID,I.SAD_YearID,I.SAD_IPAddress,I.SAD_Status
 FROM Inserted I Inner Join Deleted D ON D.SAD_ID =I.SAD_ID 
			End			

			IF(Select SAD_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Sales_Allocate_Details_Log
					(Log_Operation ,Log_UserID ,SAD_ID ,SAD_MasterID ,nSAD_MasterID ,SAD_Commodity ,nSAD_Commodity ,SAD_DescID ,nSAD_DescID ,SAD_HisotryID ,
nSAD_HisotryID ,SAD_OpeningBal ,nSAD_OpeningBal ,SAD_UnitID ,nSAD_UnitID ,SAD_MRP ,nSAD_MRP ,SAD_OrderQnt ,nSAD_OrderQnt ,SAD_OrderAmount ,
nSAD_OrderAmount ,SAD_Discount ,nSAD_Discount ,SAD_DiscountAMount ,nSAD_DiscountAMount ,SAD_TotalAmount ,nSAD_TotalAmount ,SAD_PlacedQnt ,
nSAD_PlacedQnt ,SAD_PlacedQntAmount ,nSAD_PlacedQntAmount ,SAD_PlacedDiscount ,nSAD_PlacedDiscount ,SAD_PlacedDiscountAmount ,nSAD_PlacedDiscountAmount ,
SAD_PlacedTotalAmount ,nSAD_PlacedTotalAmount ,SAD_ClosingBal ,nSAD_ClosingBal ,SAD_VAT ,nSAD_VAT ,SAD_VATAmount ,nSAD_VATAmount ,SAD_CST ,
nSAD_CST,SAD_CSTAmount,nSAD_CSTAmount,SAD_Exice,nSAD_Exice,SAD_ExiceAmount ,nSAD_ExiceAmount ,SAD_CompID ,SAD_YearID ,SAD_IPAddress ,SAD_Status)
					SELECT 'De-Activated(Not Approved)',I.SAD_DeletedBy,I.SAD_ID,D.SAD_MasterID,I.SAD_MasterID,D.SAD_Commodity ,I.SAD_Commodity ,D.SAD_DescID ,I.SAD_DescID ,D.SAD_HisotryID,I.SAD_HisotryID,
D.SAD_OpeningBal,I.SAD_OpeningBal,D.SAD_UnitID ,I.SAD_UnitID ,D.SAD_MRP,I.SAD_MRP,D.SAD_OrderQnt ,I.SAD_OrderQnt ,D.SAD_OrderAmount,I.SAD_OrderAmount,
D.SAD_Discount,I.SAD_Discount,D.SAD_DiscountAMount,I.SAD_DiscountAMount,D.SAD_TotalAmount,I.SAD_TotalAmount,D.SAD_PlacedQnt,I.SAD_PlacedQnt,
D.SAD_PlacedQntAmount,I.SAD_PlacedQntAmount,D.SAD_PlacedDiscount,I.SAD_PlacedDiscount,D.SAD_PlacedDiscountAmount,I.SAD_PlacedDiscountAmount,
D.SAD_PlacedTotalAmount,I.SAD_PlacedTotalAmount,D.SAD_ClosingBal,I.SAD_ClosingBal,D.SAD_VAT ,I.SAD_VAT ,D.SAD_VATAmount,I.SAD_VATAmount,D.SAD_CST,I.SAD_CST,
D.SAD_CSTAmount,I.SAD_CSTAmount,D.SAD_Exice,I.SAD_Exice,D.SAD_ExiceAmount,I.SAD_ExiceAmount,I.SAD_CompID,I.SAD_YearID,I.SAD_IPAddress,I.SAD_Status
 FROM Inserted I Inner Join Deleted D ON D.SAD_ID =I.SAD_ID 
			End

			IF(Select SAD_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Sales_Allocate_Details_Log
					(Log_Operation ,Log_UserID ,SAD_ID ,SAD_MasterID ,nSAD_MasterID ,SAD_Commodity ,nSAD_Commodity ,SAD_DescID ,nSAD_DescID ,SAD_HisotryID ,
nSAD_HisotryID ,SAD_OpeningBal ,nSAD_OpeningBal ,SAD_UnitID ,nSAD_UnitID ,SAD_MRP ,nSAD_MRP ,SAD_OrderQnt ,nSAD_OrderQnt ,SAD_OrderAmount ,
nSAD_OrderAmount ,SAD_Discount ,nSAD_Discount ,SAD_DiscountAMount ,nSAD_DiscountAMount ,SAD_TotalAmount ,nSAD_TotalAmount ,SAD_PlacedQnt ,
nSAD_PlacedQnt ,SAD_PlacedQntAmount ,nSAD_PlacedQntAmount ,SAD_PlacedDiscount ,nSAD_PlacedDiscount ,SAD_PlacedDiscountAmount ,nSAD_PlacedDiscountAmount ,
SAD_PlacedTotalAmount ,nSAD_PlacedTotalAmount ,SAD_ClosingBal ,nSAD_ClosingBal ,SAD_VAT ,nSAD_VAT ,SAD_VATAmount ,nSAD_VATAmount ,SAD_CST ,
nSAD_CST,SAD_CSTAmount,nSAD_CSTAmount,SAD_Exice,nSAD_Exice,SAD_ExiceAmount ,nSAD_ExiceAmount ,SAD_CompID ,SAD_YearID ,SAD_IPAddress ,SAD_Status)
					SELECT 'De-Activated',I.SAD_DeletedBy,I.SAD_ID,D.SAD_MasterID,I.SAD_MasterID,D.SAD_Commodity ,I.SAD_Commodity ,D.SAD_DescID ,I.SAD_DescID ,D.SAD_HisotryID,I.SAD_HisotryID,
D.SAD_OpeningBal,I.SAD_OpeningBal,D.SAD_UnitID ,I.SAD_UnitID ,D.SAD_MRP,I.SAD_MRP,D.SAD_OrderQnt ,I.SAD_OrderQnt ,D.SAD_OrderAmount,I.SAD_OrderAmount,
D.SAD_Discount,I.SAD_Discount,D.SAD_DiscountAMount,I.SAD_DiscountAMount,D.SAD_TotalAmount,I.SAD_TotalAmount,D.SAD_PlacedQnt,I.SAD_PlacedQnt,
D.SAD_PlacedQntAmount,I.SAD_PlacedQntAmount,D.SAD_PlacedDiscount,I.SAD_PlacedDiscount,D.SAD_PlacedDiscountAmount,I.SAD_PlacedDiscountAmount,
D.SAD_PlacedTotalAmount,I.SAD_PlacedTotalAmount,D.SAD_ClosingBal,I.SAD_ClosingBal,D.SAD_VAT ,I.SAD_VAT ,D.SAD_VATAmount,I.SAD_VATAmount,D.SAD_CST,I.SAD_CST,
D.SAD_CSTAmount,I.SAD_CSTAmount,D.SAD_Exice,I.SAD_Exice,D.SAD_ExiceAmount,I.SAD_ExiceAmount,I.SAD_CompID,I.SAD_YearID,I.SAD_IPAddress,I.SAD_Status
 FROM Inserted I Inner Join Deleted D ON D.SAD_ID =I.SAD_ID 
			End
						
		END
	ELSE
		BEGIN  
			INSERT INTO Sales_Allocate_Details_Log
				(Log_Operation ,Log_UserID ,SAD_ID ,nSAD_MasterID ,nSAD_Commodity ,nSAD_DescID ,
nSAD_HisotryID ,nSAD_OpeningBal ,nSAD_UnitID ,nSAD_MRP ,nSAD_OrderQnt ,
nSAD_OrderAmount ,nSAD_Discount ,nSAD_DiscountAMount ,nSAD_TotalAmount ,
nSAD_PlacedQnt ,nSAD_PlacedQntAmount ,nSAD_PlacedDiscount ,nSAD_PlacedDiscountAmount ,
nSAD_PlacedTotalAmount ,nSAD_ClosingBal ,nSAD_VAT ,nSAD_VATAmount ,
nSAD_CST,nSAD_CSTAmount,nSAD_Exice,nSAD_ExiceAmount ,SAD_CompID ,SAD_YearID ,SAD_IPAddress ,SAD_Status)
				SELECT 'Created',SAD_CreatedBy,SAD_ID,SAD_MasterID,SAD_Commodity ,SAD_DescID ,SAD_HisotryID,
SAD_OpeningBal,SAD_UnitID ,SAD_MRP,SAD_OrderQnt ,SAD_OrderAmount,
SAD_Discount,SAD_DiscountAMount,SAD_TotalAmount,SAD_PlacedQnt,
SAD_PlacedQntAmount,SAD_PlacedDiscount,SAD_PlacedDiscountAmount,
SAD_PlacedTotalAmount,SAD_ClosingBal,SAD_VAT ,SAD_VATAmount,SAD_CST,
SAD_CSTAmount,SAD_Exice,SAD_ExiceAmount,SAD_CompID,SAD_YearID,SAD_IPAddress,SAD_Status
					 
			 FROM Inserted
		END
	END  

/

create trigger Sales_Allocate_Master_Log_Trigger On Sales_Allocate_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SAM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Sales_Allocate_Master_Log
(Log_Operation,Log_UserID,SAM_ID,SAM_OrderNo,nSAM_OrderNo,SAM_Party,nSAM_Party,SAM_Remarks,nSAM_Remarks,SAM_Status,SAM_GrandDiscount,
nSAM_GrandDiscount ,SAM_GrandDiscountAmt ,nSAM_GrandDiscountAmt,SAM_GrandTotal,nSAM_GrandTotal,SAM_GrandTotalAmt,nSAM_GrandTotalAmt,SAM_CompID,
SAM_YearID,SAM_IPAddress)
SELECT 'Updated',I.SAM_UpdatedBy,I.SAM_ID,D.SAM_OrderNo,I.SAM_OrderNo,D.SAM_Party,I.SAM_Party,D.SAM_Remarks,I.SAM_Remarks,I.SAM_Status,D.SAM_GrandDiscount ,
I.SAM_GrandDiscount ,D.SAM_GrandDiscountAmt ,I.SAM_GrandDiscountAmt ,D.SAM_GrandTotal,I.SAM_GrandTotal,D.SAM_GrandTotalAmt,I.SAM_GrandTotalAmt,I.SAM_CompID,
I.SAM_YearID,I.SAM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SAM_ID=I.SAM_ID
			End			

			IF(Select SAM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Sales_Allocate_Master_Log
					(Log_Operation,Log_UserID  ,SAM_ID  ,SAM_OrderNo ,nSAM_OrderNo ,SAM_Party ,nSAM_Party ,SAM_Remarks ,nSAM_Remarks ,SAM_Status,SAM_GrandDiscount,
nSAM_GrandDiscount ,SAM_GrandDiscountAmt ,nSAM_GrandDiscountAmt,SAM_GrandTotal,nSAM_GrandTotal,SAM_GrandTotalAmt,nSAM_GrandTotalAmt,SAM_CompID,
SAM_YearID  ,SAM_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.SAM_DeletedBy,I.SAM_ID,D.SAM_OrderNo,I.SAM_OrderNo,D.SAM_Party,I.SAM_Party,D.SAM_Remarks,I.SAM_Remarks,I.SAM_Status,D.SAM_GrandDiscount,
I.SAM_GrandDiscount,D.SAM_GrandDiscountAmt,I.SAM_GrandDiscountAmt,D.SAM_GrandTotal,I.SAM_GrandTotal,D.SAM_GrandTotalAmt,I.SAM_GrandTotalAmt,I.SAM_CompID,
I.SAM_YearID,I.SAM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SAM_ID=I.SAM_ID
			End

			IF(Select SAM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Sales_Allocate_Master_Log
					(Log_Operation,Log_UserID  ,SAM_ID  ,SAM_OrderNo ,nSAM_OrderNo ,SAM_Party ,nSAM_Party ,SAM_Remarks ,nSAM_Remarks ,SAM_Status,SAM_GrandDiscount  ,
nSAM_GrandDiscount ,SAM_GrandDiscountAmt ,nSAM_GrandDiscountAmt,SAM_GrandTotal,nSAM_GrandTotal,SAM_GrandTotalAmt,nSAM_GrandTotalAmt,SAM_CompID  ,
SAM_YearID  ,SAM_IPAddress)
					SELECT 'De-Activated',I.SAM_DeletedBy,I.SAM_ID,D.SAM_OrderNo,I.SAM_OrderNo,D.SAM_Party,I.SAM_Party,D.SAM_Remarks,I.SAM_Remarks,I.SAM_Status,D.SAM_GrandDiscount ,
I.SAM_GrandDiscount ,D.SAM_GrandDiscountAmt ,I.SAM_GrandDiscountAmt ,D.SAM_GrandTotal,I.SAM_GrandTotal,D.SAM_GrandTotalAmt,I.SAM_GrandTotalAmt,I.SAM_CompID,
I.SAM_YearID,I.SAM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SAM_ID=I.SAM_ID
			End
			IF(Select SAM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Sales_Allocate_Master_Log
					(Log_Operation,Log_UserID  ,SAM_ID  ,SAM_OrderNo ,nSAM_OrderNo ,SAM_Party ,nSAM_Party ,SAM_Remarks ,nSAM_Remarks ,SAM_Status,SAM_GrandDiscount  ,
nSAM_GrandDiscount ,SAM_GrandDiscountAmt ,nSAM_GrandDiscountAmt,SAM_GrandTotal,nSAM_GrandTotal,SAM_GrandTotalAmt,nSAM_GrandTotalAmt,SAM_CompID  ,
SAM_YearID  ,SAM_IPAddress)
					SELECT 'Approved',I.SAM_ApprovedBy,I.SAM_ID,D.SAM_OrderNo,I.SAM_OrderNo,D.SAM_Party,I.SAM_Party,D.SAM_Remarks,I.SAM_Remarks,I.SAM_Status,D.SAM_GrandDiscount ,
I.SAM_GrandDiscount ,D.SAM_GrandDiscountAmt ,I.SAM_GrandDiscountAmt ,D.SAM_GrandTotal,I.SAM_GrandTotal,D.SAM_GrandTotalAmt,I.SAM_GrandTotalAmt,I.SAM_CompID,
I.SAM_YearID,I.SAM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SAM_ID=I.SAM_ID  
			End
						
		END
	ELSE
		BEGIN  
			INSERT INTO Sales_Allocate_Master_Log
(Log_Operation,Log_UserID  ,SAM_ID  ,nSAM_OrderNo ,nSAM_Party ,nSAM_Remarks ,SAM_Status,
nSAM_GrandDiscount ,nSAM_GrandDiscountAmt,nSAM_GrandTotal,nSAM_GrandTotalAmt,SAM_CompID,
SAM_YearID,SAM_IPAddress)
SELECT 'Created',SAM_CreatedBy,SAM_ID,SAM_OrderNo,SAM_Party,SAM_Remarks,SAM_Status,SAM_GrandDiscount ,
SAM_GrandDiscountAmt ,SAM_GrandTotal,SAM_GrandTotalAmt,SAM_CompID,
SAM_YearID,SAM_IPAddress
 
					 
			 FROM Inserted
		END
	END

/

create trigger Sales_Dispatch_Master_Log_Trigger On Sales_Dispatch_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SDM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Sales_Dispatch_Master_Log
(Log_Operation ,Log_UserID ,SDM_ID ,SDM_OrderID ,nSDM_OrderID ,SDM_OrderDate ,nSDM_OrderDate ,SDM_SupplierID ,nSDM_SupplierID ,SDM_DispatchDate ,
nSDM_DispatchDate ,SDM_ModeOfShipping ,nSDM_ModeOfShipping ,SDM_ExpectedDays ,nSDM_ExpectedDays ,SDM_PaymentType ,nSDM_PaymentType ,SDM_Status ,
SDM_YearID ,SDM_CompID ,SDM_ShippingRate ,nSDM_ShippingRate ,SDM_ChequeNo ,nSDM_ChequeNo ,SDM_ChequeDate ,nSDM_ChequeDate ,SDM_IFSCCode ,
nSDM_IFSCCode ,SDM_BankName ,nSDM_BankName ,SDM_Branch ,nSDM_Branch ,SDM_GrandDiscount ,nSDM_GrandDiscount ,SDM_GrandDiscountAmt ,
nSDM_GrandDiscountAmt ,SDM_GrandTotal ,nSDM_GrandTotal ,SDM_GrandTotalAmt ,nSDM_GrandTotalAmt ,SDM_IPAddress)
SELECT 'Updated',I.SDM_UpdatedBy,I.SDM_ID,D.SDM_OrderID ,I.SDM_OrderID ,D.SDM_OrderDate,I.SDM_OrderDate,D.SDM_SupplierID,I.SDM_SupplierID,
D.SDM_DispatchDate ,I.SDM_DispatchDate ,D.SDM_ModeOfShipping,I.SDM_ModeOfShipping,D.SDM_ExpectedDays,I.SDM_ExpectedDays,D.SDM_PaymentType,I.SDM_PaymentType,
I.SDM_Status,I.SDM_YearID,I.SDM_CompID,D.SDM_ShippingRate,I.SDM_ShippingRate,D.SDM_ChequeNo,I.SDM_ChequeNo,D.SDM_ChequeDate ,I.SDM_ChequeDate ,D.SDM_IFSCCode,I.SDM_IFSCCode,
D.SDM_BankName,I.SDM_BankName,D.SDM_Branch,I.SDM_Branch,D.SDM_GrandDiscount,I.SDM_GrandDiscount,D.SDM_GrandDiscountAmt,I.SDM_GrandDiscountAmt,
D.SDM_GrandTotal,I.SDM_GrandTotal,D.SDM_GrandTotalAmt ,I.SDM_GrandTotalAmt ,I.SDM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SDM_ID=I.SDM_ID
			End			

			
			IF(Select SDM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Sales_Dispatch_Master_Log
					(Log_Operation ,Log_UserID ,SDM_ID ,SDM_OrderID ,nSDM_OrderID ,SDM_OrderDate ,nSDM_OrderDate ,SDM_SupplierID ,nSDM_SupplierID ,SDM_DispatchDate ,
nSDM_DispatchDate ,SDM_ModeOfShipping ,nSDM_ModeOfShipping ,SDM_ExpectedDays ,nSDM_ExpectedDays ,SDM_PaymentType ,nSDM_PaymentType ,SDM_Status ,
SDM_YearID ,SDM_CompID ,SDM_ShippingRate ,nSDM_ShippingRate ,SDM_ChequeNo ,nSDM_ChequeNo ,SDM_ChequeDate ,nSDM_ChequeDate ,SDM_IFSCCode ,
nSDM_IFSCCode ,SDM_BankName ,nSDM_BankName ,SDM_Branch ,nSDM_Branch ,SDM_GrandDiscount ,nSDM_GrandDiscount ,SDM_GrandDiscountAmt ,
nSDM_GrandDiscountAmt ,SDM_GrandTotal ,nSDM_GrandTotal ,SDM_GrandTotalAmt ,nSDM_GrandTotalAmt ,SDM_IPAddress)
					SELECT 'Approved',I.SDM_ApprovedBy,I.SDM_ID,D.SDM_OrderID ,I.SDM_OrderID ,D.SDM_OrderDate,I.SDM_OrderDate,D.SDM_SupplierID,I.SDM_SupplierID,
D.SDM_DispatchDate ,I.SDM_DispatchDate ,D.SDM_ModeOfShipping,I.SDM_ModeOfShipping,D.SDM_ExpectedDays,I.SDM_ExpectedDays,D.SDM_PaymentType,I.SDM_PaymentType,
I.SDM_Status,I.SDM_YearID,I.SDM_CompID,D.SDM_ShippingRate,I.SDM_ShippingRate,D.SDM_ChequeNo,I.SDM_ChequeNo,D.SDM_ChequeDate ,I.SDM_ChequeDate ,D.SDM_IFSCCode,I.SDM_IFSCCode,
D.SDM_BankName,I.SDM_BankName,D.SDM_Branch,I.SDM_Branch,D.SDM_GrandDiscount,I.SDM_GrandDiscount,D.SDM_GrandDiscountAmt,I.SDM_GrandDiscountAmt,
D.SDM_GrandTotal,I.SDM_GrandTotal,D.SDM_GrandTotalAmt ,I.SDM_GrandTotalAmt ,I.SDM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SDM_ID=I.SDM_ID
			End
						
		END
	ELSE
		BEGIN  
			INSERT INTO Sales_Dispatch_Master_Log
(Log_Operation ,Log_UserID ,SDM_ID ,nSDM_OrderID ,nSDM_OrderDate ,nSDM_SupplierID ,
nSDM_DispatchDate ,nSDM_ModeOfShipping ,nSDM_ExpectedDays ,nSDM_PaymentType ,SDM_Status ,
SDM_YearID ,SDM_CompID ,nSDM_ShippingRate ,nSDM_ChequeNo ,nSDM_ChequeDate ,
nSDM_IFSCCode ,nSDM_BankName ,nSDM_Branch ,nSDM_GrandDiscount ,
nSDM_GrandDiscountAmt ,nSDM_GrandTotal ,nSDM_GrandTotalAmt ,SDM_IPAddress)
SELECT 'Created',SDM_CreatedBy,SDM_ID,SDM_OrderID ,SDM_OrderDate,SDM_SupplierID,
SDM_DispatchDate ,SDM_ModeOfShipping,SDM_ExpectedDays,SDM_PaymentType,
SDM_Status,SDM_YearID,SDM_CompID,SDM_ShippingRate,SDM_ChequeNo,SDM_ChequeDate ,SDM_IFSCCode,
SDM_BankName,SDM_Branch,SDM_GrandDiscount,SDM_GrandDiscountAmt,
SDM_GrandTotal,SDM_GrandTotalAmt ,SDM_IPAddress

 
					 
			 FROM Inserted
		END
	END

/

create trigger Sales_Proforma_Order_Details_Log_Trigger On Sales_Proforma_Order_Details For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SPOD_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Sales_Proforma_Order_Details_Log
(Log_Operation,Log_UserID  ,SPOD_Id  ,SPOD_SOID  ,nSPOD_SOID  ,SPOD_CommodityID  ,nSPOD_CommodityID  ,SPOD_ItemID ,nSPOD_ItemID ,SPOD_UnitofMeasurement  ,
nSPOD_UnitofMeasurement  ,SPOD_HistoryID  ,nSPOD_HistoryID  ,SPOD_MRPRate  ,nSPOD_MRPRate  ,SPOD_Quantity  ,nSPOD_Quantity  ,SPOD_Discount  ,
nSPOD_Discount  ,SPOD_RateAmount  ,nSPOD_RateAmount  ,SPOD_DiscountRate  ,nSPOD_DiscountRate  ,SPOD_TotalAmount ,nSPOD_TotalAmount ,SPOD_Status ,
SPOD_CompiD  ,SPOD_YearID  ,SPOD_VAT  ,nSPOD_VAT  ,SPOD_VATAmount  ,nSPOD_VATAmount  ,SPOD_CST  ,nSPOD_CST  ,SPOD_CSTAmount  ,nSPOD_CSTAmount  ,
SPOD_Excise  ,nSPOD_Excise  ,SPOD_ExciseAmount  ,nSPOD_ExciseAmount  ,SPOD_IPAddress )
SELECT 'Updated',I.SPOD_UpdatedBy,I.SPOD_Id,D.SPOD_SOID,I.SPOD_SOID,D.SPOD_CommodityID,I.SPOD_CommodityID,D.SPOD_ItemID,I.SPOD_ItemID,D.SPOD_UnitofMeasurement ,
I.SPOD_UnitofMeasurement ,D.SPOD_HistoryID ,I.SPOD_HistoryID ,D.SPOD_MRPRate,I.SPOD_MRPRate,D.SPOD_Quantity ,I.SPOD_Quantity ,D.SPOD_Discount,
I.SPOD_Discount,D.SPOD_RateAmount,I.SPOD_RateAmount,D.SPOD_DiscountRate ,I.SPOD_DiscountRate ,D.SPOD_TotalAmount,I.SPOD_TotalAmount,I.SPOD_Status,
I.SPOD_CompiD,I.SPOD_YearID,D.SPOD_VAT,I.SPOD_VAT,D.SPOD_VATAmount ,I.SPOD_VATAmount ,D.SPOD_CST,I.SPOD_CST,D.SPOD_CSTAmount,I.SPOD_CSTAmount,
D.SPOD_Excise ,I.SPOD_Excise ,D.SPOD_ExciseAmount,I.SPOD_ExciseAmount,I.SPOD_IPAddress 
 FROM Inserted I Inner Join Deleted D ON D.SPOD_ID=I.SPOD_ID
			End			

			
			IF(Select SPOD_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Sales_Proforma_Order_Details_Log
					(Log_Operation,Log_UserID  ,SPOD_Id  ,SPOD_SOID  ,nSPOD_SOID  ,SPOD_CommodityID  ,nSPOD_CommodityID  ,SPOD_ItemID ,nSPOD_ItemID ,SPOD_UnitofMeasurement  ,
nSPOD_UnitofMeasurement  ,SPOD_HistoryID  ,nSPOD_HistoryID  ,SPOD_MRPRate  ,nSPOD_MRPRate  ,SPOD_Quantity  ,nSPOD_Quantity  ,SPOD_Discount  ,
nSPOD_Discount  ,SPOD_RateAmount  ,nSPOD_RateAmount  ,SPOD_DiscountRate  ,nSPOD_DiscountRate  ,SPOD_TotalAmount ,nSPOD_TotalAmount ,SPOD_Status ,
SPOD_CompiD  ,SPOD_YearID  ,SPOD_VAT  ,nSPOD_VAT  ,SPOD_VATAmount  ,nSPOD_VATAmount  ,SPOD_CST  ,nSPOD_CST  ,SPOD_CSTAmount  ,nSPOD_CSTAmount  ,
SPOD_Excise  ,nSPOD_Excise  ,SPOD_ExciseAmount  ,nSPOD_ExciseAmount  ,SPOD_IPAddress )
					SELECT 'Approved',I.SPOD_ApprovedBy,I.SPOD_Id,D.SPOD_SOID,I.SPOD_SOID,D.SPOD_CommodityID,I.SPOD_CommodityID,D.SPOD_ItemID,I.SPOD_ItemID,D.SPOD_UnitofMeasurement ,
I.SPOD_UnitofMeasurement ,D.SPOD_HistoryID ,I.SPOD_HistoryID ,D.SPOD_MRPRate,I.SPOD_MRPRate,D.SPOD_Quantity ,I.SPOD_Quantity ,D.SPOD_Discount,
I.SPOD_Discount,D.SPOD_RateAmount,I.SPOD_RateAmount,D.SPOD_DiscountRate ,I.SPOD_DiscountRate ,D.SPOD_TotalAmount,I.SPOD_TotalAmount,I.SPOD_Status,
I.SPOD_CompiD,I.SPOD_YearID,D.SPOD_VAT,I.SPOD_VAT,D.SPOD_VATAmount ,I.SPOD_VATAmount ,D.SPOD_CST,I.SPOD_CST,D.SPOD_CSTAmount,I.SPOD_CSTAmount,
D.SPOD_Excise ,I.SPOD_Excise ,D.SPOD_ExciseAmount,I.SPOD_ExciseAmount,I.SPOD_IPAddress 
 FROM Inserted I Inner Join Deleted D ON D.SPOD_ID=I.SPOD_ID
			End
						
		END
	ELSE
		BEGIN  
			INSERT INTO Sales_Proforma_Order_Details_Log
(Log_Operation,Log_UserID  ,SPOD_Id  ,nSPOD_SOID  ,nSPOD_CommodityID  ,nSPOD_ItemID ,
nSPOD_UnitofMeasurement  ,nSPOD_HistoryID  ,nSPOD_MRPRate  ,nSPOD_Quantity  ,
nSPOD_Discount  ,nSPOD_RateAmount  ,nSPOD_DiscountRate  ,nSPOD_TotalAmount ,SPOD_Status ,
SPOD_CompiD  ,SPOD_YearID  ,nSPOD_VAT  ,nSPOD_VATAmount  ,nSPOD_CST  ,nSPOD_CSTAmount  ,
nSPOD_Excise  ,nSPOD_ExciseAmount  ,SPOD_IPAddress )
SELECT 'Created',SPOD_CreatedBy,SPOD_Id,SPOD_SOID,SPOD_CommodityID,SPOD_ItemID,
SPOD_UnitofMeasurement ,SPOD_HistoryID ,SPOD_MRPRate,SPOD_Quantity ,
SPOD_Discount,SPOD_RateAmount,SPOD_DiscountRate ,SPOD_TotalAmount,SPOD_Status,
SPOD_CompiD,SPOD_YearID,SPOD_VAT,SPOD_VATAmount ,SPOD_CST,SPOD_CSTAmount,
SPOD_Excise ,SPOD_ExciseAmount,SPOD_IPAddress 
 				 
			 FROM Inserted
		END
	END

/

create trigger Sales_Proforma_Order_Log_Trigger On Sales_Proforma_Order For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SPO_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Sales_Proforma_Order_Log
(Log_Operation ,Log_UserID ,SPO_ID ,SPO_OrderCode ,nSPO_OrderCode ,SPO_OrderDate ,nSPO_OrderDate ,SPO_PartyCode ,nSPO_PartyCode ,
SPO_PartyName ,nSPO_PartyName ,SPO_Address ,nSPO_Address ,SPO_ContantNo ,nSPO_ContantNo ,SPO_ModeOfDispatch ,nSPO_ModeOfDispatch ,
SPO_ShippingDate ,nSPO_ShippingDate ,SPO_PaymentType ,nSPO_PaymentType ,SPO_Status ,SPO_CompID ,SPO_ModeOfCommunication ,nSPO_ModeOfCommunication ,
SPO_InputBy ,nSPO_InputBy ,SPO_ShippingCharge ,nSPO_ShippingCharge ,SPO_OrderType ,nSPO_OrderType ,SPO_GrandDiscount ,nSPO_GrandDiscount ,
SPO_GrandDiscountAmt ,nSPO_GrandDiscountAmt ,SPO_GrandTotal ,nSPO_GrandTotal ,SPO_GrandTotalAmt ,nSPO_GrandTotalAmt ,SPO_YearID ,SPO_IPAddress)

SELECT 'Updated',I.SPO_UpdatedBy,I.SPO_ID,D.SPO_OrderCode,I.SPO_OrderCode,D.SPO_OrderDate,I.SPO_OrderDate,D.SPO_PartyCode ,I.SPO_PartyCode ,
D.SPO_PartyName,I.SPO_PartyName,D.SPO_Address,I.SPO_Address,D.SPO_ContantNo,I.SPO_ContantNo,D.SPO_ModeOfDispatch,I.SPO_ModeOfDispatch,
D.SPO_ShippingDate,I.SPO_ShippingDate,D.SPO_PaymentType,I.SPO_PaymentType,I.SPO_Status,I.SPO_CompID,D.SPO_ModeOfCommunication,I.SPO_ModeOfCommunication,
D.SPO_InputBy,I.SPO_InputBy,D.SPO_ShippingCharge,I.SPO_ShippingCharge,D.SPO_OrderType,I.SPO_OrderType,D.SPO_GrandDiscount,I.SPO_GrandDiscount,
D.SPO_GrandDiscountAmt,I.SPO_GrandDiscountAmt,D.SPO_GrandTotal,I.SPO_GrandTotal,D.SPO_GrandTotalAmt,I.SPO_GrandTotalAmt,I.SPO_YearID,I.SPO_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SPO_ID=I.SPO_ID
			End			

			IF(Select SPO_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Sales_Proforma_Order_Log
					(Log_Operation ,Log_UserID ,SPO_ID ,SPO_OrderCode ,nSPO_OrderCode ,SPO_OrderDate ,nSPO_OrderDate ,SPO_PartyCode ,nSPO_PartyCode ,
SPO_PartyName ,nSPO_PartyName ,SPO_Address ,nSPO_Address ,SPO_ContantNo ,nSPO_ContantNo ,SPO_ModeOfDispatch ,nSPO_ModeOfDispatch ,
SPO_ShippingDate ,nSPO_ShippingDate ,SPO_PaymentType ,nSPO_PaymentType ,SPO_Status ,SPO_CompID ,SPO_ModeOfCommunication ,nSPO_ModeOfCommunication ,
SPO_InputBy ,nSPO_InputBy ,SPO_ShippingCharge ,nSPO_ShippingCharge ,SPO_OrderType ,nSPO_OrderType ,SPO_GrandDiscount ,nSPO_GrandDiscount ,
SPO_GrandDiscountAmt ,nSPO_GrandDiscountAmt ,SPO_GrandTotal ,nSPO_GrandTotal ,SPO_GrandTotalAmt ,nSPO_GrandTotalAmt ,SPO_YearID ,SPO_IPAddress)
					SELECT 'De-Activated(Not Approved)',I.SPO_DeletedBy,I.SPO_ID,D.SPO_OrderCode,I.SPO_OrderCode,D.SPO_OrderDate,I.SPO_OrderDate,D.SPO_PartyCode ,I.SPO_PartyCode ,
D.SPO_PartyName,I.SPO_PartyName,D.SPO_Address,I.SPO_Address,D.SPO_ContantNo,I.SPO_ContantNo,D.SPO_ModeOfDispatch,I.SPO_ModeOfDispatch,
D.SPO_ShippingDate,I.SPO_ShippingDate,D.SPO_PaymentType,I.SPO_PaymentType,I.SPO_Status,I.SPO_CompID,D.SPO_ModeOfCommunication,I.SPO_ModeOfCommunication,
D.SPO_InputBy,I.SPO_InputBy,D.SPO_ShippingCharge,I.SPO_ShippingCharge,D.SPO_OrderType,I.SPO_OrderType,D.SPO_GrandDiscount,I.SPO_GrandDiscount,
D.SPO_GrandDiscountAmt,I.SPO_GrandDiscountAmt,D.SPO_GrandTotal,I.SPO_GrandTotal,D.SPO_GrandTotalAmt,I.SPO_GrandTotalAmt,I.SPO_YearID,I.SPO_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SPO_ID=I.SPO_ID
			End

			IF(Select SPO_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Sales_Proforma_Order_Log
					(Log_Operation ,Log_UserID ,SPO_ID ,SPO_OrderCode ,nSPO_OrderCode ,SPO_OrderDate ,nSPO_OrderDate ,SPO_PartyCode ,nSPO_PartyCode ,
SPO_PartyName ,nSPO_PartyName ,SPO_Address ,nSPO_Address ,SPO_ContantNo ,nSPO_ContantNo ,SPO_ModeOfDispatch ,nSPO_ModeOfDispatch ,
SPO_ShippingDate ,nSPO_ShippingDate ,SPO_PaymentType ,nSPO_PaymentType ,SPO_Status ,SPO_CompID ,SPO_ModeOfCommunication ,nSPO_ModeOfCommunication ,
SPO_InputBy ,nSPO_InputBy ,SPO_ShippingCharge ,nSPO_ShippingCharge ,SPO_OrderType ,nSPO_OrderType ,SPO_GrandDiscount ,nSPO_GrandDiscount ,
SPO_GrandDiscountAmt ,nSPO_GrandDiscountAmt ,SPO_GrandTotal ,nSPO_GrandTotal ,SPO_GrandTotalAmt ,nSPO_GrandTotalAmt ,SPO_YearID ,SPO_IPAddress)
					SELECT 'De-Activated',I.SPO_DeletedBy,I.SPO_ID,D.SPO_OrderCode,I.SPO_OrderCode,D.SPO_OrderDate,I.SPO_OrderDate,D.SPO_PartyCode ,I.SPO_PartyCode ,
D.SPO_PartyName,I.SPO_PartyName,D.SPO_Address,I.SPO_Address,D.SPO_ContantNo,I.SPO_ContantNo,D.SPO_ModeOfDispatch,I.SPO_ModeOfDispatch,
D.SPO_ShippingDate,I.SPO_ShippingDate,D.SPO_PaymentType,I.SPO_PaymentType,I.SPO_Status,I.SPO_CompID,D.SPO_ModeOfCommunication,I.SPO_ModeOfCommunication,
D.SPO_InputBy,I.SPO_InputBy,D.SPO_ShippingCharge,I.SPO_ShippingCharge,D.SPO_OrderType,I.SPO_OrderType,D.SPO_GrandDiscount,I.SPO_GrandDiscount,
D.SPO_GrandDiscountAmt,I.SPO_GrandDiscountAmt,D.SPO_GrandTotal,I.SPO_GrandTotal,D.SPO_GrandTotalAmt,I.SPO_GrandTotalAmt,I.SPO_YearID,I.SPO_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SPO_ID=I.SPO_ID
			End
			IF(Select SPO_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Sales_Proforma_Order_Log
					(Log_Operation ,Log_UserID ,SPO_ID ,SPO_OrderCode ,nSPO_OrderCode ,SPO_OrderDate ,nSPO_OrderDate ,SPO_PartyCode ,nSPO_PartyCode ,
SPO_PartyName ,nSPO_PartyName ,SPO_Address ,nSPO_Address ,SPO_ContantNo ,nSPO_ContantNo ,SPO_ModeOfDispatch ,nSPO_ModeOfDispatch ,
SPO_ShippingDate ,nSPO_ShippingDate ,SPO_PaymentType ,nSPO_PaymentType ,SPO_Status ,SPO_CompID ,SPO_ModeOfCommunication ,nSPO_ModeOfCommunication ,
SPO_InputBy ,nSPO_InputBy ,SPO_ShippingCharge ,nSPO_ShippingCharge ,SPO_OrderType ,nSPO_OrderType ,SPO_GrandDiscount ,nSPO_GrandDiscount ,
SPO_GrandDiscountAmt ,nSPO_GrandDiscountAmt ,SPO_GrandTotal ,nSPO_GrandTotal ,SPO_GrandTotalAmt ,nSPO_GrandTotalAmt ,SPO_YearID ,SPO_IPAddress)
					SELECT 'Approved',I.SPO_ApprovedBy,I.SPO_ID,D.SPO_OrderCode,I.SPO_OrderCode,D.SPO_OrderDate,I.SPO_OrderDate,D.SPO_PartyCode ,I.SPO_PartyCode ,
D.SPO_PartyName,I.SPO_PartyName,D.SPO_Address,I.SPO_Address,D.SPO_ContantNo,I.SPO_ContantNo,D.SPO_ModeOfDispatch,I.SPO_ModeOfDispatch,
D.SPO_ShippingDate,I.SPO_ShippingDate,D.SPO_PaymentType,I.SPO_PaymentType,I.SPO_Status,I.SPO_CompID,D.SPO_ModeOfCommunication,I.SPO_ModeOfCommunication,
D.SPO_InputBy,I.SPO_InputBy,D.SPO_ShippingCharge,I.SPO_ShippingCharge,D.SPO_OrderType,I.SPO_OrderType,D.SPO_GrandDiscount,I.SPO_GrandDiscount,
D.SPO_GrandDiscountAmt,I.SPO_GrandDiscountAmt,D.SPO_GrandTotal,I.SPO_GrandTotal,D.SPO_GrandTotalAmt,I.SPO_GrandTotalAmt,I.SPO_YearID,I.SPO_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SPO_ID=I.SPO_ID
			End
						
		END
	ELSE
		BEGIN  
			INSERT INTO Sales_Proforma_Order_Log
(Log_Operation ,Log_UserID ,SPO_ID ,nSPO_OrderCode ,nSPO_OrderDate ,nSPO_PartyCode ,
nSPO_PartyName ,nSPO_Address ,nSPO_ContantNo ,nSPO_ModeOfDispatch ,
nSPO_ShippingDate ,nSPO_PaymentType ,SPO_Status ,SPO_CompID ,nSPO_ModeOfCommunication ,
nSPO_InputBy ,nSPO_ShippingCharge ,nSPO_OrderType ,nSPO_GrandDiscount ,
nSPO_GrandDiscountAmt ,nSPO_GrandTotal ,nSPO_GrandTotalAmt ,SPO_YearID ,SPO_IPAddress)
SELECT 'Created',SPO_CreatedBy,SPO_ID,SPO_OrderCode,SPO_OrderDate,SPO_PartyCode ,
SPO_PartyName,SPO_Address,SPO_ContantNo,SPO_ModeOfDispatch,
SPO_ShippingDate,SPO_PaymentType,SPO_Status,SPO_CompID,SPO_ModeOfCommunication,
SPO_InputBy,SPO_ShippingCharge,SPO_OrderType,SPO_GrandDiscount,
SPO_GrandDiscountAmt,SPO_GrandTotal,SPO_GrandTotalAmt,SPO_YearID,SPO_IPAddress
 
				 
			 FROM Inserted
		END
	END

/

create trigger Schedule_Linkage_Master_Log_Trigger On Schedule_Linkage_Master For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SLM_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Schedule_Linkage_Master_Log
(Log_Operation ,Log_UserID,SLM_ID,SLM_Head,nSLM_Head,SLM_GroupID,nSLM_GroupID,SLM_SubGroupID,nSLM_SubGroupID,SLM_GLId,
nSLM_GLId,SLM_GLLedger ,nSLM_GLLedger ,SLM_Status ,SLM_YearID,SLM_CompID,SLM_NoteNo,nSLM_NoteNo,SLM_IPAddress)

SELECT 'Updated',I.SLM_UpdatedBy,I.SLM_ID,D.SLM_Head,I.SLM_Head,D.SLM_GroupID,I.SLM_GroupID,D.SLM_SubGroupID,I.SLM_SubGroupID,D.SLM_GLId,
I.SLM_GLId,D.SLM_GLLedger,I.SLM_GLLedger,I.SLM_Status,I.SLM_YearID,I.SLM_CompID,D.SLM_NoteNo,I.SLM_NoteNo,I.SLM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SLM_ID=I.SLM_ID
			End			

			IF(Select SLM_Status from Inserted)='D'
				BEGIN       
				INSERT INTO Schedule_Linkage_Master_Log
					(Log_Operation ,Log_UserID,SLM_ID,SLM_Head,nSLM_Head,SLM_GroupID,nSLM_GroupID,SLM_SubGroupID,nSLM_SubGroupID,SLM_GLId,
nSLM_GLId,SLM_GLLedger ,nSLM_GLLedger ,SLM_Status ,SLM_YearID,SLM_CompID,SLM_NoteNo,nSLM_NoteNo,SLM_IPAddress)

					SELECT 'De-Activated(Not Approved)',I.SLM_DeletedBy,I.SLM_ID,D.SLM_Head,I.SLM_Head,D.SLM_GroupID,I.SLM_GroupID,D.SLM_SubGroupID,I.SLM_SubGroupID,D.SLM_GLId,
I.SLM_GLId,D.SLM_GLLedger,I.SLM_GLLedger,I.SLM_Status,I.SLM_YearID,I.SLM_CompID,D.SLM_NoteNo,I.SLM_NoteNo,I.SLM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SLM_ID=I.SLM_ID
			End

			IF(Select SLM_Status from Inserted)='AD'
				BEGIN       
				INSERT INTO Schedule_Linkage_Master_Log
					(Log_Operation ,Log_UserID,SLM_ID,SLM_Head,nSLM_Head,SLM_GroupID,nSLM_GroupID,SLM_SubGroupID,nSLM_SubGroupID,SLM_GLId,
nSLM_GLId,SLM_GLLedger ,nSLM_GLLedger ,SLM_Status ,SLM_YearID,SLM_CompID,SLM_NoteNo,nSLM_NoteNo,SLM_IPAddress)

					SELECT 'De-Activated',I.SLM_DeletedBy,I.SLM_ID,D.SLM_Head,I.SLM_Head,D.SLM_GroupID,I.SLM_GroupID,D.SLM_SubGroupID,I.SLM_SubGroupID,D.SLM_GLId,
I.SLM_GLId,D.SLM_GLLedger,I.SLM_GLLedger,I.SLM_Status,I.SLM_YearID,I.SLM_CompID,D.SLM_NoteNo,I.SLM_NoteNo,I.SLM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SLM_ID=I.SLM_ID
			End
			IF(Select SLM_Status from Inserted)='A'
				BEGIN       
				INSERT INTO Schedule_Linkage_Master_Log
					(Log_Operation ,Log_UserID,SLM_ID,SLM_Head,nSLM_Head,SLM_GroupID,nSLM_GroupID,SLM_SubGroupID,nSLM_SubGroupID,SLM_GLId,
nSLM_GLId,SLM_GLLedger ,nSLM_GLLedger ,SLM_Status ,SLM_YearID,SLM_CompID,SLM_NoteNo,nSLM_NoteNo,SLM_IPAddress)

					SELECT 'Approved',I.SLM_ApprovedBy,I.SLM_ID,D.SLM_Head,I.SLM_Head,D.SLM_GroupID,I.SLM_GroupID,D.SLM_SubGroupID,I.SLM_SubGroupID,D.SLM_GLId,
I.SLM_GLId,D.SLM_GLLedger,I.SLM_GLLedger,I.SLM_Status,I.SLM_YearID,I.SLM_CompID,D.SLM_NoteNo,I.SLM_NoteNo,I.SLM_IPAddress
 FROM Inserted I Inner Join Deleted D ON D.SLM_ID=I.SLM_ID
			End
						
		END
	ELSE
		BEGIN  
			INSERT INTO Schedule_Linkage_Master_Log
(Log_Operation ,Log_UserID,SLM_ID,nSLM_Head,nSLM_GroupID,nSLM_SubGroupID,
nSLM_GLId,nSLM_GLLedger ,SLM_Status ,SLM_YearID,SLM_CompID,nSLM_NoteNo,SLM_IPAddress)

SELECT 'Created',SLM_CreatedBy,SLM_ID,SLM_Head,SLM_GroupID,SLM_SubGroupID,
SLM_GLId,SLM_GLLedger,SLM_Status,SLM_YearID,SLM_CompID,SLM_NoteNo,SLM_IPAddress
				 
			 FROM Inserted
		END
	END

/

create trigger Stock_Ledger_Log_Trigger On Stock_Ledger For UPDATE,INSERT As  
	IF(Select count(*) from Inserted)>0  
	BEGIN  
	IF(Select count(*) from Deleted)>0 
		BEGIN  
			IF(Select SL_Status from Inserted)='U'
				BEGIN       
				INSERT INTO Stock_Ledger_Log

(Log_Operation,Log_UserID  ,SL_ID  ,SL_Commodity  ,nSL_Commodity  ,SL_Date ,nSL_Date ,SL_ItemID  ,nSL_ItemID  ,SL_OpeningBalanceQty  ,
nSL_OpeningBalanceQty,SL_ClosingBalanceQty  ,nSL_ClosingBalanceQty  ,SL_CompID  ,SL_YearID  ,SL_historyId  ,nSL_historyId ,SL_IPAddress ,SL_Status)

SELECT 'Updated',I.SL_UpdatedBy,I.SL_ID ,D.SL_Commodity ,I.SL_Commodity ,D.SL_Date,I.SL_Date,D.SL_ItemID  ,I.SL_ItemID  ,D.SL_OpeningBalanceQty,
I.SL_OpeningBalanceQty,D.SL_ClosingBalanceQty ,I.SL_ClosingBalanceQty ,I.SL_CompID,I.SL_CompID,D.SL_historyId,I.SL_historyId,
I.SL_IPAddress,I.SL_Status
 FROM Inserted I Inner Join Deleted D ON D.SL_ID=I.SL_ID
			End					
						
		END
	ELSE
		BEGIN  
			INSERT INTO Stock_Ledger_Log
(Log_Operation,Log_UserID  ,SL_ID  ,nSL_Commodity  ,nSL_Date ,nSL_ItemID  ,
nSL_OpeningBalanceQty  ,nSL_ClosingBalanceQty  ,SL_CompID  ,SL_YearID  ,nSL_historyId  , SL_IPAddress ,SL_Status)

SELECT 'Created',SL_CrBy,SL_ID ,SL_Commodity ,SL_Date,SL_ItemID  ,
SL_OpeningBalanceQty,SL_ClosingBalanceQty ,SL_CompID,SL_CompID,SL_historyId,SL_IPAddress,SL_Status			 
			 FROM Inserted
		END
	END
/

Create PROCEDURE spApplicationSettings
(
@SAD_Config_Key varchar(100),
@SAD_Config_Value varchar(100),
@SAD_CompID int, 
@iOper int Output    
)
As      
  If exists(Select Sad_config_ID from sad_config_settings where SAD_CompID= @SAD_CompID And sad_Config_Key=@sad_Config_Key) 
  Begin  
  Update sad_config_settings set sad_Config_Value=@SAD_Config_Value
  Where SAD_CompID = @SAD_CompID  And sad_Config_Key=@sad_Config_Key
  Set @iOper=2 	
END
Else     
 Begin 
  Declare @SAD_Config_ID int 
 Set @SAD_Config_ID=(select isnull(max(SAD_Config_ID)+1,1) from sad_config_settings)
 Insert into sad_config_settings (SAD_Config_ID,SAD_Config_Key,SAD_Config_Value,SAD_CompID)
 values(@SAD_Config_ID,@SAD_Config_Key,@SAD_Config_Value,@SAD_CompID)
set @iOper=3
 End 

 /

 Create Procedure spPasswordManagement
(        
@MPS_MinimumChar int,  
@MPS_MaximumChar int,  
@MSP_RecoveryAttempts int,  
@MPS_UnsuccessfulAttempts int,  
@MPS_PasswordExpiryDays int,  
@MPS_NotLoginDays int,  
@MPS_Password_Contains varchar(10),     
@MPS_PasswordExpiryAlertDays int,  
@MPS_CompID varchar(100),   
@iOper Int Output     
)      
 As         
  If exists(Select MPS_pkID From MST_Password_Setting Where MPS_CompID = @MPS_CompID)    
 Begin     
  Update MST_Password_Setting set MPS_MinimumChar=@MPS_MinimumChar,MPS_MaximumChar=@MPS_MaximumChar,MSP_RecoveryAttempts=@MSP_RecoveryAttempts,
  MPS_UnsuccessfulAttempts=@MPS_UnsuccessfulAttempts,MPS_PasswordExpiryDays=@MPS_PasswordExpiryDays,MPS_NotLoginDays=@MPS_NotLoginDays,
  MPS_Password_Contains=@MPS_Password_Contains,MPS_PasswordExpiryAlertDays=@MPS_PasswordExpiryAlertDays 
  Where MPS_CompID = @MPS_CompID  
  Set @iOper=2     
End    
Else     
 Begin 
 Declare @MPS_pkID int  
 Set @MPS_pkID=(select isnull(max(MPS_pkID)+1,1) from MST_Password_Setting)    
  Insert into MST_Password_Setting (MPS_pkID,MPS_MinimumChar,MPS_MaximumChar,MSP_RecoveryAttempts,MPS_UnsuccessfulAttempts ,MPS_PasswordExpiryDays ,  
  MPS_NotLoginDays ,MPS_Password_Contains ,MPS_PasswordExpiryAlertDays,MPS_CompID)    
  values(@MPS_pkID,@MPS_MinimumChar,@MPS_MaximumChar,@MSP_RecoveryAttempts,@MPS_UnsuccessfulAttempts,@MPS_PasswordExpiryDays,  
  @MPS_NotLoginDays,@MPS_Password_Contains,@MPS_PasswordExpiryAlertDays,@MPS_CompID)    
  set @iOper=3
 End
 
 /
 
 Create PROCEDURE spEmailSettings
(
@Conf_IPAddress varchar(20),
@conf_Port int,
@conf_From varchar(200),
@conf_SenderID varchar(15),
@Conf_INS_IPAddress varchar(20),
@Conf_Status varchar(2),
@Conf_UpdatedBy int,
@Conf_CompID int,
@iOper int Output    
)
AS
 If exists(Select * from INS_COnfig Where conf_CompID=@Conf_CompID) 
BEGIN
	Update INS_COnfig set conf_UpdatedBy=@Conf_UpdatedBy,conf_UpdatedOn=GetDate(),Conf_IPAddress=@Conf_IPAddress,Conf_Port=@conf_Port,Conf_From=@conf_From,
	Conf_SenderID=@conf_SenderID,Conf_INS_IPAddress=@Conf_INS_IPAddress,Conf_Status=@Conf_Status	
	Where conf_CompID=@Conf_CompID
	Set @iOper=2 
END
Else     
 Begin 
  Insert into INS_COnfig(Conf_IPAddress,conf_Port,conf_From,conf_SenderID,Conf_INS_IPAddress,Conf_Status,Conf_CompID)
 values(@Conf_IPAddress,@conf_Port,@conf_From,@conf_SenderID,@Conf_INS_IPAddress,@Conf_Status,@Conf_CompID)
set @iOper=3
 End  

/

CREATE Procedure spOrgStructure                   
(                
@Org_Node int,                      
@Org_Code varchar(10),   
@Org_SalesUnitCode varchar(100), 
@Org_BranchCode varchar(100),                    
@Org_Name varchar(1000),            
@Org_Parent int,          
@Org_Delflag varchar(1),          
@Org_Note varchar(255),                  
@Org_AppStrength smallint,           
@Org_CreatedBy int,               
@Org_UpdatedBy int,                      
@Org_Status varchar(1),                  
@Org_LevelCode varchar(10),                    
@Org_IPAddress varchar(25),                
@Org_CompID int,                   
@iUpdateOrSave int Output,                
@iOper int Output                   
)                      
 as                         
  if exists(select Org_Node from sad_org_structure where Org_Node=@Org_Node and Org_CompID = @Org_CompID)                    
 begin                  
 set @Org_Status ='U'              
  update sad_org_structure set Org_Name=@Org_Name,Org_Code=@Org_Code,Org_AppStrength=@Org_AppStrength,Org_Note=@Org_Note,                  
Org_Status=@Org_Status,Org_UpdatedBy=@Org_UpdatedBy,Org_UpdatedOn=GetDate(),Org_IPAddress=@Org_IPAddress,
Org_SalesUnitCode=@Org_SalesUnitCode,Org_BranchCode=@Org_BranchCode                    
where Org_Node=@Org_Node  and Org_CompID = @Org_CompID                  
set @iUpdateOrSave=2                    
  set @iOper = @Org_Node                          
 end                    
else                     
 begin                    
 set @Org_Node=(select isnull(max(Org_Node)+1,1) from sad_org_structure where Org_CompID=@Org_CompID)                    
  insert into sad_org_structure (Org_Node,Org_Code,Org_Name,Org_Parent,Org_Delflag,Org_Note,Org_AppStrength,                  
Org_CreatedBy,Org_CreatedOn,Org_Status,Org_LevelCode,Org_IPAddress,Org_CompID,Org_SalesUnitCode,Org_BranchCode)                    
  values                    
  (@Org_Node,@Org_Code,@Org_Name,@Org_Parent,@Org_Delflag,@Org_Note,@Org_AppStrength,                  
@Org_CreatedBy,GetDate(),@Org_Status,@Org_LevelCode,@Org_IPAddress,@Org_CompID,@Org_SalesUnitCode,@Org_BranchCode)                    
set @iUpdateOrSave=3                 
   set @iOper = @Org_Node                  
 end 

/

CREATE Procedure spSalesPartyMaster(                       
@BM_ID int,                      
@BM_IndType int,                        
@BM_Name varchar(1000),                      
@BM_Code varchar (1000),                      
@BM_Inventry int,                
@BM_Address varchar(5000),                
@BM_State int,                
@BM_Pincode varchar(50),                    
@BM_Delflag varchar(1),                     
@BM_CompID int,                      
@BM_CreatedBy int,                      
@BM_CreatedOn datetime,                      
@BM_ApprovedBy int,                      
@BM_ApprovedOn datetime,                      
@BM_DeletedBy int,                
@BM_DeletedOn datetime,                
@BM_Status varchar(50),                      
@BM_UpdatedBy int,                      
@BM_UpdatedOn datetime,                
@BM_ContactPerson varchar(5000),                
@BM_City int,                
@BM_LandLineNo varchar(100),                
@BM_MobileNo varchar(100),                  
@BM_EmailID varchar(100),                  
@BM_Fax varchar(100),                   
@BM_Year int,                  
@BM_IPAddress Varchar(100),                      
@BM_Group int,             
@BM_SubGroup int,             
@BM_GL int, 
@BM_Address1 Varchar(5000),
@BM_Address2 Varchar(5000),
@BM_Address3 Varchar(5000),
@BM_GenCategory Int,
@BM_SubGL int,
@BM_GSTNRegNo Varchar(25),
@BM_CompanyType int,
@BM_GSTNCategory int,
@iUpdateOrSave int Output,                          
@iOper int Output                       
)                      
                      
as                        
 if exists(select BM_ID from Sales_Buyers_Masters where BM_Code=@BM_Code And BM_CompID=@BM_CompID)                          
  begin                       
                      
Set @BM_Status='U'                            
update Sales_Buyers_Masters set BM_Name=@BM_Name,BM_Inventry=@BM_Inventry,BM_ContactPerson=@BM_ContactPerson,BM_EmailID=@BM_EmailID,                      
BM_MobileNo=@BM_MobileNo,BM_LandLineNo=@BM_LandLineNo,BM_Fax=@BM_Fax,                       
BM_Address=@BM_Address,BM_Pincode=@BM_Pincode,BM_City=@BM_City,BM_State=@BM_State,                      
BM_Status=@BM_Status,BM_IPAddress=@BM_IPAddress,BM_UpdatedBy=@BM_UpdatedBy,BM_UpdatedOn=GetDate(),          
BM_Group=@BM_Group,BM_SubGroup=@BM_SubGroup,BM_GL=@BM_GL,BM_SubGL=@BM_SubGL,BM_Address1=@BM_Address1,BM_Address2=@BM_Address2,BM_Address3=@BM_Address3,BM_GenCategory=@BM_GenCategory,
BM_GSTNRegNo=@BM_GSTNRegNo,BM_CompanyType=@BM_CompanyType,BM_GSTNCategory=@BM_GSTNCategory                       
where BM_Code=@BM_Code And BM_CompID=@BM_CompID                  
  set @iUpdateOrSave=2                              
  set @iOper =(select BM_ID from Sales_Buyers_Masters where BM_Code=@BM_Code And BM_CompID=@BM_CompID)                       
End                      
  else                           
 begin               
Set @BM_Status='C'                   
 set @BM_ID=(select isnull(max(BM_ID)+1,1) from Sales_Buyers_Masters)                          
  insert into Sales_Buyers_Masters (BM_ID,BM_IndType,BM_Name,BM_Code,                      
BM_Inventry,BM_Address,BM_State,BM_Pincode,BM_Delflag,BM_CompID,BM_CreatedBy,BM_CreatedOn,BM_Status,BM_ContactPerson,                
BM_City,BM_LandLineNo,BM_MobileNo,BM_EmailID,BM_Fax,BM_Year,BM_IPAddress,BM_Group,BM_SubGroup,BM_GL,BM_Address1,BM_Address2,BM_Address3,BM_GenCategory,BM_SubGL,BM_GSTNRegNo,BM_CompanyType,BM_GSTNCategory)                      
 values (@BM_ID,@BM_IndType,@BM_Name,@BM_Code,@BM_Inventry,@BM_Address,@BM_State,@BM_Pincode,@BM_Delflag,                      
@BM_CompID,@BM_CreatedBy,GetDate(),@BM_Status,@BM_ContactPerson,@BM_City,@BM_LandLineNo,                      
@BM_MobileNo,@BM_EmailID,@BM_Fax,@BM_Year,@BM_IPAddress,@BM_Group,@BM_SubGroup,@BM_GL,@BM_Address1,@BM_Address2,@BM_Address3,@BM_GenCategory,@BM_SubGL,@BM_GSTNRegNo,@BM_CompanyType,@BM_GSTNCategory)                       
   set @iUpdateOrSave=3   
   set @iOper = @BM_ID                        
End 

/

CREATE Procedure spCustomerSupplierMaster(         
@CSM_ID int,        
@CSM_IndType int,          
@CSM_Name varchar(1000),        
@CSM_Code varchar (1000),        
@CSM_Inventry int,        
@CSM_ContactPerson varchar(5000),       
@CSM_EmailID varchar(1000),    
@CSM_MobileNo varchar(100),    
@CSM_LandLineNo varchar(100),    
@CSM_Fax varchar(100),     
@CSM_Address varchar(5000), 
@CSM_Address1 varchar(5000), 
@CSM_Address2 varchar(5000), 
@CSM_Address3 varchar(5000),      
@CSM_Pincode varchar(50),     
@CSM_City int,           
@CSM_State int,        
@CSM_Delflag varchar(1),        
@CSM_CompID int,        
@CSM_Status varchar(50),        
@CSM_Operation Varchar(100),        
@CSM_IPAddress Varchar(100),        
@CSM_CreatedBy int,        
@CSM_CreatedOn datetime,               
@CSM_UpdatedBy int,        
@CSM_UpdatedOn datetime,       
@CSM_ProductDescription Varchar(100),
@CSM_Group int,   
@CSM_SubGroup int,
@CSM_GL int,
@BM_SubGL int,
@CSM_GSTNRegNo Varchar(25),
@CSM_CompanyType int,
@CSM_GSTNCategory int,
@iUpdateOrSave int Output,            
@iOper int Output         
)        
        
as          
 if exists(select CSM_ID from CustomerSupplierMaster where CSM_ID=@CSM_ID And CSM_CompID=@CSM_CompID)            
  begin                
  update CustomerSupplierMaster set CSM_Name=@CSM_Name,CSM_Code=@CSM_Code,        
CSM_Inventry=@CSM_Inventry,CSM_ContactPerson=@CSM_ContactPerson,CSM_EmailID=@CSM_EmailID,CSM_MobileNo=@CSM_MobileNo,    
CSM_LandLineNo=@CSM_LandLineNo,CSM_Fax=@CSM_Fax,    
CSM_Address=@CSM_Address,CSM_Pincode=@CSM_Pincode,CSM_City=@CSM_City,CSM_State=@CSM_State,        
CSM_Status=@CSM_Status,CSM_Operation=@CSM_Operation,CSM_IPAddress=@CSM_IPAddress,CSM_UpdatedBy=@CSM_UpdatedBy,CSM_ProductDescription=@CSM_ProductDescription,CSM_UpdatedOn=GetDate(),
CSM_Group = @CSM_Group,CSM_SubGroup = @CSM_SubGroup,CSM_GL=@CSM_GL,CSM_Address1=@CSM_Address1,CSM_Address2=@CSM_Address2,CSM_Address3=@CSM_Address3,CSM_SubGL=@BM_SubGL,
CSM_GSTNRegNo=@CSM_GSTNRegNo,CSM_CompanyType=@CSM_CompanyType,CSM_GSTNCategory=@CSM_GSTNCategory
where CSM_IndType=@CSM_IndType And CSM_CompID=@CSM_CompID and CSM_ID=@CSM_ID    
  set @iUpdateOrSave=2                
  set @iOper =@CSM_ID          
End        
  else             
 begin         
 set @CSM_ID=(select isnull(max(CSM_ID)+1,1) from CustomerSupplierMaster)            
  insert into CustomerSupplierMaster (CSM_ID,CSM_IndType,CSM_Name,CSM_Code,        
CSM_Inventry,CSM_ContactPerson,CSM_EmailID,CSM_MobileNo,CSM_LandLineNo,CSM_Fax,    
CSM_Address,CSM_Address1,CSM_Address2,CSM_Address3,CSM_Pincode,CSM_City,CSM_State,CSM_Delflag,CSM_CompID,CSM_Status,CSM_CreatedBy,CSM_CreatedOn,        
CSM_Operation,CSM_IPAddress,CSM_ProductDescription,CSM_Group,CSM_SubGroup,CSM_GL,CSM_SubGL,CSM_GSTNRegNo,CSM_CompanyType,CSM_GSTNCategory)        
 values (@CSM_ID,@CSM_IndType,@CSM_Name,@CSM_Code,        
@CSM_Inventry,@CSM_ContactPerson,@CSM_EmailID,@CSM_MobileNo,@CSM_LandLineNo,@CSM_Fax,    
@CSM_Address,@CSM_Address1,@CSM_Address2,@CSM_Address3,@CSM_Pincode,@CSM_City,@CSM_State,@CSM_Delflag,@CSM_CompID,@CSM_Status,@CSM_CreatedBy,GetDate(),        
@CSM_Operation,@CSM_IPAddress,@CSM_ProductDescription,@CSM_Group,@CSM_SubGroup,@CSM_GL,@BM_SubGL,@CSM_GSTNRegNo,@CSM_CompanyType,@CSM_GSTNCategory)         
   set @iUpdateOrSave=3             
   set @iOper = @CSM_ID          
End 

/

CREATE Procedure [dbo].[spEmployeeMaster]            
(            
@Usr_ID  int,           
@Usr_Node int,          
@Usr_Code  varchar(50),            
@Usr_FullName  varchar(500),            
@Usr_LoginName varchar(50),            
@Usr_Password varchar(500),            
@Usr_Email varchar(500),          
@Usr_LevelGrp  int,            
@Usr_DutyStatus  varchar(1),             
@Usr_PhoneNo  varchar(50),            
@Usr_MobileNo  varchar(50),            
@Usr_OfficePhone  varchar(50),           
@Usr_OffPhExtn varchar(50),          
@Usr_Designation int,                    
@Usr_OrgnID  int,          
@Usr_GrpOrUserLvlPerm int,          
@Usr_Role int,          
@Usr_MasterModule int,          
@Usr_PurchaseModule int,          
@Usr_SalesModule int,          
@Usr_AccountsModule int,          
@Usr_MasterRole int,          
@Usr_PurchaseRole int,          
@Usr_SalesRole int,          
@Usr_AccountsRole int,               
@Usr_CreatedBy int,        
@Usr_UpdatedBy int,        
@Usr_DelFlag varchar(1),          
@Usr_Status Varchar(3),    
@Usr_IPAddress Varchar(500),     
@Usr_CompId int,          
@iUpdateOrSave int Output,        
@iOper int Output             
)              
 As                 
  If exists(select Usr_ID from Sad_UserDetails where Usr_ID=@Usr_ID and Usr_CompId = @Usr_CompId)    
   Begin    
   Set @Usr_Status ='U'    
   Update Sad_UserDetails set Usr_Node=@Usr_Node,Usr_Code=@Usr_Code,Usr_FullName=@Usr_FullName,Usr_LoginName=@Usr_LoginName,Usr_Password=@Usr_Password,Usr_Email=@Usr_Email,    
   Usr_LevelGrp=@Usr_LevelGrp,Usr_PhoneNo=@Usr_PhoneNo,Usr_MobileNo=@Usr_MobileNo,Usr_OfficePhone=@Usr_OfficePhone,Usr_OffPhExtn=@Usr_OffPhExtn,    
   Usr_Designation=@Usr_Designation,Usr_OrgnID=@Usr_OrgnID,Usr_GrpOrUserLvlPerm=@Usr_GrpOrUserLvlPerm,Usr_Role=@Usr_Role,    
   Usr_MasterModule=@Usr_MasterModule,Usr_PurchaseModule=@Usr_PurchaseModule,Usr_SalesModule=@Usr_SalesModule,Usr_AccountsModule=@Usr_AccountsModule,
   Usr_MasterRole=@Usr_MasterRole,Usr_PurchaseRole=@Usr_PurchaseRole,Usr_SalesRole=@Usr_SalesRole,Usr_AccountsRole=@Usr_AccountsRole,
   Usr_Status=@Usr_Status,Usr_UpdatedBy=@Usr_UpdatedBy,Usr_IPAddress=@Usr_IPAddress
   Where Usr_ID=@Usr_ID  and Usr_CompId = @Usr_CompId    
   Set @iUpdateOrSave=2    
   Set @iOper = @Usr_ID              
 End              
Else             
 Begin    
 Set @Usr_ID=(select isnull(max(Usr_ID)+1,1) from Sad_UserDetails)    
 Insert into Sad_UserDetails (Usr_ID,Usr_Node,Usr_Code,Usr_FullName,Usr_LoginName,Usr_Password,Usr_Email,Usr_LevelGrp,Usr_DutyStatus,Usr_PhoneNo,Usr_MobileNo,    
 Usr_OfficePhone,Usr_OffPhExtn,Usr_Designation,Usr_OrgnID,Usr_GrpOrUserLvlPerm,Usr_Role,Usr_MasterModule,Usr_PurchaseModule,Usr_SalesModule,    
 Usr_AccountsModule,Usr_MasterRole,Usr_PurchaseRole,Usr_SalesRole,Usr_AccountsRole,Usr_DelFlag,Usr_Status,Usr_CompId,Usr_CreatedBy,Usr_CreatedOn,Usr_IPAddress)    
 Values    
 (@Usr_ID,@Usr_Node,@Usr_Code,@Usr_FullName,@Usr_LoginName,@Usr_Password,@Usr_Email,@Usr_LevelGrp,@Usr_DutyStatus,@Usr_PhoneNo,@Usr_MobileNo,@Usr_OfficePhone,    
 @Usr_OffPhExtn,@Usr_Designation,@Usr_OrgnID,@Usr_GrpOrUserLvlPerm,@Usr_Role,@Usr_MasterModule,@Usr_PurchaseModule,@Usr_SalesModule,    
 @Usr_AccountsModule,@Usr_MasterRole,@Usr_PurchaseRole,@Usr_SalesRole,@Usr_AccountsRole,@Usr_DelFlag,@Usr_Status,@Usr_CompId,@Usr_CreatedBy,GetDate(),@Usr_IPAddress)    
 Set @iUpdateOrSave=3    
 Set @iOper = @Usr_ID           
 End 

/

CREATE Procedure [dbo].[spInwardMaster]                    
(                    
@PGM_ID Int,   
@PGM_OrderID Int,         
@PGM_OrderDate DateTime,
@PGM_GIN_Number Varchar(5000),  
@PGM_Supplier Int,   
@PGM_DocumentRefNo Varchar(5000),     
@PGM_ModeOFshiping int, 
@PGM_InvoiceDate DateTime,
@PGM_ESugamNo Varchar(5000), 
@PGM_CreatedBy Int,         
@PGM_CreatedOn  DateTime,
@PGM_ApprovedBy Int,         
@PGM_ApprovedOn  DateTime,
@PGM_Status Varchar(1),  
@PGM_CompID Int,         
@PGM_YearID Int,
@PGM_Operation char(1)   ,
@PGM_IPAddress VarChar(25),
@PGM_DcNo VarChar(25),
@PGM_BatchNo int,
@PGM_BaseName int, 
@PGM_OrderNo Varchar(50),   
@Debug int,              
@iUpdateOrSave int Output,                  
@iOper int Output                   
)                      
 as                         
 set @PGM_ID=(select PGM_ID from Purchase_GIN_Master where PGM_OrderID=@PGM_OrderID and PGM_DocumentRefNo=@PGM_DocumentRefNo and PGM_CompID=@PGM_CompID and PGM_YearID=@PGM_YearID)             
  if (@PGM_ID>0)                             
   begin                       
    Update Purchase_GIN_Master set PGM_OrderDate=@PGM_OrderDate,PGM_Supplier=@PGM_Supplier,        
PGM_InvoiceDate=@PGM_InvoiceDate,PGM_ESugamNo=@PGM_ESugamNo,PGM_Operation='U',PGM_IPAddress=@PGM_IPAddress,PGM_DcNo=@PGM_DcNo      
  Where PGM_ID=@Debug and PGM_CompID=@PGM_CompID and PGM_DocumentRefNo=@PGM_DocumentRefNo and PGM_OrderID=@PGM_OrderID              
  set @iUpdateOrSave=2                      
    set @iOper =@PGM_ID               
 end                                
  else                     
        begin                
  set @PGM_ID=(select isnull(max(PGM_ID)+1,1) from Purchase_GIN_Master)                    
  Insert into Purchase_GIN_Master (PGM_ID,PGM_OrderID,PGM_OrderDate,PGM_GIN_Number,PGM_Supplier,PGM_DocumentRefNo,PGM_ModeOFshipping,         
  PGM_InvoiceDate,PGM_ESugamNo,PGM_CreatedBy,PGM_CreatedOn,PGM_ApprovedBy,PGM_ApprovedOn,PGM_Status,PGM_CompID,PGM_YearID,PGM_Operation,PGM_IPAddress,PGM_DcNo,PGM_BatchNo,PGM_BaseName,PGM_OrderNo)          
  values                    
       (@PGM_ID,@PGM_OrderID,@PGM_OrderDate,@PGM_GIN_Number,@PGM_Supplier,@PGM_DocumentRefNo,@PGM_ModeOFshiping,         
  @PGM_InvoiceDate,@PGM_ESugamNo,@PGM_CreatedBy,@PGM_CreatedOn,@PGM_ApprovedBy,@PGM_ApprovedOn,@PGM_Status,@PGM_CompID,@PGM_YearID,@PGM_Operation,@PGM_IPAddress,@PGM_DcNo,@PGM_BatchNo,@PGM_BaseName,@PGM_OrderNo)        
  set @iUpdateOrSave=3                   
  set @iOper = @PGM_ID                       
    end 

/

CREATE Procedure [dbo].[sPPurchaseInvoiceRejected]                              
(                              
@PIR_ID int,
@PIR_OrderID int,
@PIR_GINID int,
@PIR_Commodity int,
@PIR_DescriptionID int,
@PIR_HistoryID int,
@PIR_UnitID int,
@PIR_InvoiceRefNo  varchar(100),
@PIR_AcceptedQnt varchar(100),
@PIR_RejectedQty Decimal(10,3),
@PIR_MRP varchar(100),
@PIR_Status varchar(1),
@PIR_CompID int,
@PIR_YearID int,
@iUpdateOrSave int Output,                            
@iOper int Output                            
)                                
 as                                   

    begin  
  set @PIR_ID=(select isnull(max(PIR_ID)+1,1) from Purchase_Invoice_Rejected)                              
  Insert into Purchase_Invoice_Rejected (PIR_ID,PIR_OrderID,PIR_GINID,PIR_Commodity,PIR_AcceptedQnt,PIR_DescriptionID,PIR_HistoryID,PIR_UnitID,PIR_MRP,PIR_Status,PIR_CompID,PIR_RejectedQty,PIR_YearID,PIR_InvoiceRefNo)                        
  values(@PIR_ID,@PIR_OrderID,@PIR_GINID,@PIR_Commodity,@PIR_AcceptedQnt,@PIR_DescriptionID,@PIR_HistoryID,@PIR_UnitID,@PIR_MRP,@PIR_Status,@PIR_CompID,@PIR_RejectedQty,@PIR_YearID,@PIR_InvoiceRefNo)   
  set @iUpdateOrSave=3                             
  set @iOper = @PIR_ID    
  end 

/

CREATE Procedure [dbo].[sPPurchaseInvoiceAccepted]                              
(                              
@PIA_ID int,
@PIA_OrderID int,
@PIA_GINID int,
@PIA_Commodity int,
@PIA_DescriptionID int,
@PIA_InvoiceRefNo varchar(100),
@PIA_HistoryID int,
@PIA_UnitID int,
@PIA_AcceptedQnt varchar(100),
@PIA_MRP varchar(100),
@PIA_Status varchar(1),
@PIA_CompID int,
@PIA_Excess int,
@PIA_YearID int,
@iUpdateOrSave int Output,                            
@iOper int Output                            
)                                
 as   
                  
   begin            
                                      
  set @PIA_ID=(select isnull(max(PIA_ID)+1,1) from Purchase_Invoice_Accepted)                              
  Insert into Purchase_Invoice_Accepted (PIA_ID,PIA_OrderID,PIA_GINID,PIA_Commodity,PIA_AcceptedQnt,PIA_DescriptionID,PIA_HistoryID,PIA_UnitID,PIA_MRP,PIA_Status,PIA_CompID,PIA_Excess,PIA_YearID,PIA_InvoiceRefNo)                        
  values(@PIA_ID,@PIA_OrderID,@PIA_GINID,@PIA_Commodity,@PIA_AcceptedQnt,@PIA_DescriptionID,@PIA_HistoryID,@PIA_UnitID,@PIA_MRP,@PIA_Status,@PIA_CompID,@PIA_Excess,@PIA_YearID,@PIA_InvoiceRefNo)   
  set @iUpdateOrSave=3                             
  set @iOper = @PIA_ID
end

/

CREATE Procedure [dbo].[spPROFormaMaster]                  
(                  
@SPO_ID int,                 
@SPO_OrderCode varchar(200),            
@SPO_OrderDate datetime,           
@SPO_PartyCode varchar(200),            
@SPO_PartyName varchar(200),            
@SPO_Address Varchar(max),        
@SPO_ContantNo varchar(20),            
@SPO_ModeOfDispatch int,         
@SPO_ShippingDate datetime,        
@SPO_PaymentType int,        
@SPO_Status varchar(1),        
@SPO_CompID int,        
@SPO_CreatedBy int,        
@SPO_CreatedOn datetime,    
@SPO_ModeOfCommunication int,    
@SPO_InputBy Varchar(1000),
@SPO_ShippingCharge int, 
@SPO_Operation char(1),
@SPO_IPAddress Varchar(25),   
@SPO_YearID Int,
@SPO_OrderType Varchar(1),
@SPO_DispatchFlag Varchar(1),
@SPO_SalesManID int,
@SPO_BuyerOrderNo VarChar(1000), 
@SPO_Category int,
@SPO_Remarks VarChar(8000),
@SPO_BuyerOrderDate Datetime, 
@SPO_SalesType Int,
@SPO_OtherType Int,
@SPO_ChequeNo Varchar(50),
@SPO_ChequeDate DateTime,
@SPO_IFSCCode Varchar(100),
@SPO_BankName Varchar(500),
@SPO_Branch Varchar(500),
@SPO_GoThroughDispatch Int,
@SPO_DispatchRefNo Varchar(1000),
@SPO_ESugamNo Varchar(1000),
@SPO_DispatchDate Datetime,
@SPO_ZoneID Int,
@SPO_RegionID Int,
@SPO_AreaID Int,
@SPO_BranchID Int,
@SPO_CompanyAddress Varchar(200),
@SPO_CompanyGSTNRegNo Varchar(15),
@SPO_BillingAddress Varchar(200),
@SPO_BillingGSTNRegNo Varchar(15),
@SPO_DeliveryFrom Varchar(200),
@SPO_DeliveryFromGSTNRegNo Varchar(15),
@SPO_DeliveryAddress Varchar(200),
@SPO_DeliveryGSTNRegNo Varchar(15),
@SPO_DispatchStatus Varchar(25),
@SPO_CompanyType int,
@SPO_GSTNCategory int,
@SPO_State Varchar(100),
@SPO_BatchNo int,    
@SPO_BaseName int,    
@iUpdateOrSave int Output,               
@iOper int Output                
)                    
 as                       
  if exists(select SPO_ID from Sales_Proforma_Order where SPO_OrderCode=@SPO_OrderCode and SPO_PartyCode=@SPO_PartyCode and SPO_PartyName =@SPO_PartyName and SPO_CompID = @SPO_CompID And SPO_YearID=@SPO_YearID)                        
   begin  
   Update Sales_Proforma_Order Set SPO_OrderDate=@SPO_OrderDate,SPO_ModeOfDispatch=@SPO_ModeOfDispatch,SPO_ShippingDate=@SPO_ShippingDate,SPO_PaymentType=@SPO_PaymentType,SPO_ModeOfCommunication=@SPO_ModeOfCommunication,
   SPO_InputBy=@SPO_InputBy,SPO_ShippingCharge=@SPO_ShippingCharge,SPO_Operation=@SPO_Operation,SPO_IPAddress=@SPO_IPAddress,SPO_SalesManID=@SPO_SalesManID,SPO_BuyerOrderNo=@SPO_BuyerOrderNo,SPO_Category=@SPO_Category,SPO_Remarks=@SPO_Remarks,
   SPO_BuyerOrderDate=@SPO_BuyerOrderDate,
   SPO_SalesType=@SPO_SalesType,SPO_OtherType=@SPO_OtherType,SPO_ChequeNo=@SPO_ChequeNo,SPO_ChequeDate=@SPO_ChequeDate,SPO_IFSCCode=@SPO_IFSCCode,SPO_BankName=@SPO_BankName,SPO_Branch=@SPO_Branch,SPO_DispatchRefNo=@SPO_DispatchRefNo,
   SPO_ESugamNo=@SPO_ESugamNo,SPO_DispatchDate=@SPO_DispatchDate,SPO_ZoneID=@SPO_ZoneID,SPO_RegionID=@SPO_RegionID,SPO_AreaID=@SPO_AreaID,SPO_BranchID=@SPO_BranchID
   Where SPO_OrderCode=@SPO_OrderCode and SPO_PartyCode=@SPO_PartyCode and SPO_PartyName =@SPO_PartyName and SPO_CompID = @SPO_CompID And SPO_YearID=@SPO_YearID               

  set @iUpdateOrSave=2                    
    set @iOper = (select SPO_ID from Sales_Proforma_Order where SPO_OrderCode=@SPO_OrderCode and SPO_PartyCode=@SPO_PartyCode and SPO_PartyName =@SPO_PartyName and SPO_CompID = @SPO_CompID And SPO_YearID=@SPO_YearID)                                 
 end                              
  else                   
                  
        begin              
  set @SPO_ID=(select isnull(max(SPO_ID)+1,1) from Sales_Proforma_Order)                  
  Insert into Sales_Proforma_Order(SPO_ID,SPO_OrderCode,SPO_OrderDate,SPO_PartyCode,SPO_PartyName,SPO_Address,SPO_ContantNo,SPO_ModeOfDispatch,SPO_ShippingDate,        
SPO_PaymentType,SPO_Status,SPO_CompID,SPO_CreatedBy,SPO_CreatedOn,SPO_ModeOfCommunication,SPO_InputBy,SPO_ShippingCharge,SPO_Operation,SPO_IPAddress,SPO_YearID,SPO_OrderType,
SPO_DispatchFlag,SPO_SalesManID,SPO_BuyerOrderNo,SPO_Category,SPO_Remarks,SPO_BuyerOrderDate,SPO_SalesType,SPO_OtherType,SPO_ChequeNo,SPO_ChequeDate,SPO_IFSCCode,
SPO_BankName,SPO_Branch,SPO_GoThroughDispatch,SPO_DispatchRefNo,SPO_ESugamNo,SPO_DispatchDate,SPO_ZoneID,SPO_RegionID,SPO_AreaID,SPO_BranchID,
SPO_CompanyAddress,SPO_CompanyGSTNRegNo,SPO_BillingAddress,SPO_BillingGSTNRegNo,SPO_DeliveryFrom,SPO_DeliveryFromGSTNRegNo,SPO_DeliveryAddress,SPO_DeliveryGSTNRegNo,SPO_DispatchStatus,SPO_CompanyType,SPO_GSTNCategory,SPO_State,SPO_BatchNo,SPO_BaseName)           
  values                  
  (@SPO_ID,@SPO_OrderCode,@SPO_OrderDate,@SPO_PartyCode,@SPO_PartyName,@SPO_Address,@SPO_ContantNo,@SPO_ModeOfDispatch,@SPO_ShippingDate,        
  @SPO_PaymentType,@SPO_Status,@SPO_CompID,@SPO_CreatedBy,@SPO_CreatedOn,@SPO_ModeOfCommunication,@SPO_InputBy,@SPO_ShippingCharge,@SPO_Operation,@SPO_IPAddress,
  @SPO_YearID,@SPO_OrderType,@SPO_DispatchFlag,@SPO_SalesManID,@SPO_BuyerOrderNo,@SPO_Category,@SPO_Remarks,@SPO_BuyerOrderDate,@SPO_SalesType,@SPO_OtherType,
  @SPO_ChequeNo,@SPO_ChequeDate,@SPO_IFSCCode,@SPO_BankName,@SPO_Branch,@SPO_GoThroughDispatch,@SPO_DispatchRefNo,@SPO_ESugamNo,@SPO_DispatchDate,@SPO_ZoneID,@SPO_RegionID,@SPO_AreaID,@SPO_BranchID,
  @SPO_CompanyAddress,@SPO_CompanyGSTNRegNo,@SPO_BillingAddress,@SPO_BillingGSTNRegNo,@SPO_DeliveryFrom,@SPO_DeliveryFromGSTNRegNo,@SPO_DeliveryAddress,
@SPO_DeliveryGSTNRegNo,@SPO_DispatchStatus,@SPO_CompanyType,@SPO_GSTNCategory,@SPO_State,@SPO_BatchNo,@SPO_BaseName)              
  
  set @iUpdateOrSave=3                 
  set @iOper = @SPO_ID                     
    end 

/

CREATE PROCEDURE [dbo].[spDispatchMaster]        
(                
@SDM_ID int,  
@SDM_OrderID int,  
@SDM_OrderDate datetime,  
@SDM_SupplierID int,  
@SDM_DispatchDate datetime,  
@SDM_ModeOfShipping int,  
@SDM_ExpectedDays int,  
@SDM_PaymentType int,  
@SDM_CreatedBy int,  
@SDM_CreatedOn datetime,  
@SDM_Status varchar(1),  
@SDM_YearID int,  
@SDM_CompID int,
@SDM_ShippingRate money,
@SDM_ChequeNo Varchar(50),
@SDM_ChequeDate DateTime,
@SDM_IFSCCode Varchar(100),
@SDM_BankName Varchar(500),
@SDM_Branch Varchar(500),
@SDM_Operation char(1),
@SDM_IPAddress Varchar(25),
@SDM_GrandDiscount money,
@SDM_GrandDiscountAmt money,
@SDM_GrandTotal money,
@SDM_GrandTotalAmt money,
@SDM_Code Varchar(100),
@SDM_SalesManID int,
@SDM_DispatchRefNo Varchar(1000),
@SDM_ESugamNo Varchar(1000),
@SDM_Remarks Varchar(8000),
@SDM_SaleType Int,   
@SDM_OtherType Int,
@SDM_AllocateID Int,
@SDM_TrType int,
@SDM_CompanyAddress Varchar(200),
@SDM_CompanyGSTNRegNo Varchar(15),
@SDM_BillingAddress Varchar(200),
@SDM_BillingGSTNRegNo Varchar(15),
@SDM_DeliveryFrom Varchar(200),
@SDM_DeliveryFromGSTNRegNo Varchar(15),
@SDM_DeliveryAddress Varchar(200),
@SDM_DeliveryGSTNRegNo Varchar(15),
@SDM_DispatchStatus Varchar(25),
@SDM_DispatchID int,
@SDM_CompanyType int,
@SDM_GSTNCategory int,
@SDM_OrderNo Varchar(50),
@SDM_AllocationNo Varchar(50),
@SDM_DispatchNo Varchar(50),
@SDM_BatchNo int,
@SDM_BaseName int,      
@iUpdateOrSave int Output,              
@iOper int Output              
)                   
AS        
If exists(select SDM_ID from Sales_Dispatch_Master where SDM_AllocateID=@SDM_AllocateID And SDM_OrderID=@SDM_OrderID And SDM_CompID = @SDM_CompID)         
 Begin          
Set @iUpdateOrSave=2          
Set @iOper = (select SDM_ID from Sales_Dispatch_Master where SDM_AllocateID=@SDM_AllocateID And SDM_OrderID=@SDM_OrderID And SDM_CompID = @SDM_CompID)        
End        
Else               
BEGIN        
set @SDM_ID=(select isnull(max(SDM_ID)+1,1) from Sales_Dispatch_Master)        
Insert into Sales_Dispatch_Master(SDM_ID,SDM_OrderID,SDM_OrderDate,SDM_SupplierID,SDM_DispatchDate,SDM_ModeOfShipping,SDM_ExpectedDays,SDM_PaymentType,SDM_CreatedBy,SDM_CreatedOn,SDM_Status,SDM_YearID,SDM_CompID,SDM_ShippingRate,SDM_ChequeNo,SDM_ChequeDate,
SDM_IFSCCode,SDM_BankName,SDM_Branch,SDM_Operation,SDM_IPAddress,SDM_GrandDiscount,SDM_GrandDiscountAmt,SDM_GrandTotal,SDM_GrandTotalAmt,SDM_Code,SDM_SalesManID,SDM_DispatchRefNo,SDM_ESugamNo,SDM_Remarks,SDM_SaleType,SDM_OtherType,SDM_AllocateID,SDM_TrType,
SDM_CompanyAddress,SDM_CompanyGSTNRegNo,SDM_BillingAddress,SDM_BillingGSTNRegNo,SDM_DeliveryFrom,SDM_DeliveryFromGSTNRegNo,SDM_DeliveryAddress,SDM_DeliveryGSTNRegNo,SDM_DispatchStatus,SDM_DispatchID,SDM_CompanyType,SDM_GSTNCategory,SDM_OrderNo,SDM_AllocationNo,SDM_DispatchNo,SDM_BatchNo,SDM_BaseName)        

Values(@SDM_ID,@SDM_OrderID,@SDM_OrderDate,@SDM_SupplierID,@SDM_DispatchDate,@SDM_ModeOfShipping,@SDM_ExpectedDays,@SDM_PaymentType,@SDM_CreatedBy,@SDM_CreatedOn,@SDM_Status,@SDM_YearID,@SDM_CompID,@SDM_ShippingRate,@SDM_ChequeNo,@SDM_ChequeDate,
@SDM_IFSCCode,@SDM_BankName,@SDM_Branch,@SDM_Operation,@SDM_IPAddress,@SDM_GrandDiscount,@SDM_GrandDiscountAmt,@SDM_GrandTotal,@SDM_GrandTotalAmt,@SDM_Code,@SDM_SalesManID,@SDM_DispatchRefNo,@SDM_ESugamNo,@SDM_Remarks,@SDM_SaleType,@SDM_OtherType,@SDM_AllocateID,@SDM_TrType,
@SDM_CompanyAddress,@SDM_CompanyGSTNRegNo,@SDM_BillingAddress,@SDM_BillingGSTNRegNo,@SDM_DeliveryFrom,@SDM_DeliveryFromGSTNRegNo,@SDM_DeliveryAddress,@SDM_DeliveryGSTNRegNo,@SDM_DispatchStatus,@SDM_DispatchID,@SDM_CompanyType,@SDM_GSTNCategory,@SDM_OrderNo,@SDM_AllocationNo,@SDM_DispatchNo,@SDM_BatchNo,@SDM_BaseName)      
  
    set @iUpdateOrSave=3               
    set @iOper = @SDM_ID        
END 

/

CREATE Procedure spAcc_Purchase_Master       
(        
@Acc_Purchase_ID int,
@Acc_Purchase_TransactionNo varchar(200),
@Acc_Purchase_Party int,
@Acc_Purchase_BillNo varchar(200),
@Acc_Purchase_BillDate Datetime,
@Acc_Purchase_BillAmount money,
@Acc_Purchase_CreatedBy int,
@Acc_Purchase_UpdatedBy int,
@Acc_Purchase_Year int,
@Acc_Purchase_CompID int,
@Acc_Purchase_Status varchar(2),
@Acc_Purchase_DelFlag varchar(1),
@Acc_Purchase_Operation varchar(1),
@Acc_Purchase_IPAddress varchar(20),
@Acc_Purchase_ReceiptDate Datetime,
@Acc_Purchase_MisMatchFlag int,
@Acc_Purchase_PaymentStatus varchar(1),
@Acc_Purchase_OtherCharges money,
@ACC_Purchase_ZoneID int,
@ACC_Purchase_RegionID int,
@ACC_Purchase_AreaID int,
@ACC_Purchase_BranchID int,
@Acc_Purchase_CompanyAddress Varchar(200),   
@Acc_Purchase_CompanyGSTNRegNo Varchar(15),
@Acc_Purchase_BillingAddress Varchar(200), 
@Acc_Purchase_BillingGSTNRegNo Varchar(15),
@Acc_Purchase_DeliveryFrom Varchar(200),
@Acc_Purchase_DeliveryFromGSTNRegNo Varchar(15),
@Acc_Purchase_ReceiveAddress Varchar(200),
@Acc_Purchase_ReceiveGSTNRegNo Varchar(15),
@Acc_Purchase_InvoiceStatus Varchar(25),
@Acc_Purchase_CompanyType int,
@Acc_Purchase_GSTNCategory int,
@Acc_Purchase_State Varchar(100),
@Acc_Purchase_PendingAmount money, 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select Acc_Purchase_ID from Acc_Purchase_Master where Acc_Purchase_TransactionNo=@Acc_Purchase_TransactionNo and Acc_Purchase_Year=@Acc_Purchase_Year  and Acc_Purchase_CompID = @Acc_Purchase_CompID)              
     begin                	            
		Update Acc_Purchase_Master set Acc_Purchase_Party=@Acc_Purchase_Party,Acc_Purchase_BillNo=@Acc_Purchase_BillNo,Acc_Purchase_BillDate=@Acc_Purchase_BillDate,
		Acc_Purchase_BillAmount=@Acc_Purchase_BillAmount,Acc_Purchase_UpdatedBy=@Acc_Purchase_UpdatedBy,Acc_Purchase_UpdatedOn=GetDate(),Acc_Purchase_Status='U',
		Acc_Purchase_Operation='U',Acc_Purchase_IPAddress=@Acc_Purchase_IPAddress,Acc_Purchase_ReceiptDate=@Acc_Purchase_ReceiptDate,
		Acc_Purchase_MisMatchFlag=@Acc_Purchase_MisMatchFlag,Acc_Purchase_OtherCharges=@Acc_Purchase_OtherCharges,ACC_Purchase_ZoneID=@ACC_Purchase_ZoneID,
		ACC_Purchase_RegionID=@ACC_Purchase_RegionID,ACC_Purchase_AreaID=@ACC_Purchase_AreaID,ACC_Purchase_BranchID=@ACC_Purchase_BranchID,Acc_Purchase_PendingAmount=@Acc_Purchase_PendingAmount
		Where Acc_Purchase_TransactionNo=@Acc_Purchase_TransactionNo and Acc_Purchase_CompID = @Acc_Purchase_CompID  and Acc_Purchase_Year=@Acc_Purchase_Year 
		set @iUpdateOrSave=2          
		set @iOper = (select Acc_Purchase_ID from Acc_Purchase_Master where Acc_Purchase_TransactionNo=@Acc_Purchase_TransactionNo and Acc_Purchase_Year=@Acc_Purchase_Year  and Acc_Purchase_CompID = @Acc_Purchase_CompID)
	 end                              
  else         
	  begin        
		set @Acc_Purchase_ID=(select isnull(max(Acc_Purchase_ID)+1,1) from Acc_Purchase_Master)        
		Insert into Acc_Purchase_Master (Acc_Purchase_ID,Acc_Purchase_TransactionNo,Acc_Purchase_Party,Acc_Purchase_BillNo,Acc_Purchase_BillDate,Acc_Purchase_BillAmount,
		Acc_Purchase_CreatedBy,Acc_Purchase_CreatedOn,Acc_Purchase_Year,Acc_Purchase_CompID,Acc_Purchase_Status,Acc_Purchase_DelFlag,Acc_Purchase_Operation,Acc_Purchase_IPAddress,
		Acc_Purchase_ReceiptDate,Acc_Purchase_MisMatchFlag,Acc_Purchase_PaymentStatus,Acc_Purchase_OtherCharges,ACC_Purchase_ZoneID,ACC_Purchase_RegionID,ACC_Purchase_AreaID,
		ACC_Purchase_BranchID,Acc_Purchase_CompanyAddress,Acc_Purchase_CompanyGSTNRegNo,Acc_Purchase_BillingAddress,Acc_Purchase_BillingGSTNRegNo,Acc_Purchase_DeliveryFrom,Acc_Purchase_DeliveryFromGSTNRegNo,Acc_Purchase_ReceiveAddress,Acc_Purchase_ReceiveGSTNRegNo,Acc_Purchase_InvoiceStatus,Acc_Purchase_CompanyType,Acc_Purchase_GSTNCategory,Acc_Purchase_State,Acc_Purchase_PendingAmount)
		values(@Acc_Purchase_ID,@Acc_Purchase_TransactionNo,@Acc_Purchase_Party,@Acc_Purchase_BillNo,@Acc_Purchase_BillDate,@Acc_Purchase_BillAmount,@Acc_Purchase_CreatedBy,GetDate(),  
		@Acc_Purchase_Year,@Acc_Purchase_CompID,@Acc_Purchase_Status,@Acc_Purchase_DelFlag,@Acc_Purchase_Operation,@Acc_Purchase_IPAddress,@Acc_Purchase_ReceiptDate,
		@Acc_Purchase_MisMatchFlag,@Acc_Purchase_PaymentStatus,@Acc_Purchase_OtherCharges,@ACC_Purchase_ZoneID,@ACC_Purchase_RegionID,@ACC_Purchase_AreaID,@ACC_Purchase_BranchID,
		@Acc_Purchase_CompanyAddress,@Acc_Purchase_CompanyGSTNRegNo,@Acc_Purchase_BillingAddress,@Acc_Purchase_BillingGSTNRegNo,@Acc_Purchase_DeliveryFrom,@Acc_Purchase_DeliveryFromGSTNRegNo,@Acc_Purchase_ReceiveAddress,@Acc_Purchase_ReceiveGSTNRegNo,@Acc_Purchase_InvoiceStatus,@Acc_Purchase_CompanyType,@Acc_Purchase_GSTNCategory,@Acc_Purchase_State,@Acc_Purchase_PendingAmount)
		set @iUpdateOrSave=3       
		set @iOper = @Acc_Purchase_ID           
  end 

/

CREATE Procedure [dbo].[spAcc_PettyCash_Master]        
(        
@Acc_PCM_ID int,
@Acc_PCM_TransactionNo varchar(500),
@Acc_PCM_Party int,
@Acc_PCM_Location int ,
@Acc_PCM_BillType int ,
@Acc_PCM_BillNo varchar(500) ,
@Acc_PCM_BillDate datetime ,
@Acc_PCM_BillAmount money ,
@Acc_PCM_PaymentNarration varchar(500),
@Acc_PCM_CreatedBy int,
@Acc_PCM_UpdatedBy int,
@Acc_PCM_YearID int,
@Acc_PCM_CompID int,
@Acc_PCM_Status varchar(1),
@Acc_PCM_Operation varchar(1),
@Acc_PCM_IPAddress varchar(200),
@Acc_PCM_InvoiceDate datetime,
@Acc_PCM_AttachID int,
@ACC_PCM_ZoneID int,
@ACC_PCM_RegionID int,
@ACC_PCM_AreaID int,
@ACC_PCM_BranchID int,
@Acc_PCM_BatchNo int,
@Acc_PCM_BaseName int,   
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select Acc_PCM_ID from Acc_PettyCash_Master where Acc_PCM_ID=@Acc_PCM_ID)              
     begin                	            
		Update Acc_PettyCash_Master set Acc_PCM_TransactionNo=@Acc_PCM_TransactionNo, Acc_PCM_Party=@Acc_PCM_Party, 
		Acc_PCM_Location=@Acc_PCM_Location, Acc_PCM_BillType=@Acc_PCM_BillType, Acc_PCM_BillNo=@Acc_PCM_BillNo, Acc_PCM_BillDate=@Acc_PCM_BillDate,
		Acc_PCM_BillAmount=@Acc_PCM_BillAmount, Acc_PCM_UpdatedBy=@Acc_PCM_UpdatedBy, Acc_PCM_UpdatedOn=GetDate(), Acc_PCM_YearID=@Acc_PCM_YearID,
		Acc_PCM_CompID=@Acc_PCM_CompID,  Acc_PCM_Operation=@Acc_PCM_Operation, Acc_PCM_IPAddress=@Acc_PCM_IPAddress,
		Acc_PCM_InvoiceDate = @Acc_PCM_InvoiceDate,Acc_PCM_AttachID=@Acc_PCM_AttachID,Acc_PCM_PaymentNarration=@Acc_PCM_PaymentNarration,
		ACC_PCM_ZoneID=@ACC_PCM_ZoneID,ACC_PCM_RegionID=@ACC_PCM_RegionID,ACC_PCM_AreaID=@ACC_PCM_AreaID,ACC_PCM_BranchID=@ACC_PCM_BranchID
		Where Acc_PCM_ID=@Acc_PCM_ID 
		set @iUpdateOrSave=2          
		set @iOper = @Acc_PCM_ID
	 end      
	 	                         
  else         
	  begin        
		set @Acc_PCM_ID=(select isnull(max(Acc_PCM_ID)+1,1) from Acc_PettyCash_Master)        
		Insert into Acc_PettyCash_Master (Acc_PCM_ID, Acc_PCM_TransactionNo, Acc_PCM_Party, Acc_PCM_Location, Acc_PCM_BillType,
					Acc_PCM_BillNo, Acc_PCM_BillDate, Acc_PCM_BillAmount,Acc_PCM_PaymentNarration, Acc_PCM_CreatedBy, Acc_PCM_CreatedOn, Acc_PCM_YearID,
					Acc_PCM_CompID, Acc_PCM_Status, Acc_PCM_Operation, Acc_PCM_IPAddress, Acc_PCM_InvoiceDate,Acc_PCM_AttachID,
					ACC_PCM_ZoneID,ACC_PCM_RegionID,ACC_PCM_AreaID,ACC_PCM_BranchID,Acc_PCM_BatchNo,Acc_PCM_BaseName)

		values(@Acc_PCM_ID, @Acc_PCM_TransactionNo, @Acc_PCM_Party, @Acc_PCM_Location, @Acc_PCM_BillType,
					@Acc_PCM_BillNo, @Acc_PCM_BillDate, @Acc_PCM_BillAmount, @Acc_PCM_PaymentNarration, @Acc_PCM_CreatedBy, Getdate(), @Acc_PCM_YearID,
					@Acc_PCM_CompID, @Acc_PCM_Status, @Acc_PCM_Operation, @Acc_PCM_IPAddress, @Acc_PCM_InvoiceDate,@Acc_PCM_AttachID,
					@ACC_PCM_ZoneID,@ACC_PCM_RegionID,@ACC_PCM_AreaID,@ACC_PCM_BranchID,@Acc_PCM_BatchNo,@Acc_PCM_BaseName)
		set @iUpdateOrSave=3       
		set @iOper = @Acc_PCM_ID           
  end

/

CREATE Procedure [dbo].[spAcc_JE_Master]        
(        
@Acc_JE_ID int,
@Acc_JE_TransactionNo varchar(500),
@Acc_JE_Party int,
@Acc_JE_Location int ,
@Acc_JE_BillType int ,
@Acc_JE_BillNo varchar(500) ,
@Acc_JE_BillDate datetime ,
@Acc_JE_BillAmount money ,
@Acc_JE_AdvanceNaration Varchar(500),
@Acc_JE_ChequeNo varchar(500),
@Acc_JE_ChequeDate datetime ,
@Acc_JE_IFSCCode varchar(500),
@Acc_JE_BankName varchar(500),
@Acc_JE_BranchName varchar(500),
@Acc_JE_CreatedBy int,
@Acc_JE_UpdatedBy int,
@Acc_JE_YearID int,
@Acc_JE_CompID int,
@Acc_JE_Status varchar(1),
@Acc_JE_Operation varchar(1),
@Acc_JE_IPAddress varchar(200),
@acc_JE_InvoiceDate datetime,
@acc_JE_AttachID int,
@ACC_JE_ZoneID int,
@ACC_JE_RegionID int,
@ACC_JE_AreaID int,
@ACC_JE_BranchID int,
@Acc_JE_JEType int,
@Acc_JE_BatchNo int,
@Acc_JE_BaseName int,  
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select Acc_JE_ID from Acc_JE_Master where Acc_JE_TransactionNo=@Acc_JE_TransactionNo And Acc_JE_Party=@Acc_JE_Party And Acc_JE_CompID=@Acc_JE_CompID And Acc_JE_YearID=@Acc_JE_YearID)              
     begin                	            
		Update Acc_JE_Master set Acc_JE_Location=@Acc_JE_Location, Acc_JE_BillType=@Acc_JE_BillType, Acc_JE_BillNo=@Acc_JE_BillNo, Acc_JE_BillDate=@Acc_JE_BillDate,Acc_JE_JEType=@Acc_JE_JEType,
		Acc_JE_BillAmount=@Acc_JE_BillAmount,Acc_JE_AdvanceNaration=@Acc_JE_AdvanceNaration, Acc_JE_ChequeNo=@Acc_JE_ChequeNo, Acc_JE_ChequeDate=@Acc_JE_ChequeDate, Acc_JE_IFSCCode=@Acc_JE_IFSCCode,
		Acc_JE_BankName=@Acc_JE_BankName, Acc_JE_BranchName=@Acc_JE_BranchName,	Acc_JE_UpdatedBy=@Acc_JE_UpdatedBy, Acc_JE_UpdatedOn=GetDate(),
		Acc_JE_Operation=@Acc_JE_Operation, Acc_JE_IPAddress=@Acc_JE_IPAddress,acc_JE_InvoiceDate=@acc_JE_InvoiceDate,acc_JE_AttachID=@acc_JE_AttachID,
		ACC_JE_ZoneID=@ACC_JE_ZoneID,ACC_JE_RegionID=@ACC_JE_RegionID,ACC_JE_AreaID=@ACC_JE_AreaID,ACC_JE_BranchID=@ACC_JE_BranchID
		Where Acc_JE_TransactionNo=@Acc_JE_TransactionNo And Acc_JE_Party=@Acc_JE_Party And Acc_JE_CompID=@Acc_JE_CompID And Acc_JE_YearID=@Acc_JE_YearID
		set @iUpdateOrSave=2          
		set @iOper =(select Acc_JE_ID from Acc_JE_Master where Acc_JE_TransactionNo=@Acc_JE_TransactionNo And Acc_JE_Party=@Acc_JE_Party And Acc_JE_CompID=@Acc_JE_CompID And Acc_JE_YearID=@Acc_JE_YearID)              
	 end      
	 	                         
  else         
	  begin        
		set @Acc_JE_ID=(select isnull(max(Acc_JE_ID)+1,1) from Acc_JE_Master)        
		Insert into Acc_JE_Master (Acc_JE_ID, Acc_JE_TransactionNo, Acc_JE_Party, Acc_JE_Location, Acc_JE_BillType,Acc_JE_BillNo, Acc_JE_BillDate, Acc_JE_BillAmount,Acc_JE_AdvanceNaration,
		Acc_JE_ChequeNo, Acc_JE_ChequeDate, Acc_JE_IFSCCode,Acc_JE_BankName, Acc_JE_BranchName, Acc_JE_CreatedBy, Acc_JE_CreatedOn, Acc_JE_YearID,Acc_JE_CompID, Acc_JE_Status, 
		Acc_JE_Operation, Acc_JE_IPAddress, acc_JE_InvoiceDate,acc_JE_AttachID,ACC_JE_ZoneID,ACC_JE_RegionID,ACC_JE_AreaID,ACC_JE_BranchID,Acc_JE_JEType,Acc_JE_BatchNo,Acc_JE_BaseName)

		values(@Acc_JE_ID, @Acc_JE_TransactionNo, @Acc_JE_Party, @Acc_JE_Location, @Acc_JE_BillType,@Acc_JE_BillNo, @Acc_JE_BillDate, @Acc_JE_BillAmount,@Acc_JE_AdvanceNaration, @Acc_JE_ChequeNo, 
		@Acc_JE_ChequeDate, @Acc_JE_IFSCCode,@Acc_JE_BankName, @Acc_JE_BranchName, @Acc_JE_CreatedBy, Getdate(), @Acc_JE_YearID,@Acc_JE_CompID, @Acc_JE_Status, @Acc_JE_Operation, 
		@Acc_JE_IPAddress,@acc_JE_InvoiceDate,@acc_JE_AttachID,@ACC_JE_ZoneID,@ACC_JE_RegionID,@ACC_JE_AreaID,@ACC_JE_BranchID,@Acc_JE_JEType,@Acc_JE_BatchNo,@Acc_JE_BaseName)
		set @iUpdateOrSave=3       
		set @iOper = @Acc_JE_ID           
  end 

/

CREATE PROCEDURE [dbo].[spInventoryMasterPhysicalUpload]  
(        
@Inv_ID int,          
@Inv_Code Varchar(50), 
@Inv_Description Varchar(5000), 
@Inv_Parent int,  
@Inv_Flag Varchar(1),   
@Inv_CompID int,  
@Inv_Size varchar(50),
@Inv_Color varchar(50),
@Inv_Acode	varchar(50),
@Inv_CreatedBy int,  
@iUpdateOrSave int Output,      
@iOper int Output      
)          	
AS
If exists(select Inv_ID from Inventory_Master where Inv_ID=@Inv_ID and Inv_CompID = @Inv_CompID) 
 Begin 
 
 Update inventory_master Set Inv_code=@Inv_Code,Inv_Description =@Inv_Description,Inv_Parent=@Inv_Parent,
 Inv_Flag =@Inv_Flag, Inv_Size=@Inv_Size,Inv_Color=@Inv_Color,Inv_Acode=@Inv_Acode
 Where INV_ID=@INV_ID And Inv_CompID=@Inv_CompID      
Set @iUpdateOrSave=2  
Set @iOper = @INV_ID
End
Else       
BEGIN  
    set @Inv_ID=(select isnull(max(Inv_ID)+1,1) from Inventory_Master)        
    Insert into Inventory_Master (Inv_ID,Inv_Code,Inv_Description,Inv_Parent,Inv_Flag,Inv_CompID,Inv_Size,Inv_Color,Inv_Acode,         
    Inv_CreatedBy,Inv_CreatedOn) values        
    (@Inv_ID,@Inv_Code,@Inv_Description,@Inv_Parent,@Inv_Flag,@Inv_CompID,@Inv_Size, @Inv_Color,@Inv_Acode,   
    @Inv_CreatedBy,GetDate())        
    set @iUpdateOrSave=3       
    set @iOper = @Inv_ID    
END

/

CREATE PROCEDURE spStockLedger
(        
@SL_ID int,          
@SL_Commodity int, 
@SL_ItemID int,
@SL_OpeningBalanceQty int,
@SL_ClosingBalanceQty int,
@SL_CompID int,
@SL_YearID int,
@SL_CrBy int,
@SL_UpdatedBy int,
@SL_IPAddress varchar(100),
@SL_historyId int,
@Purchase_Rate float,
@OpningAmount float,
@SL_Branch int,
@iUpdateOrSave int Output,      
@iOper int Output      
)          	
AS
If exists(select SL_ID from Stock_Ledger where SL_historyId=@SL_historyId and SL_OrderID=0 and SL_CompID=@SL_CompID And SL_Branch=@SL_Branch) 
 Begin  
 Update Stock_Ledger Set SL_Commodity=@SL_Commodity,SL_Date=GetDate(),SL_ItemID=@SL_ItemID,SL_OpeningBalanceQty=@SL_OpeningBalanceQty,
 SL_ClosingBalanceQty= @SL_ClosingBalanceQty, SL_YearID=@SL_YearID,SL_UpdatedBy=@SL_UpdatedBy,SL_UpdatedOn=GetDate(),SL_IPAddress=@SL_IPAddress,
 SL_historyId=@SL_historyId,SL_OpningAmount=@OpningAmount
 Where SL_historyId=@SL_historyId And SL_CompID=@SL_CompID and SL_OrderID=0 And SL_Branch=@SL_Branch  
Set @iUpdateOrSave=2  
Set @iOper = (select SL_ID from Stock_Ledger where SL_historyId=@SL_historyId and SL_OrderID=0 and SL_CompID=@SL_CompID And SL_Branch=@SL_Branch)
END
Else       
BEGIN  
    set @SL_ID=(select isnull(max(SL_ID)+1,1) from Stock_Ledger)        
    Insert into Stock_Ledger (SL_ID,SL_Commodity,SL_Date, SL_ItemID, SL_OpeningBalanceQty,SL_ClosingBalanceQty,SL_CompID,SL_YearID,
	SL_CrBy,SL_CrOn,SL_IPAddress,SL_historyId,SL_SaleOrderID,SL_GINID,SL_SaleQnty,PurchaseRate,SL_PurchaseQty,SL_OrderID,SL_OpningAmount,SL_Branch) values        
    (@SL_ID,@SL_Commodity,GetDate(),@SL_ItemID,@SL_OpeningBalanceQty,@SL_ClosingBalanceQty,@SL_CompID,@SL_YearID,@SL_CrBy,GetDate(),
	@SL_IPAddress,@SL_historyId,0,0,0,@Purchase_Rate,0,0,@OpningAmount,@SL_Branch)        
    set @iUpdateOrSave=3       
    set @iOper = @SL_ID    
END

/

CREATE Procedure [dbo].[spSupplier_Bank_Details]        
(        
@SBD_ID [int] ,
@SBD_Supplier_ID [int] ,
@SBD_AccountNo [varchar](50) ,
@SBD_BankName [varchar](100) ,
@SBD_IFSC [varchar](50) ,
@SBD_Branch [varchar](200) ,
@SBD_DelFlag [char](1) ,
@SBD_Status [char](1) ,
@SBD_CreatedBy [int] ,
@SBD_CreatedOn [datetime] ,
@SBD_CompID [int] ,
@SBD_YearID [int] ,
@SBD_Operation [varchar](1) ,
@SBD_IPAddress [varchar](25), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select SBD_ID from Supplier_Bank_Details where SBD_ID=@SBD_ID And SBD_Supplier_ID=@SBD_Supplier_ID And SBD_CompID=@SBD_CompID And SBD_YearID=@SBD_YearID)              
     begin                	            
		Update Supplier_Bank_Details set SBD_AccountNo=@SBD_AccountNo,SBD_BankName=@SBD_BankName,SBD_IFSC=@SBD_IFSC,SBD_Branch=@SBD_Branch,SBD_UpdatedOn=GetDate(),SBD_Operation='U',SBD_IPAddress=@SBD_IPAddress
		Where SBD_ID=@SBD_ID And SBD_Supplier_ID=@SBD_Supplier_ID And SBD_CompID=@SBD_CompID And SBD_YearID=@SBD_YearID
		set @iUpdateOrSave=2          
		set @iOper = @SBD_ID
	 end      
	 	                         
  else         
	  begin        
		set @SBD_ID=(select isnull(max(SBD_ID)+1,1) from Supplier_Bank_Details)        
		Insert into Supplier_Bank_Details (SBD_ID,SBD_Supplier_ID,SBD_AccountNo,SBD_BankName,SBD_IFSC,SBD_Branch,SBD_DelFlag,SBD_Status,SBD_CreatedBy,SBD_CreatedOn,SBD_CompID,SBD_YearID,SBD_Operation,SBD_IPAddress)
		values(@SBD_ID,@SBD_Supplier_ID,@SBD_AccountNo,@SBD_BankName,@SBD_IFSC,@SBD_Branch,@SBD_DelFlag,@SBD_Status,@SBD_CreatedBy,@SBD_CreatedOn,@SBD_CompID,@SBD_YearID,@SBD_Operation,@SBD_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @SBD_ID        
  end

/

CREATE Procedure [dbo].[spCustomer_Bank_Details]        
(        
@CBD_ID [int] ,
@CBD_Customer_ID [int] ,
@CBD_AccountNo [varchar](50) ,
@CBD_BankName [varchar](100) ,
@CBD_IFSC [varchar](50) ,
@CBD_Branch [varchar](200) ,
@CBD_DelFlag [char](1) ,
@CBD_Status [char](1) ,
@CBD_CreatedBy [int] ,
@CBD_CreatedOn [datetime] ,
@CBD_CompID [int] ,
@CBD_YearID [int] ,
@CBD_Operation [varchar](1) ,
@CBD_IPAddress [varchar](25), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select CBD_ID from Customer_Bank_Details where CBD_ID=@CBD_ID And CBD_Customer_ID=@CBD_Customer_ID And CBD_CompID=@CBD_CompID And CBD_YearID=@CBD_YearID)              
     begin                	            
		Update Customer_Bank_Details set CBD_AccountNo=@CBD_AccountNo,CBD_BankName=@CBD_BankName,CBD_IFSC=@CBD_IFSC,CBD_Branch=@CBD_Branch,CBD_UpdatedOn=GetDate(),CBD_Operation='U',CBD_IPAddress=@CBD_IPAddress
		Where CBD_ID=@CBD_ID And CBD_Customer_ID=@CBD_Customer_ID And CBD_CompID=@CBD_CompID And CBD_YearID=@CBD_YearID
		set @iUpdateOrSave=2          
		set @iOper = @CBD_ID
	 end      
	 	                         
  else         
	  begin        
		set @CBD_ID=(select isnull(max(CBD_ID)+1,1) from Customer_Bank_Details)        
		Insert into Customer_Bank_Details (CBD_ID,CBD_Customer_ID,CBD_AccountNo,CBD_BankName,CBD_IFSC,CBD_Branch,CBD_DelFlag,CBD_Status,CBD_CreatedBy,CBD_CreatedOn,CBD_CompID,CBD_YearID,CBD_Operation,CBD_IPAddress)
		values(@CBD_ID,@CBD_Customer_ID,@CBD_AccountNo,@CBD_BankName,@CBD_IFSC,@CBD_Branch,@CBD_DelFlag,@CBD_Status,@CBD_CreatedBy,@CBD_CreatedOn,@CBD_CompID,@CBD_YearID,@CBD_Operation,@CBD_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @CBD_ID        
  end 

/

CREATE procedure spEdt_CabinetDetails     
(        
@CBN_NODE  int,     
@CBN_NAME varchar(100),    
@CBN_PARENT int,    
@CBN_Note varchar(500),    
@CBN_USERGROUP int,    
@CBN_ParGrp int,    
@CBN_USERID int,    
@CBN_PERMISSION int,    
@cbn_DelStatus varchar(4),    
@CBN_SCCount int,    
@CBN_FolCount int,    
@cbn_Operation varchar(4),    
@cbn_OperationBy int,    
@iUpdateOrSave int Output,         
@iOper int Output                   
)              
 as                
  if exists(Select CBN_NODE from edt_cabinet where CBN_NODE=@CBN_NODE)                 
   begin                     
    Update edt_cabinet set CBN_NAME=@CBN_NAME, CBN_PARENT=@CBN_PARENT, CBN_Note=@CBN_Note, CBN_USERGROUP=@CBN_USERGROUP, CBN_ParGrp=@CBN_ParGrp,    
        CBN_USERID=@CBN_USERID, CBN_PERMISSION=@CBN_PERMISSION, CBN_SCCount=@CBN_SCCount, CBN_FolCount=@CBN_FolCount,    
           cbn_Operation=@cbn_Operation, cbn_OperationBy=@cbn_OperationBy    
      
 where CBN_NODE=@CBN_NODE   
 set @iUpdateOrSave=2          
 set @iOper = @CBN_NODE        
  end                        
else       
    
   begin      
   set @CBN_NODE=(select isnull(max(CBN_NODE)+1,1) from edt_cabinet)    
    
   Insert into edt_cabinet (CBN_NODE, CBN_NAME, CBN_PARENT, CBN_Note, CBN_USERGROUP, CBN_ParGrp, CBN_USERID, CBN_PERMISSION, cbn_DelStatus, CBN_SCCount,    
                  CBN_FolCount, cbn_Operation, cbn_OperationBy, CBN_CRON) values     
    
                 (@CBN_NODE, @CBN_NAME, @CBN_PARENT, @CBN_Note, @CBN_USERGROUP, @CBN_ParGrp, @CBN_USERID, @CBN_PERMISSION, @cbn_DelStatus, @CBN_SCCount,    
                  @CBN_FolCount, @cbn_Operation, @cbn_OperationBy, getdate())    
 set @iUpdateOrSave=3           
 set @iOper = @CBN_NODE              
 end

/

CREATE Procedure InOrUpDescriptor
(
@DES_ID	int,		
@DESC_NAME varchar(100),
@DESC_NOTE varchar(200),
@DESC_DATATYPE varchar(25),
@DESC_SIZE varchar(3),
@DESC_CRBY int,
@DESC_UPDATEDBY int,
@DESC_STATUS varchar(1),
@DESC_CompId int,
@DESC_IPAddress varchar(50),
@iUpdateOrSave int Output,
@iOper Int Output 
)
	as 		
		if exists(select DES_ID from EDT_DESCRIPTIOS where DES_ID=@DES_ID And DESC_CompId=@DESC_CompId)
	begin 
		update EDT_DESCRIPTIOS set DESC_NAME=@DESC_NAME,DESC_NOTE=@DESC_NOTE,DESC_DATATYPE=@DESC_DATATYPE,DESC_SIZE=@DESC_SIZE,DESC_UPDATEDBY=@DESC_UPDATEDBY,DESC_UPDATEDON=GetDate(),
		DESC_STATUS=@DESC_STATUS,DESC_IPAddress=@DESC_IPAddress where DES_ID=@DES_ID And DESC_CompId=@DESC_CompId
		Set @iUpdateOrSave=2  
		set @iOper=@DES_ID	
	end		
else 
	begin		
	set @DES_ID=(select isnull(max(DES_ID)+1,1) from EDT_DESCRIPTIOS)
		insert into EDT_DESCRIPTIOS (DES_ID,DESC_NAME,DESC_NOTE,DESC_DATATYPE,DESC_SIZE,DESC_CRBY,DESC_CRON,DESC_STATUS,DESC_DelFlag,DESC_CompId,DESC_IPAddress)
		values
		(@DES_ID,@DESC_NAME,@DESC_NOTE,@DESC_DATATYPE,@DESC_SIZE,@DESC_CRBY,GetDate(),@DESC_STATUS,'W',@DESC_CompId,@DESC_IPAddress)	
		Set @iUpdateOrSave=3	
		set @iOper=@DES_ID
	end

/

CREATE procedure spEDT_DOCUMENT_TYPE                 
(        
@DOT_DOCTYPEID int,
@DOT_DOCNAME varchar(400),
@DOT_NOTE varchar(600),
@DOT_PGROUP int,
@DOT_CRBY int,
@DOT_UPDATEDBY int,
@DOT_operation varchar(10),
@DOT_operationby int,
@DOT_isGlobal int,
@DOT_CompId int,
@DOT_IPAddress varchar(50),
@iUpdateOrSave int Output,                   
@iOper Int Output                   
)                  
as                         
if exists(select DOT_DOCTYPEID from EDT_DOCUMENT_TYPE where DOT_DOCTYPEID=@DOT_DOCTYPEID And DOT_CompId=@DOT_CompId)                    
begin    
Declare @DOT_STATUS varchar(1)      
Set @DOT_STATUS='U'        
update EDT_DOCUMENT_TYPE set DOT_DOCNAME=@DOT_DOCNAME,DOT_NOTE=@DOT_NOTE,DOT_PGROUP=@DOT_PGROUP,DOT_UPDATEDBY=@DOT_UPDATEDBY,DOT_UPDATEDON=GetDate(),    
dot_operation=@DOT_operation,dot_operationby=@DOT_operationby,DOT_isGlobal=@DOT_isGlobal,DOT_STATUS=@DOT_STATUS,DOT_IPAddress=@DOT_IPAddress        
where DOT_DOCTYPEID=@DOT_DOCTYPEID And DOT_CompId=@DOT_CompId             
set @iUpdateOrSave=2                   
set @iOper=@DOT_DOCTYPEID                     
end                    
else                     
begin                    
set @DOT_DOCTYPEID=(select isnull(max(DOT_DOCTYPEID)+1,1) from EDT_DOCUMENT_TYPE)                    
insert into EDT_DOCUMENT_TYPE(DOT_DOCTYPEID,DOT_DOCNAME,DOT_NOTE,DOT_PGROUP,DOT_CRBY,DOT_CRON,DOT_STATUS,dot_operation,dot_operationby,DOT_isGlobal,DOT_DelFlag,DOT_CompId,DOT_IPAddress)values                    
(@DOT_DOCTYPEID,@DOT_DOCNAME,@DOT_NOTE,@DOT_PGROUP,@DOT_CRBY,GetDate(),'A',@DOT_operation,@DOT_operationby,@DOT_isGlobal,'W',@DOT_CompId,@DOT_IPAddress)                    
set @iUpdateOrSave=3                    
set @iOper=@DOT_DOCTYPEID                   
end

/

CREATE procedure spEDT_DOCTYPE_LINK                
(   
@EDD_Pk int,     
@EDD_DOCTYPEID int,
@EDD_DPTRID int,
@EDD_ISREQUIRED varchar(5),
@EDD_Size int,
@EDD_VALUES varchar(2000),
@EDD_VALIDATE varchar(1),
@EDD_CRBY int,
@EDD_UPDATEDBY int,
@EDD_CompId int,
@EDD_IPAddress varchar(50),
@iUpdateOrSave int Output,                   
@iOper Int Output                   
)                  
as                         
if exists(select EDD_Pk from EDT_DOCTYPE_LINK where EDD_Pk=@EDD_Pk And EDD_CompId=@EDD_CompId)                    
begin 
Declare @EDD_Status varchar(1)      
Set @EDD_Status='U' 
update EDT_DOCTYPE_LINK set EDD_DOCTYPEID=@EDD_DOCTYPEID,EDD_DPTRID=@EDD_DPTRID,EDD_ISREQUIRED=@EDD_ISREQUIRED,EDD_Size=@EDD_Size,
EDD_VALUES=@EDD_VALUES,EDD_VALIDATE=@EDD_VALIDATE,EDD_UPDATEDBY=@EDD_UPDATEDBY,EDD_UPDATEDON=GetDate(),EDD_IPAddress=@EDD_IPAddress       
where EDD_Pk=@EDD_Pk And EDD_CompId=@EDD_CompId              
set @iUpdateOrSave=2                   
set @iOper=@EDD_Pk                     
end                    
else                     
begin                    
set @EDD_Pk=(select isnull(max(EDD_Pk)+1,1) from EDT_DOCTYPE_LINK)                    
insert into EDT_DOCTYPE_LINK(EDD_Pk,EDD_DOCTYPEID,EDD_DPTRID,EDD_ISREQUIRED,EDD_Size,EDD_VALUES,EDD_VALIDATE,EDD_CRBY,EDD_CRON)values                    
(@EDD_Pk,@EDD_DOCTYPEID,@EDD_DPTRID,@EDD_ISREQUIRED,@EDD_Size,@EDD_VALUES,@EDD_VALIDATE,@EDD_CRBY,GetDate())                    
set @iUpdateOrSave=3                    
set @iOper=@EDD_Pk                   
end

/

CREATE procedure InOrUpDOCTYPEPER
(	
@EDP_PID  int,
@EDP_DOCTYPEID	int,
@EDP_PTYPE varchar(1),
@EDP_GRPID smallint,
@EDP_USRID smallint,
@EDP_INDEX tinyint,
@EDP_SEARCH	tinyint,	
@EDP_MFY_TYPE tinyint,
@EDP_MFY_DOCUMENT tinyint,
@EDP_DEL_DOCUMENT tinyint,	
@EDP_OTHER tinyint,
@EDP_CRBY int,
@EDP_UPDATEDBY int,
@EDP_CompId int,
@EDP_IPAddress varchar(50),
@iUpdateOrSave int Output,  
@iOper int output
)
as
	if @EDP_PTYPE='U'
       if exists(select Edp_doctypeid from EDT_DOCTYPE_PERMISSION where Edp_doctypeid=@EDP_DOCTYPEID and EDP_GRPID=@EDP_GRPID and EDP_USRID=@EDP_USRID and EDP_PTYPE=@EDP_PTYPE And EDP_CompId=@EDP_CompId)
            begin	
               update EDT_DOCTYPE_PERMISSION set EDP_PTYPE=@EDP_PTYPE,EDP_GRPID=@EDP_GRPID,EDP_USRID=@EDP_USRID,EDP_INDEX=@EDP_INDEX,EDP_SEARCH=@EDP_SEARCH,
			   EDP_MFY_TYPE=@EDP_MFY_TYPE,EDP_MFY_DOCUMENT=@EDP_MFY_DOCUMENT,EDP_DEL_DOCUMENT=@EDP_DEL_DOCUMENT,EDP_OTHER=@EDP_OTHER,EDP_UPDATEDBY=@EDP_UPDATEDBY,EDP_UPDATEDON=GetDate(),EDP_Status='U',EDP_When='C',EDP_IPAddress=@EDP_IPAddress
			   where EDP_DOCTYPEID=@EDP_DOCTYPEID and EDP_USRID=@EDP_USRID and EDP_GRPID=@EDP_GRPID And EDP_CompId=@EDP_CompId
			   set @iUpdateOrSave=2  
               set @iOper=@Edp_doctypeid
            end
         Else
            begin
                set @EDP_PID=(select isnull(max(EDP_PID)+1,1) from EDT_DOCTYPE_PERMISSION)		
                insert into EDT_DOCTYPE_PERMISSION (EDP_PID,EDP_DOCTYPEID,EDP_PTYPE,EDP_GRPID,EDP_USRID,EDP_INDEX,EDP_SEARCH,EDP_MFY_TYPE,EDP_MFY_DOCUMENT,EDP_DEL_DOCUMENT,EDP_OTHER,EDP_CRBY,EDP_CRON,EDP_Status,EDP_When,EDP_CompId,EDP_IPAddress)						
                values(@EDP_PID,@EDP_DOCTYPEID,@EDP_PTYPE,@EDP_GRPID,@EDP_USRID,@EDP_INDEX,@EDP_SEARCH,@EDP_MFY_TYPE,@EDP_MFY_DOCUMENT,@EDP_DEL_DOCUMENT,@EDP_OTHER,@EDP_CRBY,GetDate(),'C','C',@EDP_CompId,@EDP_IPAddress)  
				set @iUpdateOrSave=3                				
                set @iOper=@EDP_PID      
             End  
      Else	    
 	 	  if exists(select Edp_doctypeid from EDT_DOCTYPE_PERMISSION where Edp_doctypeid=@EDP_DOCTYPEID and EDP_GRPID=@EDP_GRPID and EDP_PTYPE=@EDP_PTYPE And EDP_CompId=@EDP_CompId)
              begin		    
	                update EDT_DOCTYPE_PERMISSION set EDP_PTYPE=@EDP_PTYPE,EDP_GRPID=@EDP_GRPID,EDP_USRID=@EDP_USRID,EDP_INDEX=@EDP_INDEX,EDP_SEARCH=@EDP_SEARCH,
					EDP_MFY_TYPE=@EDP_MFY_TYPE,EDP_MFY_DOCUMENT=@EDP_MFY_DOCUMENT,EDP_DEL_DOCUMENT=@EDP_DEL_DOCUMENT,EDP_OTHER=@EDP_OTHER,EDP_UPDATEDBY=@EDP_UPDATEDBY,EDP_UPDATEDON=GetDate(),EDP_Status='U',EDP_When='C',EDP_IPAddress=@EDP_IPAddress
					where EDP_DOCTYPEID=@EDP_DOCTYPEID and EDP_USRID=@EDP_USRID and EDP_PTYPE=@EDP_PTYPE And EDP_CompId=@EDP_CompId 
					set @iUpdateOrSave=2 
                    set @iOper=@Edp_doctypeid
               End
          else
               begin
                      set @EDP_PID=(select isnull(max(EDP_PID)+1,1) from EDT_DOCTYPE_PERMISSION)	        	   
                      insert into EDT_DOCTYPE_PERMISSION (EDP_PID,EDP_DOCTYPEID,EDP_PTYPE,EDP_GRPID,EDP_USRID,EDP_INDEX,EDP_SEARCH,EDP_MFY_TYPE,EDP_MFY_DOCUMENT,EDP_DEL_DOCUMENT,EDP_OTHER,EDP_CRBY,EDP_CRON,EDP_Status,EDP_When,EDP_CompId,EDP_IPAddress)				

		
	                  values(@EDP_PID,@EDP_DOCTYPEID,@EDP_PTYPE,@EDP_GRPID,@EDP_USRID,@EDP_INDEX,@EDP_SEARCH,@EDP_MFY_TYPE,@EDP_MFY_DOCUMENT,@EDP_DEL_DOCUMENT,@EDP_OTHER,@EDP_CRBY,GetDate(),'C','C',@EDP_CompId,@EDP_IPAddress)
					  set @iUpdateOrSave=3  
                   	  set @iOper=@EDP_PID  
          end

/

CREATE procedure SaveOrUpFolderDetails  
(  
   @FOL_FolId int,  
   @FOL_Cabinet int,  
   @FOL_Name varchar(100),  
   @FOL_Notes varchar(500),  
   @FOL_CrBy int,  
   @FOL_Status varchar(10),  
   @FOL_PageCount int,  
   @Fol_Operation varchar(4),
   @Fol_OperationBy int,
   @iUpdateOrSave int Output,  
   @iOper int Output  
)  
   as  
      if exists(Select * from edt_folder where FOL_FolId=@Fol_FolID)  
           Begin  
              Update edt_folder  set FOL_Name=@Fol_Name,Fol_Notes=@Fol_Notes,Fol_operation=@Fol_operation, Fol_operationBy=@Fol_operationBy 
			  where FOL_FolId=@FOL_FolId  
			    Set @iUpdateOrSave=2
                Set @iOper=@Fol_FolID                
            End  
         else  
            Begin  
               Declare @iMax int  
               Declare @iFolCount int    
              set @iMax=(Select isnull(max(Fol_FolID+1),1) from edt_Folder)  
                Insert into edt_Folder(FOL_FolId,FOL_Cabinet,FOL_Name,FOL_Notes ,FOL_CrBy,FOL_CrOn ,FOL_Status,FOL_ExpiryDate ,FOL_PageCount,
				fol_operation,fol_operationBy)values  
               (@iMax, @FOL_Cabinet, @FOL_Name, @FOL_Notes, @FOL_CrBy, getdate(), @FOL_Status, getdate(), @FOL_PageCount,@Fol_operation,@FOL_OperationBy)  
                Set @iFolCount=(Select count(FOL_FolID)  from edt_folder where Fol_cabinet=@Fol_Cabinet) 
				set @iUpdateOrSave=3    
                Set @iOper=@iMax             
                Update edt_cabinet set CBN_FolCount=@iFolCount, cbn_operation='X' where CBN_Node=@Fol_cabinet  
            End

/

CREATE Procedure spEDT_PAGE(                
@PGE_BASENAME int,                
@PGE_CABINET int,        
@PGE_FOLDER int,              
@PGE_DOCUMENT_TYPE int,        
@PGE_TITLE varchar(max),       
@PGE_DATE datetime,    
@Pge_DETAILS_ID int,      
@Pge_CreatedBy int,             
@PGE_OBJECT varchar(10),     
@PGE_PAGENO integer,      
@PGE_EXT varchar(5),  
@PGE_KeyWORD varchar(500),  
@PGE_OCRText varchar(max),  
@PGE_SIZE int,      
@PGE_CURRENT_VER int,  
@PGE_STATUS varchar(1),  
@PGE_SubCabinet int,  
@PGE_QC_UsrGrpId int,  
@PGE_FTPStatus  varchar(1),  
@PGE_batch_name int,  
@pge_OrignalFileName varchar(max),  
@PGE_BatchID int,  
@PGE_OCRDelFlag int,  
@Pge_CompID int,  
@pge_Delflag varchar(1),  
@iUpdateOrSave int Output,                
@iOper int Output      
)                
as                       
begin                  
 insert into EDT_PAGE(PGE_BASENAME,PGE_CABINET,PGE_FOLDER,PGE_DOCUMENT_TYPE,PGE_TITLE,PGE_DATE,Pge_DETAILS_ID,Pge_CreatedBy,Pge_CreatedOn,                
 PGE_OBJECT,PGE_PAGENO,PGE_EXT,PGE_KeyWORD,PGE_OCRText,PGE_SIZE,PGE_CURRENT_VER ,PGE_STATUS,PGE_SubCabinet,PGE_QC_UsrGrpId,  
  PGE_FTPStatus,PGE_batch_name,pge_OrignalFileName,PGE_BatchID,PGE_OCRDelFlag,Pge_CompID,pge_Delflag)                  
 values                  
 (@PGE_BASENAME,@PGE_CABINET,@PGE_FOLDER,@PGE_DOCUMENT_TYPE,@PGE_TITLE,@PGE_DATE,@Pge_DETAILS_ID,@Pge_CreatedBy,Getdate(),             
 @PGE_OBJECT,@PGE_PAGENO,@PGE_EXT,@PGE_KeyWORD,@PGE_OCRText,@PGE_SIZE,@PGE_CURRENT_VER ,@PGE_STATUS,@PGE_SubCabinet,@PGE_QC_UsrGrpId,  
 @PGE_FTPStatus,@PGE_batch_name,@pge_OrignalFileName,@PGE_BatchID,@PGE_OCRDelFlag,@Pge_CompID,@pge_Delflag)                  
 set @iUpdateOrSave=3                 
 set @iOper = @PGE_BASENAME                       
end

/

Create Procedure spEDT_PAGE_DETAILS(              
@EPD_BASEID int,
@EPD_DOCTYPE int,
@EPD_DESCID int,
@EPD_KEYWORD varchar(2000),
@EPD_VALUE varchar(max),
@EPD_CompID int,
@iUpdateOrSave int Output,              
@iOper int Output    
)              
as                     
begin                
 insert into EDT_PAGE_DETAILS(EPD_BASEID,EPD_DOCTYPE,EPD_DESCID,EPD_KEYWORD,EPD_VALUE,EPD_CompID)                
 values                
 (@EPD_BASEID,@EPD_DOCTYPE,@EPD_DESCID,@EPD_KEYWORD,@EPD_VALUE,@EPD_CompID)                
 set @iUpdateOrSave=3               
 set @iOper = @EPD_BASEID                     
end

/

CREATE procedure [dbo].[GetPageDetails]
(
  @PGE_BaseName int,
  @PGE_Cabinet varchar(200) output,
  @PGE_SubCabinet varchar(200) output,
  @PGE_Folder varchar(200) output,
  @PGE_Document_Type varchar(200) output,
  @PGE_FolID int output,
  @PGE_DocTypeID int output
)
  as
      if exists(Select PGE_BaseName from edt_page where PGE_BaseName=@PGE_BaseName)
        Begin
            set @pge_Cabinet=(Select CBN_Name from edt_Cabinet where CBN_Node =  (Select PGE_Cabinet from 
                              edt_page where PGE_BaseName=@PGE_BaseName))
            set @pge_SubCabinet=(Select CBN_Name from edt_Cabinet where CBN_Node =  (Select PGE_SubCabinet from 
                              edt_page where PGE_BaseName=@PGE_BaseName))
            set @pge_Folder=(Select Fol_Name from edt_Folder where Fol_FolId = (Select PGE_Folder from 
                              edt_page where PGE_BaseName=@PGE_BaseName))
            set @pge_document_type=(Select dot_docname from edt_document_type where dot_doctypeid=( Select pge_document_type
                   from edt_page where PGE_BaseName=@PGE_BaseName))
            set @PGE_FolID=(Select PGE_Folder from edt_page where PGE_BaseName=@PGE_BaseName)
         
            set @PGE_DocTypeID=(Select pge_document_type  from edt_page where PGE_BaseName=@PGE_BaseName)
        End

/

create procedure [dbo].[GetFolPerDetails]
(
   @p_UsrId numeric,
   @p_FolId numeric,
   @p_Mem varchar(100),
   @p_iRetLvl varchar Output
)
as 

      if exists(Select *  from View_FolPermissions where EFP_USRID = @p_UsrId  and EFP_PType='U' and Fol_FolID=@p_FolId)
             Begin
          set @p_iRetLvl='U'
          (Select *  from View_FolPermissions where EFP_USRID = @p_UsrId  and EFP_PType='U' and Fol_FolID=@p_FolId)

             End
       else if exists(Select * from View_FolPermissions where  EFP_PType='G' and Fol_FolID=@p_FolID and  EFP_GrpId in (select SUO_DeptID from Sad_UsersInOtherDept where SUO_UserID = @p_UsrId))
          begin         
          set @p_iRetLvl='G'
          (Select * from View_FolPermissions where  EFP_PType='G' and Fol_FolID=@p_FolID and  EFP_GrpId in (select SUO_DeptID from Sad_UsersInOtherDept where SUO_UserID = @p_UsrId))
          
          end
       else if exists(Select * from View_FolPermissions where EFP_PType= 'E' and Fol_FolID =@p_FolID and EFP_USRID=0 and EFP_GrpID=0)
          Begin         
          set @p_iRetLvl='E'
          (Select * from View_FolPermissions where EFP_PType= 'E' and Fol_FolID =@p_FolID and EFP_USRID=0 and EFP_GrpID=0)
         End 

/

Create Procedure spBatchScan_Table(              
@BT_ID int,
@BT_CustomerID int,
@BT_BatchNo varchar(50),
@BT_TrType int,
@BT_NoOfTransaction int,
@BT_DebitTotal money,
@BT_CreditTotal money,
@BT_Delflag char(1),
@BT_Status Varchar(25),
@BT_CompID int,
@BT_YearID int,
@BT_CrBy int,
@BT_CrOn datetime,
@BT_Operation varchar(1),
@BT_IPAddress varchar(25),
@iUpdateOrSave int Output,              
@iOper int Output    
)              
as                     
begin   
 set @BT_ID=(select isnull(max(BT_ID)+1,1) from BatchScan_Table)              
 insert into BatchScan_Table(BT_ID,BT_CustomerID,BT_BatchNo,BT_TrType,BT_NoOfTransaction,BT_DebitTotal,BT_CreditTotal,BT_Delflag,BT_Status,BT_CompID,BT_YearID,BT_CrBy,BT_CrOn,BT_Operation,BT_IPAddress)                
 values(@BT_ID,@BT_CustomerID,@BT_BatchNo,@BT_TrType,@BT_NoOfTransaction,@BT_DebitTotal,@BT_CreditTotal,@BT_Delflag,@BT_Status,@BT_CompID,@BT_YearID,@BT_CrBy,@BT_CrOn,@BT_Operation,@BT_IPAddress)                
 set @iUpdateOrSave=3               
 set @iOper = @BT_ID                     
end

/

CREATE procedure spAcc_Bank_Reconcilation_Master
(
@ABRM_ID int ,
	@ABRM_BRID varchar(100) ,
	@ABRM_Bank int ,
	@ABRM_BankBranch int ,
	@ABRM_CreatedBy int ,
	@ABRM_CreatedOn datetime ,	
	@ABRM_UpdatedBy int ,
	@ABRM_UpdatedOn datetime ,
	@ABRM_Status varchar(1) ,
	@ABRM_Operation varchar(50) ,
	@ABRM_IPAddress varchar(50) ,
	@ABRM_YearID int ,
	@ABRM_CompID int,
	@iUpdateOrSave int Output,      
@iOper int Output      
)

as             
  if exists(select ABRM_ID from Acc_Bank_Reconcilation_Master where ABRM_ID=@ABRM_ID and ABRM_CompID=@ABRM_CompID and ABRM_YearID=@ABRM_YearID)              
     begin                	            
		Update Acc_Bank_Reconcilation_Master set ABRM_Bank=@ABRM_Bank,ABRM_BankBranch=@ABRM_BankBranch,ABRM_UpdatedBy=@ABRM_UpdatedBy,ABRM_UpdatedOn=@ABRM_UpdatedOn
		Where  ABRM_ID=@ABRM_ID and ABRM_CompID=@ABRM_CompID and ABRM_YearID=@ABRM_YearID
		set @iUpdateOrSave=2          
		set @iOper = @ABRM_ID
	 end      
	 	                         
  else         
	  begin        
		set @ABRM_ID=(select isnull(max(ABRM_ID)+1,1) from Acc_Bank_Reconcilation_Master)        
		Insert into Acc_Bank_Reconcilation_Master (ABRM_ID,ABRM_BRID,ABRM_Bank,ABRM_BankBranch,ABRM_CreatedBy,ABRM_CreatedOn,
	ABRM_Status,ABRM_Operation,ABRM_IPAddress,ABRM_YearID,ABRM_CompID)
		values(@ABRM_ID,@ABRM_BRID,@ABRM_Bank,@ABRM_BankBranch,@ABRM_CreatedBy,getdate(),
	@ABRM_Status,@ABRM_Operation,@ABRM_IPAddress,@ABRM_YearID,@ABRM_CompID)
		set @iUpdateOrSave=3       
		set @iOper = @ABRM_ID      
  end
  
/
  
  create Procedure [dbo].[spAcc_Bank_ReconcilationINOUT]        
(        
    @ABR_ID [int] ,
	@ABR_Bank [int] ,
	@ABR_FromDate [datetime] ,
	@ABR_ToDate [datetime] ,
	@ABR_SerialNo [varchar](100) ,
	@ABR_TrType [int] ,
	@ABR_TransactionNo [varchar](500) ,
	@ABR_TransactionDate [datetime] ,
	@ABR_ChequeNo [varchar](20) ,
	@ABR_ChequeDate [datetime] ,
	@ABR_IFSCCode [varchar](200) ,
	@ABR_BankTransDate [datetime] ,
	@ABR_ValueDate [datetime] ,
	@ABR_Description [varchar](max) ,
	@ABR_RefNo [varchar](100) ,
	@ABR_BranchCode [varchar](20) ,
	@ABR_Debit Money ,
	@ABR_Credit Money ,
	@ABR_Balance Money ,
	@ABR_CreatedBy [int] ,
	@ABR_CreatedOn [datetime] ,
	@ABR_YearID [int] ,
	@ABR_CompID [int] ,
	@ABR_Status [varchar](3) ,
	@ABR_UpdatedBy [int] ,
	@ABR_UpdatedOn [datetime],
	@ABR_CDabit Money,
	@ABR_CCradit money,	
	@ABR_VouchertypeIO [varchar](20),
	@ABR_PostedDateIO [datetime],	
	@ABRM_ID [int],
@iUpdateOrSave int Output,      
@iOper int Output      

)          
as             
 if exists(select ABR_IDIO from Acc_Bank_ReconcilationInAndOut where ABR_ChequeNoIO=@ABR_ChequeNo And ABR_CompIDIO=@ABR_CompID and ABR_YearIDIO=@ABR_YearID and ABRM_IDIO=@ABRM_ID)              
     begin                	            
		Update Acc_Bank_ReconcilationInAndOut set ABR_BankIO=@ABR_Bank,ABR_ChequeNoIO=@ABR_ChequeNo,ABR_FromDateIO=@ABR_FromDate,ABR_ToDateIO=@ABR_ToDate,ABR_SerialNoIO=@ABR_SerialNo,
		ABR_TrTypeIO=@ABR_TrType,ABR_TransactionNoIO=@ABR_TransactionNo,ABR_TransactionDateIO=@ABR_TransactionDate,ABR_StatusIO=@ABR_Status,ABR_UpdatedByIO=@ABR_UpdatedBy,ABR_UpdatedOn=getdate(),
		ABR_CDebitIO=@ABR_CDabit,ABR_CCreditIO=@ABR_CCradit,@ABR_PostedDateIO=ABR_PostedDateIO,ABR_VouchertypeIO=@ABR_VouchertypeIO
		Where ABR_ChequeNoIO=@ABR_ChequeNo And ABR_CompIDIO=@ABR_CompID and ABR_YearIDIO=@ABR_YearID and ABRM_IDIO=@ABRM_ID
		set @iUpdateOrSave=2          
		set @iOper = @ABR_ID
	 end      	 	                         
  else         
	  begin        
		set @ABR_ID=(select isnull(max(ABR_IDIO)+1,1) from Acc_Bank_ReconcilationInAndOut)        
		Insert into Acc_Bank_ReconcilationInAndOut (ABR_IDIO,ABR_BankIO,ABR_FromDateIO,ABR_ToDateIO,ABR_SerialNoIO,ABR_TrTypeIO,
	ABR_TransactionNoIO,ABR_TransactionDateIO,ABR_ChequeNoIO,ABR_ChequeDateIO,ABR_IFSCCodeIO,ABR_BankTransDateIO,ABR_ValueDateIO,
	ABR_DescriptionIO,ABR_RefNoIO,ABR_BranchCodeIO,ABR_DebitIO,ABR_CreditIO,ABR_BalanceIO,ABR_CreatedByIO,ABR_CreatedOnIO,ABR_YearIDIO,
	ABR_CompIDIO,ABR_StatusIO,ABR_CDebitIO,ABR_CCreditIO,ABR_PostedDateIO,ABR_VouchertypeIO,ABRM_IDIO)
		values(@ABR_ID,@ABR_Bank,@ABR_FromDate,@ABR_ToDate,@ABR_SerialNo,@ABR_TrType,
	@ABR_TransactionNo,@ABR_TransactionDate,@ABR_ChequeNo,@ABR_ChequeDate,@ABR_IFSCCode,@ABR_BankTransDate,@ABR_ValueDate,
	@ABR_Description,@ABR_RefNo,@ABR_BranchCode,@ABR_Debit,@ABR_Credit,@ABR_Balance,@ABR_CreatedBy,getdate(),@ABR_YearID,
	@ABR_CompID,@ABR_Status,@ABR_CDabit,@ABR_CCradit,@ABR_PostedDateIO,@ABR_VouchertypeIO,@ABRM_ID)
		set @iUpdateOrSave=3       
		set @iOper = @ABR_ID        
  end
  
/
  
  CREATE  Procedure [dbo].[spAcc_Bank_Reconcilation]        
(        
    @ABR_ID [int] ,
	@ABR_Bank [int] ,
	@ABR_FromDate [datetime] ,
	@ABR_ToDate [datetime] ,
	@ABR_SerialNo [varchar](100) ,
	@ABR_TrType [int] ,
	@ABR_TransactionNo [varchar](500) ,
	@ABR_TransactionDate [datetime] ,
	@ABR_ChequeNo [varchar](20) ,
	@ABR_ChequeDate [datetime] ,
	@ABR_IFSCCode [varchar](200) ,
	@ABR_BankTransDate [datetime] ,
	@ABR_ValueDate [datetime] ,
	@ABR_Description [varchar](max) ,
	@ABR_RefNo [varchar](100) ,
	@ABR_BranchCode [varchar](20) ,
	@ABR_Debit Money ,
	@ABR_Credit Money ,
	@ABR_Balance Money ,
	@ABR_CreatedBy [int] ,
	@ABR_CreatedOn [datetime] ,
	@ABR_YearID [int] ,
	@ABR_CompID [int] ,
	@ABR_Status [varchar](3) ,
	@ABR_UpdatedBy [int] ,
	@ABR_UpdatedOn [datetime],
	@ABR_CDabit Money,
	@ABR_CCradit money,
	@ABR_JID int,
	@ABRM_ID int,
	@ABR_Vouchertype varchar(20),	
	@ABR_ClosingBal money,	
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select ABR_ID from Acc_Bank_Reconcilation where ABR_ChequeNo=@ABR_ChequeNo And ABR_CompID=@ABR_CompID and ABR_CompID=@ABR_CompID and ABR_YearID=@ABR_YearID)              
     begin                	            
		Update Acc_Bank_Reconcilation set ABR_Bank=@ABR_Bank,ABR_ChequeNo=@ABR_ChequeNo,ABR_FromDate=@ABR_FromDate,ABR_ToDate=@ABR_ToDate,ABR_SerialNo=@ABR_SerialNo,
		ABR_TrType=@ABR_TrType,ABR_TransactionNo=@ABR_TransactionNo,ABR_TransactionDate=@ABR_TransactionDate,ABR_Status=@ABR_Status,ABR_UpdatedBy=@ABR_UpdatedBy,ABR_UpdatedOn=getdate(),
		ABR_CDabit=@ABR_CDabit,ABR_CCradit=@ABR_CCradit,ABR_JID=@ABR_JID,ABRM_ID=@ABRM_ID,ABR_Vouchertype=@ABR_Vouchertype,ABR_ClosingBal=@ABR_ClosingBal
		Where ABR_ChequeNo=@ABR_ChequeNo And ABR_CompID=@ABR_CompID and ABR_CompID=@ABR_CompID and ABR_YearID=@ABR_YearID
		set @iUpdateOrSave=2          
		set @iOper = @ABR_ID
	 end       	                         
  else         
	  begin        
		set @ABR_ID=(select isnull(max(ABR_ID)+1,1) from Acc_Bank_Reconcilation)        
		Insert into Acc_Bank_Reconcilation (ABR_ID,ABR_Bank,ABR_FromDate,ABR_ToDate,ABR_SerialNo,ABR_TrType,
	ABR_TransactionNo,ABR_TransactionDate,ABR_ChequeNo,ABR_ChequeDate,ABR_IFSCCode,ABR_BankTransDate,ABR_ValueDate,
	ABR_Description,ABR_RefNo,ABR_BranchCode,ABR_Debit,ABR_Credit,ABR_Balance,ABR_CreatedBy,ABR_CreatedOn,ABR_YearID,
	ABR_CompID,ABR_Status,ABR_CDabit,ABR_CCradit,ABR_JID,ABRM_ID,ABR_Vouchertype,ABR_ClosingBal)
		values(@ABR_ID,@ABR_Bank,@ABR_FromDate,@ABR_ToDate,@ABR_SerialNo,@ABR_TrType,
	@ABR_TransactionNo,@ABR_TransactionDate,@ABR_ChequeNo,@ABR_ChequeDate,@ABR_IFSCCode,@ABR_BankTransDate,@ABR_ValueDate,
	@ABR_Description,@ABR_RefNo,@ABR_BranchCode,@ABR_Debit,@ABR_Credit,@ABR_Balance,@ABR_CreatedBy,getdate(),@ABR_YearID,
	@ABR_CompID,@ABR_Status,@ABR_CDabit,@ABR_CCradit,@ABR_JID,@ABRM_ID,@ABR_Vouchertype,@ABR_ClosingBal)
		set @iUpdateOrSave=3       
		set @iOper = @ABR_ID        
  end

/

CREATE  procedure [dbo].[spAcc_FixedAssetMaster](
	@AFAM_ID int ,
	@AFAM_AssetType varchar(50) ,
	@AFAM_AssetCode varchar(50) ,
	@AFAM_Description varchar(500) ,
	@AFAM_ItemCode varchar(50) ,
	@AFAM_ItemDescription varchar(500) ,
	@AFAM_CommissionDate datetime ,	
	@AFAM_PurchaseDate datetime ,
	@AFAM_Quantity int ,
	@AFAM_AssetAge money ,
	@AFAM_PurchaseAmount money ,
	@AFAM_PolicyNo varchar(50) ,
	@AFAM_Amount money ,
	@AFAM_BrokerName varchar(50) ,
	@AFAM_CompanyName varchar(100) ,	
	@AFAM_Date datetime ,
	@AFAM_ToDate datetime ,
	@AFAM_Location int ,
	@AFAM_Department int ,
	@AFAM_Employee int ,
	@AFAM_SuplierName varchar(50) ,
	@AFAM_ContactPerson varchar(50) ,
	@AFAM_Address varchar(500) ,
	@AFAM_Phone varchar(15) ,
	@AFAM_Fax varchar(10) ,
	@AFAM_EmailID varchar(100) ,
	@AFAM_Website varchar(500) ,
	@AFAM_CreatedBy int ,
	@AFAM_CreatedOn datetime ,
	@AFAM_UpdatedBy int ,
	@AFAM_UpdatedOn datetime ,
	@AFAM_DelFlag char(1) ,
	@AFAM_Status varchar(50) ,
	@AFAM_YearID int ,
	@AFAM_CompID int ,
	@AFAM_Opeartion varchar(1) ,
	@AFAM_IPAddress varchar(25) ,	
	@AFAM_WrntyDesc varchar(500) ,
	@AFAM_ContactPrsn varchar(50) ,
	@AFAM_AMCFrmDate datetime ,
	@AFAM_AMCTo datetime ,
	@AFAM_Contprsn varchar(100) ,
	@AFAM_PhoneNo varchar(15) ,
	@AFAM_AMCCompanyName varchar(500) ,
	@AFAM_AssetDeletion int ,
	@AFAM_DlnDate datetime ,
	@AFAM_DateOfDeletion datetime ,
	@AFAM_Value money ,	
	@AFAM_Remark varchar(500),
	@AFAM_EMPCode varchar(10),
	@AFAM_LToWhom varchar(500),
	@AFAM_LAmount money,
	@AFAM_LAggriNo varchar(50),
	@AFAM_LDate datetime,
	@AFAM_LCurrencyType integer,
	@AFAM_LExchDate datetime,
	@iUpdateOrSave int Output,    
    @iOper int Output   
)
as                       
  if exists(select AFAM_ID from Acc_FixedAssetMaster where AFAM_ID=@AFAM_ID and AFAM_YearID=@AFAM_YearID And AFAM_CompID=@AFAM_CompID)                        
   begin  
   update Acc_FixedAssetMaster Set AFAM_Description=@AFAM_Description,AFAM_ItemCode=@AFAM_ItemCode,
   AFAM_ItemDescription=@AFAM_ItemDescription,AFAM_CommissionDate=@AFAM_CommissionDate,	
AFAM_PurchaseDate=@AFAM_PurchaseDate,AFAM_Quantity=@AFAM_Quantity,AFAM_AssetAge=@AFAM_AssetAge,
AFAM_PurchaseAmount=@AFAM_PurchaseAmount,AFAM_PolicyNo=@AFAM_PolicyNo,AFAM_Amount=@AFAM_Amount,
AFAM_BrokerName=@AFAM_BrokerName,AFAM_CompanyName=@AFAM_CompanyName,AFAM_Date=@AFAM_Date,
AFAM_ToDate=@AFAM_ToDate,AFAM_Location=@AFAM_Location,AFAM_Department=@AFAM_Department,AFAM_Employee=@AFAM_Employee,
AFAM_SuplierName=@AFAM_SuplierName,AFAM_ContactPerson=@AFAM_ContactPerson,
AFAM_Address=@AFAM_Address,AFAM_Phone=@AFAM_Phone,AFAM_Fax=@AFAM_Fax,AFAM_EmailID=@AFAM_EmailID,AFAM_Website=@AFAM_Website,
AFAM_UpdatedBy=@AFAM_UpdatedBy,AFAM_UpdatedOn=getdate(),AFAM_DelFlag=@AFAM_DelFlag,AFAM_Status=@AFAM_Status,AFAM_YearID=@AFAM_YearID,
AFAM_CompID=@AFAM_CompID,AFAM_Opeartion=@AFAM_Opeartion,AFAM_IPAddress=@AFAM_IPAddress,AFAM_WrntyDesc=@AFAM_WrntyDesc,
AFAM_ContactPrsn=@AFAM_ContactPrsn,AFAM_AMCFrmDate=@AFAM_AMCFrmDate,AFAM_AMCTo=@AFAM_AMCTo,AFAM_Contprsn=@AFAM_Contprsn,
AFAM_PhoneNo=@AFAM_PhoneNo,AFAM_AMCCompanyName=@AFAM_AMCCompanyName,AFAM_AssetDeletion=@AFAM_AssetDeletion,
AFAM_DlnDate=@AFAM_DlnDate,AFAM_DateOfDeletion=@AFAM_DateOfDeletion,AFAM_Value=@AFAM_Value,AFAM_Remark=@AFAM_Remark,AFAM_EMPCode=@AFAM_EMPCode,
AFAM_LToWhom=@AFAM_LToWhom,AFAM_LAmount=@AFAM_LAmount,AFAM_LAggriNo=@AFAM_LAggriNo,AFAM_LDate=@AFAM_LDate,AFAM_LCurrencyType=@AFAM_LCurrencyType,
AFAM_LExchDate=@AFAM_LExchDate
Where  AFAM_ID=@AFAM_ID and AFAM_YearID=@AFAM_YearID And AFAM_CompID=@AFAM_CompID
    set @iUpdateOrSave=2                    
    set @iOper = @AFAM_ID 
 end                              
  else               
     begin              
  set @AFAM_ID=(select isnull(max(AFAM_ID )+1,1) from Acc_FixedAssetMaster where AFAM_YearID=@AFAM_YearID)                  
  Insert into Acc_FixedAssetMaster (AFAM_ID,AFAM_AssetType,AFAM_AssetCode,AFAM_Description,AFAM_ItemCode,AFAM_ItemDescription,AFAM_CommissionDate,	
AFAM_PurchaseDate,AFAM_Quantity,AFAM_AssetAge,AFAM_PurchaseAmount,AFAM_PolicyNo,AFAM_Amount,AFAM_BrokerName,AFAM_CompanyName,	
AFAM_Date,AFAM_ToDate,AFAM_Location,AFAM_Department,AFAM_Employee,AFAM_SuplierName,AFAM_ContactPerson,AFAM_Address,
AFAM_Phone,AFAM_Fax,AFAM_EmailID,AFAM_Website,AFAM_CreatedBy,AFAM_CreatedOn,AFAM_DelFlag,
AFAM_Status,AFAM_YearID,AFAM_CompID,AFAM_Opeartion,AFAM_IPAddress,AFAM_WrntyDesc,AFAM_ContactPrsn,AFAM_AMCFrmDate,
AFAM_AMCTo,AFAM_Contprsn,AFAM_PhoneNo,AFAM_AMCCompanyName,AFAM_AssetDeletion,
AFAM_DlnDate,AFAM_DateOfDeletion,AFAM_Value,AFAM_Remark,AFAM_EMPCode,AFAM_LToWhom,AFAM_LAmount,AFAM_LAggriNo,AFAM_LDate,AFAM_LCurrencyType,AFAM_LExchDate)
 values
(@AFAM_ID,@AFAM_AssetType,@AFAM_AssetCode,@AFAM_Description,@AFAM_ItemCode,@AFAM_ItemDescription,@AFAM_CommissionDate,	
@AFAM_PurchaseDate,@AFAM_Quantity,@AFAM_AssetAge,@AFAM_PurchaseAmount,@AFAM_PolicyNo,@AFAM_Amount,@AFAM_BrokerName,@AFAM_CompanyName,	
@AFAM_Date,@AFAM_ToDate,@AFAM_Location,@AFAM_Department,@AFAM_Employee,@AFAM_SuplierName,@AFAM_ContactPerson,@AFAM_Address,
@AFAM_Phone,@AFAM_Fax,@AFAM_EmailID,@AFAM_Website,@AFAM_CreatedBy,getdate(),@AFAM_DelFlag,
@AFAM_Status,@AFAM_YearID,@AFAM_CompID,@AFAM_Opeartion,@AFAM_IPAddress,@AFAM_WrntyDesc,@AFAM_ContactPrsn,@AFAM_AMCFrmDate,
@AFAM_AMCTo,@AFAM_Contprsn,@AFAM_PhoneNo,@AFAM_AMCCompanyName,@AFAM_AssetDeletion,@AFAM_DlnDate,@AFAM_DateOfDeletion,
@AFAM_Value,@AFAM_Remark,@AFAM_EMPCode,@AFAM_LToWhom,@AFAM_LAmount,@AFAM_LAggriNo,@AFAM_LDate,@AFAM_LCurrencyType,@AFAM_LExchDate)        
  set @iUpdateOrSave=3                 
  set @iOper = @AFAM_ID                     
    end

/

CREATE  procedure [dbo].[spAcc_AssetMaster](
	@AM_ID int ,
	@AM_AssetID int ,
	@AM_CreatedBy int ,
	@AM_CreatedOn datetime ,
	@AM_UpdatedBy int ,
	@AM_UpdatedOn datetime ,
	@AM_DelFlag char(1) ,
	@AM_Status varchar(50) ,
	@AM_YearID int ,
	@AM_CompID int ,
	@AM_Deprate money ,
	@AM_Opeartion varchar(1) ,
	@AM_IPAddress varchar(25) ,
	@AM_ITRate money ,
	@iUpdateOrSave int Output,    
    @iOper int Output   
)
as                       
  if exists(select AM_ID from Acc_AssetMaster where AM_AssetID=@AM_AssetID  and AM_CompID=@AM_CompID)                        
   begin  
   update Acc_AssetMaster Set AM_UpdatedBy=@AM_UpdatedBy,AM_UpdatedOn=getdate(),
   AM_DelFlag=@AM_DelFlag,AM_Status=@AM_Status,AM_YearID=@AM_YearID,AM_CompID=@AM_CompID,
   AM_Deprate=@AM_Deprate,AM_Opeartion=@AM_Opeartion,AM_IPAddress=@AM_IPAddress,AM_ITRate=@AM_ITRate     
   where AM_AssetID=@AM_AssetID  and AM_CompID=@AM_CompID
  set @iUpdateOrSave=2                    
    set @iOper = @AM_ID 
 end                              
  else                                    
        begin              
  set @AM_ID=(select isnull(max(AM_ID)+1,1) from Acc_AssetMaster)                  
  Insert into Acc_AssetMaster(AM_ID,AM_AssetID,AM_CreatedBy,AM_CreatedOn,AM_DelFlag,
  AM_Status,AM_YearID,AM_CompID,AM_Deprate,AM_Opeartion,AM_IPAddress,AM_ITRate)
 values
(@AM_ID,@AM_AssetID,@AM_CreatedBy,getdate(),@AM_DelFlag,@AM_Status,@AM_YearID,@AM_CompID,
@AM_Deprate,@AM_Opeartion,@AM_IPAddress,@AM_ITRate)          
  set @iUpdateOrSave=3                 
  set @iOper = @AM_ID                     
    end 

/

CREATE  procedure [dbo].[spAcc_AsetDepreciation]
(
@ADep_ID int ,
	@ADep_Asset_MasterID int ,
	@ADep_AssetID int ,
	@ADep_Description varchar(100),
	@ADep_AssetAge money ,
	@ADep_Quantity int ,
	@ADep_CommissionDate datetime ,
	@ADep_PurchaseAmount money ,
	@ADep_Depreciation_rate money ,
	@ADep_NoOfDays int ,
	@ADep_Depreciationfor_theyear money ,
	@ADep_YTD money ,
	@ADep_WDV money ,
	@ADep_ResidualValue money ,
	@ADep_CreatedBy int ,
	@ADep_CreatedOn datetime ,
	@ADep_UpdatedBy int ,
	@ADep_UpdatedOn datetime ,
	@ADep_DelFlag char(1) ,
	@ADep_Status varchar(2) ,
	@ADep_YearID int ,
	@ADep_CompID int ,
	@ADep_Opeartion varchar(1) ,
	@ADep_IPAddress varchar(25),
	@iUpdateOrSave int Output,    
    @iOper int Output   
)
as                       
  if exists(select ADep_ID from Acc_AssetDepreciation where ADep_Asset_MasterID=@ADep_Asset_MasterID and ADep_YearID=@ADep_YearID And ADep_CompID=@ADep_CompID)                        
   begin  
   update Acc_AssetDepreciation Set ADep_Asset_MasterID=@ADep_Asset_MasterID,ADep_AssetID=@ADep_AssetID,
   ADep_Description=@ADep_Description,ADep_AssetAge=@ADep_AssetAge,ADep_Quantity=@ADep_Quantity,
   ADep_CommissionDate=@ADep_CommissionDate,ADep_PurchaseAmount=@ADep_PurchaseAmount,ADep_Depreciation_rate=@ADep_Depreciation_rate,
   ADep_NoOfDays=@ADep_NoOfDays,ADep_Depreciationfor_theyear=@ADep_Depreciationfor_theyear,ADep_YTD=@ADep_YTD,
   ADep_WDV=@ADep_WDV,ADep_ResidualValue=@ADep_ResidualValue,ADep_UpdatedBy=@ADep_UpdatedBy,
ADep_UpdatedOn=getdate(),ADep_DelFlag=@ADep_DelFlag,ADep_Status=@ADep_Status,ADep_YearID=@ADep_YearID,ADep_CompID=@ADep_CompID
,ADep_Opeartion=@ADep_Opeartion,ADep_IPAddress=@ADep_IPAddress 
   Where ADep_Asset_MasterID=@ADep_Asset_MasterID And ADep_ID=@ADep_ID and ADep_YearID=@ADep_YearID And ADep_CompID=@ADep_CompID
  set @iUpdateOrSave=2                    
    set @iOper = @ADep_ID 
 end                              
  else                   
                  
        begin              
  set @ADep_ID=(select isnull(max(ADep_ID)+1,1) from Acc_AssetDepreciation)                  
  Insert into Acc_AssetDepreciation (ADep_ID,ADep_Asset_MasterID,ADep_AssetID,ADep_Description,ADep_AssetAge,ADep_Quantity,ADep_CommissionDate,ADep_PurchaseAmount,
ADep_Depreciation_rate,ADep_NoOfDays,ADep_Depreciationfor_theyear,ADep_YTD,ADep_WDV,ADep_ResidualValue,ADep_CreatedBy,
ADep_CreatedOn,ADep_DelFlag,ADep_Status,ADep_YearID,ADep_CompID,ADep_Opeartion,ADep_IPAddress)
 values
(@ADep_ID,@ADep_Asset_MasterID,@ADep_AssetID,@ADep_Description,@ADep_AssetAge,@ADep_Quantity,@ADep_CommissionDate,@ADep_PurchaseAmount,
@ADep_Depreciation_rate,@ADep_NoOfDays,@ADep_Depreciationfor_theyear,@ADep_YTD,@ADep_WDV,@ADep_ResidualValue,@ADep_CreatedBy,
getdate(),@ADep_DelFlag,@ADep_Status,@ADep_YearID,@ADep_CompID,@ADep_Opeartion,@ADep_IPAddress)        
  
  set @iUpdateOrSave=3                 
  set @iOper = @ADep_ID                     
    end      

/

CREATE  Procedure [dbo].[spAcc_FixedAssetAdditionDel]        
(
    @AFAA_ID int,
	@AFAA_AssetTrType int ,
	@AFAA_CurrencyType int ,
	@AFAA_CurrencyAmnt money ,
	@AFAA_Zone int ,
	@AFAA_Region int ,
	@AFAA_Area int ,
	@AFAA_Branch int ,
	@AFAA_ActualLocn varchar(100) ,
	@AFAA_SupplierName int ,
	@AFAA_SupplierCode int ,
	@AFAA_TrType int ,
	@AFAA_AssetType varchar(50) ,
	@AFAA_AssetNo varchar(50) ,
	@AFAA_AssetRefNo varchar(50) ,	
	@AFAA_Description varchar(500) ,
	@AFAA_ItemCode varchar(50) ,
	@AFAA_ItemDescription varchar(500) ,
	@AFAA_Quantity int ,
	@AFAA_CommissionDate datetime ,
	@AFAA_PurchaseDate datetime ,	
	@AFAA_AssetAge money ,
	@AFAA_AssetAmount money ,
	@AFAA_AssetDelID int ,
	@AFAA_AssetDelDate datetime ,
	@AFAA_AssetDeletionDate datetime ,
	@AFAA_Assetvalue money ,
	@AFAA_AssetDesc varchar(500) ,
	@AFAA_CreatedBy int ,
    @AFAA_CreatedOn datetime ,
    @AFAA_UpdatedBy int ,
    @AFAA_UpdatedOn datetime ,   
    @AFAA_Status varchar(25) ,
	@AFAA_Delflag char(1) ,
    @AFAA_YearID int ,
    @AFAA_CompID int ,
    @AFAA_Operation varchar(1) ,
    @AFAA_IPAddress varchar(100),
	@AFAA_AddnType varchar(5),
	@AFAA_DelnType varchar(5),
	@AFAA_Depreciation money,
	@AFAA_AddtnDate datetime,
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as
 if exists(select AFAA_ID from Acc_FixedAssetAdditionDel where AFAA_AssetNo=@AFAA_AssetNo and AFAA_AssetType=@AFAA_AssetType and AFAA_CompID=@AFAA_CompID and AFAA_YearID=@AFAA_YearID)              
     begin                	            
		Update Acc_FixedAssetAdditionDel set AFAA_AssetTrType=@AFAA_AssetTrType,AFAA_CurrencyType=@AFAA_CurrencyType,
	AFAA_CurrencyAmnt=@AFAA_CurrencyAmnt,AFAA_Zone=@AFAA_Zone,AFAA_Region=@AFAA_Region,AFAA_Area=@AFAA_Area,AFAA_Branch=@AFAA_Branch,
	AFAA_ActualLocn=@AFAA_ActualLocn,AFAA_SupplierName=@AFAA_SupplierName,AFAA_SupplierCode=@AFAA_SupplierCode,
	AFAA_TrType=@AFAA_TrType,AFAA_AssetType=@AFAA_AssetType,AFAA_AssetRefNo=@AFAA_AssetRefNo,AFAA_Description=@AFAA_Description,AFAA_ItemCode=@AFAA_ItemCode,
AFAA_ItemDescription=@AFAA_ItemDescription,AFAA_Quantity=@AFAA_Quantity,AFAA_CommissionDate=@AFAA_CommissionDate,
AFAA_PurchaseDate=@AFAA_PurchaseDate,AFAA_AssetAge=@AFAA_AssetAge,AFAA_AssetAmount=@AFAA_AssetAmount,AFAA_UpdatedBy=@AFAA_UpdatedBy,
AFAA_UpdatedOn=@AFAA_UpdatedOn,AFAA_Operation=@AFAA_Operation,AFAA_AddnType=@AFAA_AddnType,AFAA_DelnType=@AFAA_DelnType,
AFAA_Depreciation=@AFAA_Depreciation,AFAA_AddtnDate=@AFAA_AddtnDate
		Where AFAA_AssetNo=@AFAA_AssetNo and AFAA_AssetType=@AFAA_AssetType and AFAA_CompID=@AFAA_CompID and AFAA_YearID=@AFAA_YearID
		set @iUpdateOrSave=2          
		set @iOper = @AFAA_ID
	 end      
	 else         
	  begin        
		set @AFAA_ID=(select isnull(max(AFAA_ID)+1,1) from Acc_FixedAssetAdditionDel where AFAA_YearID=@AFAA_YearID)   
		Insert into Acc_FixedAssetAdditionDel (AFAA_ID,AFAA_AssetTrType,AFAA_CurrencyType,AFAA_CurrencyAmnt,AFAA_Zone,AFAA_Region,AFAA_Area,
AFAA_Branch,AFAA_ActualLocn,AFAA_SupplierName,AFAA_SupplierCode,AFAA_TrType,AFAA_AssetType,AFAA_AssetNo,AFAA_AssetRefNo,AFAA_Description,AFAA_ItemCode,
AFAA_ItemDescription,AFAA_Quantity,AFAA_CommissionDate,AFAA_PurchaseDate,AFAA_AssetAge,AFAA_AssetAmount,AFAA_AssetDelID,AFAA_AssetDelDate,
AFAA_AssetDeletionDate,AFAA_Assetvalue,AFAA_AssetDesc,AFAA_CreatedBy,AFAA_CreatedOn,
AFAA_Status,AFAA_Delflag,AFAA_YearID,AFAA_CompID,AFAA_Operation,AFAA_IPAddress,AFAA_AddnType,AFAA_DelnType,AFAA_Depreciation,AFAA_AddtnDate)
		values(@AFAA_ID,@AFAA_AssetTrType,@AFAA_CurrencyType,@AFAA_CurrencyAmnt,@AFAA_Zone,@AFAA_Region,@AFAA_Area,
@AFAA_Branch,@AFAA_ActualLocn,@AFAA_SupplierName,@AFAA_SupplierCode,@AFAA_TrType,@AFAA_AssetType,@AFAA_AssetNo,@AFAA_AssetRefNo,@AFAA_Description,@AFAA_ItemCode,
@AFAA_ItemDescription,@AFAA_Quantity,@AFAA_CommissionDate,@AFAA_PurchaseDate,@AFAA_AssetAge,@AFAA_AssetAmount,@AFAA_AssetDelID,@AFAA_AssetDelDate,
@AFAA_AssetDeletionDate,@AFAA_Assetvalue,@AFAA_AssetDesc,@AFAA_CreatedBy,@AFAA_CreatedOn,
@AFAA_Status,@AFAA_Delflag,@AFAA_YearID,@AFAA_CompID,'C',@AFAA_IPAddress,@AFAA_AddnType,@AFAA_DelnType,@AFAA_Depreciation,@AFAA_AddtnDate)
		set @iUpdateOrSave=3       
		set @iOper = @AFAA_ID        
  end

/

CREATE PROCEDURE [dbo].[spAcc_FXDTransactions_Details]        
(                
@FXATD_ID int ,   
@FXATD_TransactionDate datetime ,
@FXATD_TrType int ,
@FXATD_BillId int ,   
@FXATD_PaymentType int ,
@FXATD_Head int ,
@FXATD_GL int ,
@FXATD_SubGL int ,
@FXATD_DbOrCr int ,
@FXATD_Debit money ,
@FXATD_Credit money ,
@FXATD_CreatedBy int,
@FXATD_Status varchar(1) ,
@FXATD_YearID int ,
@FXATD_CompID int ,
@FXATD_Operation varchar(1) ,
@FXATD_IPAddress varchar(100),
@iUpdateOrSave int Output,              
@iOper int Output              
)                   
AS        
If exists(select FXATD_ID from Acc_FXDTransactions_Details where FXATD_ID=@FXATD_ID And FXATD_TrType=@FXATD_TrType And FXATD_CompID=@FXATD_CompID And FXATD_YearID=@FXATD_YearID)         
 Begin          
 Update Acc_FXDTransactions_Details Set FXATD_Head=@FXATD_Head,FXATD_GL=@FXATD_GL,FXATD_SubGL=@FXATD_SubGL,FXATD_DbOrCr=@FXATD_DbOrCr,FXATD_Debit=@FXATD_Debit,FXATD_Credit=@FXATD_Credit
 Where FXATD_ID=@FXATD_ID And FXATD_TrType=@FXATD_TrType And FXATD_CompID=@FXATD_CompID And FXATD_YearID=@FXATD_YearID
Set @iUpdateOrSave=2          
Set @iOper = (select FXATD_ID from Acc_FXDTransactions_Details where FXATD_ID=@FXATD_ID And FXATD_TrType=@FXATD_TrType And FXATD_CompID=@FXATD_CompID And FXATD_YearID=@FXATD_YearID)          
End        
Else               
BEGIN        
set @FXATD_ID=(select isnull(max(FXATD_ID)+1,1) from Acc_FXDTransactions_Details)        
Insert into Acc_FXDTransactions_Details(FXATD_ID,FXATD_TransactionDate,FXATD_TrType,FXATD_BillId,FXATD_PaymentType,FXATD_Head,FXATD_GL,FXATD_SubGL,
FXATD_DbOrCr,FXATD_Debit,FXATD_Credit,FXATD_CreatedBy,FXATD_CreatedOn,FXATD_Status,FXATD_YearID,FXATD_CompID,FXATD_Operation,FXATD_IPAddress)        
Values(@FXATD_ID,GetDate(),@FXATD_TrType,@FXATD_BillId,@FXATD_PaymentType,@FXATD_Head,@FXATD_GL,@FXATD_SubGL,
@FXATD_DbOrCr,@FXATD_Debit,@FXATD_Credit,@FXATD_CreatedBy,GetDate(),@FXATD_Status,@FXATD_YearID,@FXATD_CompID,@FXATD_Operation,@FXATD_IPAddress)        
    set @iUpdateOrSave=3               
    set @iOper = @FXATD_ID   
END

/

CREATE  Procedure [dbo].[spAcc_DeviceDetails]        
(
  @ADD_ID int,
	@ADD_MasterID int,
	@ADD_DeviceType int,
	@ADD_DeviceNo varchar(100) ,
	@ADD_ModelName varchar(1000) ,
	@ADD_ManufacturedBy varchar(100) ,
	@ADD_DateofPurchase datetime ,
	@ADD_Details varchar(100) ,
	@ADD_WarrantyExpireson datetime ,
	@ADD_Employeename varchar(100) ,
	@ADD_StandAloneServer int ,
	@ADD_DescriptionDev varchar(1000),
	@ADD_SuplierName varchar(50) ,
	@ADD_ContactPerson varchar(50) ,
	@ADD_Address varchar(500) ,
	@ADD_Phone varchar(15) ,
	@ADD_Fax varchar(10) ,
	@ADD_EmailID varchar(100) ,
	@ADD_Website varchar(500) ,
	@ADD_CreatedBy int,
	@ADD_CreatedOn datetime,
	@ADD_UpdatedBy int,
	@ADD_UpdatedOn datetime,
	@ADD_DelFlag char(1) ,
	@ADD_Status varchar(50) ,
	@ADD_YearID int,
	@ADD_CompID int,
	@ADD_Opeartion varchar(1) ,
	@ADD_IPAddress varchar(25) ,
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as
 if exists(select ADD_ID from Acc_DeviceDetails where  ADD_MasterID=@ADD_MasterID and ADD_DeviceType=@ADD_DeviceType and ADD_DeviceNo=@ADD_DeviceNo and ADD_YearID=@ADD_YearID and ADD_CompID=@ADD_CompID)              
     begin                	            
		Update Acc_DeviceDetails set ADD_DeviceNo=@ADD_DeviceNo,ADD_ModelName=@ADD_ModelName,ADD_ManufacturedBy=@ADD_ManufacturedBy,ADD_DateofPurchase=@ADD_DateofPurchase,
ADD_Details=@ADD_Details,ADD_WarrantyExpireson=@ADD_WarrantyExpireson,ADD_Employeename=@ADD_Employeename,ADD_StandAloneServer=@ADD_StandAloneServer,ADD_DescriptionDev=@ADD_DescriptionDev,ADD_SuplierName=@ADD_SuplierName,
ADD_ContactPerson=@ADD_ContactPerson,ADD_Address=@ADD_Address,ADD_Phone=@ADD_Phone,
ADD_Fax=@ADD_Fax,ADD_EmailID=@ADD_EmailID,ADD_Website=@ADD_Website,ADD_UpdatedBy=@ADD_UpdatedBy,ADD_UpdatedOn=@ADD_UpdatedOn,
ADD_DelFlag=@ADD_DelFlag,ADD_Status=@ADD_Status,ADD_YearID=@ADD_YearID,ADD_CompID=@ADD_CompID,ADD_Opeartion=@ADD_Opeartion,ADD_IPAddress=@ADD_IPAddress
		Where  ADD_MasterID=@ADD_MasterID and ADD_DeviceType=@ADD_DeviceType and ADD_DeviceNo=@ADD_DeviceNo and ADD_YearID=@ADD_YearID and ADD_CompID=@ADD_CompID
		set @iUpdateOrSave=2          
		set @iOper = @ADD_ID
	 end  	     
	 else 	         
	  begin        
		set @ADD_ID=(select isnull(max(ADD_ID)+1,1) from Acc_DeviceDetails)   
		Insert into Acc_DeviceDetails(ADD_ID,ADD_MasterID,ADD_DeviceType,ADD_DeviceNo,ADD_ModelName,ADD_ManufacturedBy,ADD_DateofPurchase,ADD_Details,
ADD_WarrantyExpireson,ADD_Employeename,ADD_StandAloneServer,ADD_DescriptionDev,ADD_SuplierName,ADD_ContactPerson,ADD_Address,ADD_Phone,
ADD_Fax,ADD_EmailID,ADD_Website,ADD_CreatedBy,ADD_CreatedOn,ADD_DelFlag,ADD_Status,
ADD_YearID,ADD_CompID,ADD_Opeartion,ADD_IPAddress)
		values(@ADD_ID,@ADD_MasterID,@ADD_DeviceType,@ADD_DeviceNo,@ADD_ModelName,@ADD_ManufacturedBy,@ADD_DateofPurchase,@ADD_Details,
@ADD_WarrantyExpireson,@ADD_Employeename,@ADD_StandAloneServer,@ADD_DescriptionDev,@ADD_SuplierName,@ADD_ContactPerson,@ADD_Address,@ADD_Phone,
@ADD_Fax,@ADD_EmailID,@ADD_Website,@ADD_CreatedBy,@ADD_CreatedOn,@ADD_DelFlag,@ADD_Status,
@ADD_YearID,@ADD_CompID,'C',@ADD_IPAddress)
		set @iUpdateOrSave=3      
		set @iOper = @ADD_ID        
  end

/

CREATE  Procedure [dbo].[spAcc_MaintenanceDetails]        
(
 	@AMD_ID int ,
	@AMD_MasterID int ,
	@AMD_MaintainedBy varchar(100) ,
	@AMD_ContactPerson varchar(100) ,
	@AMD_Address varchar(500) ,
	@AMD_Phone varchar(15) ,
	@AMD_Fax varchar(10) ,
	@AMD_EmailID varchar(100) ,
	@AMD_Website varchar(200) ,
	@AMD_Companyname varchar(200),
	@AMD_AmcAmount money ,
	@AMD_AmcTermDate datetime ,
	@AMD_AmcTo datetime ,
	@AMD_AmcPaymentterm int ,
	@AMD_NoInstalment int ,
	@AMD_InstalmentAmnt money ,
	@AMD_TotalPaidinstalment int ,
	@AMD_TotalAmnt money ,
	@AMD_CreatedBy int ,
	@AMD_CreatedOn datetime ,
	@AMD_UpdatedBy int ,
	@AMD_UpdatedOn datetime ,
	@AMD_DelFlag char(1) ,
	@AMD_Status varchar(50) ,
	@AMD_YearID int ,
	@AMD_CompID int ,
	@AMD_Opeartion varchar(1) ,
	@AMD_IPAddress varchar(25), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as
 if exists(select AMD_ID from Acc_MaintenanceDetails where AMD_MasterID=@AMD_MasterID and AMD_YearID=@AMD_YearID and AMD_CompID=@AMD_CompID)              
     begin                	            
		Update Acc_MaintenanceDetails set 
		AMD_MaintainedBy=@AMD_MaintainedBy,AMD_ContactPerson=@AMD_ContactPerson,AMD_Address=@AMD_Address,AMD_Phone=@AMD_Phone,
		AMD_Fax=@AMD_Fax,AMD_EmailID=@AMD_EmailID,AMD_Website=@AMD_Website,AMD_Companyname=@AMD_Companyname,AMD_AmcAmount=@AMD_AmcAmount,
		AMD_AmcTermDate=@AMD_AmcTermDate,AMD_AmcTo=@AMD_AmcTo,AMD_AmcPaymentterm=@AMD_AmcPaymentterm,
		AMD_NoInstalment=@AMD_NoInstalment,AMD_InstalmentAmnt=@AMD_InstalmentAmnt,AMD_TotalPaidinstalment=@AMD_TotalPaidinstalment,
		AMD_TotalAmnt=@AMD_TotalAmnt,AMD_UpdatedBy=@AMD_UpdatedBy,AMD_UpdatedOn=@AMD_UpdatedOn,AMD_DelFlag=@AMD_DelFlag,
	AMD_Status=@AMD_Status,AMD_YearID=@AMD_YearID,AMD_CompID=@AMD_CompID,AMD_Opeartion=@AMD_Opeartion,AMD_IPAddress=@AMD_IPAddress

		Where AMD_MasterID=@AMD_MasterID and AMD_YearID=@AMD_YearID and AMD_CompID=@AMD_CompID
		set @iUpdateOrSave=2          
		set @iOper = @AMD_ID
	 end  	     
	 else 	         
	  begin        
		set @AMD_ID=(select isnull(max(AMD_ID)+1,1) from Acc_MaintenanceDetails)   
		Insert into Acc_MaintenanceDetails(AMD_ID,AMD_MasterID,AMD_MaintainedBy,AMD_ContactPerson,AMD_Address,AMD_Phone,AMD_Fax,AMD_EmailID,
	AMD_Website,AMD_Companyname,AMD_AmcAmount,AMD_AmcTermDate,AMD_AmcTo,AMD_AmcPaymentterm,AMD_NoInstalment,AMD_InstalmentAmnt,
	AMD_TotalPaidinstalment,AMD_TotalAmnt,AMD_CreatedBy,AMD_CreatedOn,AMD_DelFlag,
	AMD_Status,AMD_YearID,AMD_CompID,AMD_Opeartion,AMD_IPAddress)		
		values(@AMD_ID,@AMD_MasterID,@AMD_MaintainedBy,@AMD_ContactPerson,@AMD_Address,
		@AMD_Phone,@AMD_Fax,@AMD_EmailID,@AMD_Website,@AMD_Companyname,@AMD_AmcAmount,@AMD_AmcTermDate,@AMD_AmcTo,@AMD_AmcPaymentterm,
		@AMD_NoInstalment,@AMD_InstalmentAmnt,@AMD_TotalPaidinstalment,@AMD_TotalAmnt,@AMD_CreatedBy,@AMD_CreatedOn,
		@AMD_DelFlag,@AMD_Status,@AMD_YearID,@AMD_CompID,'C',@AMD_IPAddress )
		set @iUpdateOrSave=3      
		set @iOper = @AMD_ID        
  end

/

CREATE  Procedure [dbo].[spAcc_InsuranceDetails]        
(
 	@AID_ID int ,
	@AID_MasterID int ,
	@AID_InsuranceComp varchar(1000) ,
	@AID_ContactPerson varchar(100) ,
	@AID_Address varchar(500) ,
	@AID_Phone varchar(15) ,
	@AID_Fax varchar(10) ,
	@AID_Email varchar(100) ,
	@AID_Website varchar(100) ,
	@AID_PolicyType int ,
	@AID_PolicyNo varchar(25) ,
	@AID_PolicyAmount money ,
	@AID_Premiumpaid money ,
	@AID_TermDate datetime ,
	@AID_ToDate datetime ,
	@AID_CreatedBy int ,
	@AID_CreatedOn datetime ,
	@AID_UpdatedBy int ,
	@AID_UpdatedOn datetime ,
	@AID_DelFlag char(1) ,
	@AID_Status varchar(50) ,
	@AID_YearID int ,
	@AID_CompID int ,
	@AID_Opeartion varchar(1) ,
	@AID_IPAddress varchar(25), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as
 if exists(select AID_ID from Acc_InsuranceDetails where AID_MasterID=@AID_MasterID and AID_YearID=@AID_YearID and AID_CompID=@AID_CompID)              
     begin                	            
		Update Acc_InsuranceDetails set 
		AID_InsuranceComp=@AID_InsuranceComp,AID_ContactPerson=@AID_ContactPerson,AID_Address=@AID_Address,AID_Phone=@AID_Phone,
		AID_Fax=@AID_Fax,AID_Email=@AID_Email,AID_Website=@AID_Website,AID_PolicyType=@AID_PolicyType,AID_PolicyNo=@AID_PolicyNo,
		AID_PolicyAmount=@AID_PolicyAmount,AID_Premiumpaid=@AID_Premiumpaid,AID_TermDate=@AID_TermDate,AID_ToDate=@AID_ToDate,
		AID_UpdatedBy=@AID_UpdatedBy,AID_UpdatedOn=@AID_UpdatedOn,AID_DelFlag=@AID_DelFlag,AID_Status=@AID_Status,
		AID_YearID=@AID_YearID,AID_CompID=@AID_CompID,AID_Opeartion=@AID_Opeartion,AID_IPAddress=@AID_IPAddress 
		Where AID_MasterID=@AID_MasterID and AID_YearID=@AID_YearID and AID_CompID=@AID_CompID
		set @iUpdateOrSave=2          
		set @iOper = @AID_ID
	 end  	     
	 else 	         
	  begin        
		set @AID_ID=(select isnull(max(AID_ID)+1,1) from Acc_InsuranceDetails)   
		Insert into Acc_InsuranceDetails(AID_ID,AID_MasterID,AID_InsuranceComp,AID_ContactPerson,AID_Address,AID_Phone,AID_Fax,
	AID_Email,AID_Website,AID_PolicyType,AID_PolicyNo,AID_PolicyAmount,AID_Premiumpaid,
	AID_TermDate,AID_ToDate,AID_CreatedBy,AID_CreatedOn,AID_DelFlag,AID_Status,AID_YearID,AID_CompID,AID_Opeartion,AID_IPAddress)		
		values(@AID_ID,@AID_MasterID,@AID_InsuranceComp,@AID_ContactPerson,@AID_Address,@AID_Phone,@AID_Fax,
	@AID_Email,@AID_Website,@AID_PolicyType,@AID_PolicyNo,@AID_PolicyAmount,@AID_Premiumpaid,
	@AID_TermDate,@AID_ToDate,@AID_CreatedBy,@AID_CreatedOn,@AID_DelFlag,@AID_Status,@AID_YearID,@AID_CompID,'C',@AID_IPAddress)
		set @iUpdateOrSave=3      
		set @iOper = @AID_ID        
  end

/

CREATE  Procedure [dbo].[spAcc_InstallationDetails]        
(
 	@AIND_ID int ,
	@AIND_MasterID int ,
	@AIND_DeviceNo int ,
	@AIND_Software int ,
	@AIND_Version varchar(1000) ,
	@AIND_DateofInstln datetime ,
	@AIND_UnInstlnOn datetime ,
	@AIND_ReInstlnOn datetime ,
	@AIND_InstlnBy varchar(200) ,
	@AIND_DatabaseDtls varchar(1000) ,
	@AIND_Description varchar(1000) ,
	@AIND_InstlnPlace varchar(1000) ,
	@AIND_ContactPerson varchar(100) ,
	@AIND_Address varchar(500) ,
	@AIND_Phone varchar(15) ,
	@AIND_FAX varchar(10) ,
	@AIND_Email varchar(100) ,
	@AIND_Website varchar(100) ,
	@AIND_Maintainedby varchar(100) ,
	@AIND_MaintainedContactPerson varchar(100) ,
	@AIND_MaintainedAddress varchar(500) ,
	@AIND_MaintainedPhone varchar(15) ,
	@AIND_MaintainedFax varchar(10) ,
	@AIND_MaintainedEmail varchar(100) ,
	@AIND_MaintainedWebsite varchar(100) ,
	@AIND_CreatedBy int ,
	@AIND_CreatedOn datetime ,
	@AIND_UpdatedBy int ,
	@AIND_UpdatedOn datetime ,
	@AIND_DelFlag char(1) ,
	@AIND_Status varchar(50) ,
	@AIND_YearID int ,
	@AIND_CompID int ,
	@AIND_Opeartion varchar(1) ,
	@AIND_IPAddress varchar(25), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as
 if exists(select AIND_ID from Acc_InstallationDetails where AIND_MasterID=@AIND_MasterID and AIND_YearID=@AIND_YearID
  and AIND_CompID=@AIND_CompID)              
     begin                	            
		Update Acc_InstallationDetails set 
		AIND_DeviceNo=@AIND_DeviceNo,AIND_Software=@AIND_Software,AIND_Version=@AIND_Version,AIND_DateofInstln=@AIND_DateofInstln,
		AIND_UnInstlnOn=@AIND_UnInstlnOn,AIND_ReInstlnOn=@AIND_ReInstlnOn,AIND_InstlnBy=@AIND_InstlnBy,AIND_DatabaseDtls=@AIND_DatabaseDtls,
		AIND_Description=@AIND_Description,AIND_InstlnPlace=@AIND_InstlnPlace,AIND_ContactPerson=@AIND_ContactPerson,
		AIND_Address=@AIND_Address,AIND_Phone=@AIND_Phone,AIND_FAX=@AIND_FAX,AIND_Email=@AIND_Email,AIND_Website=@AIND_Website,
		AIND_Maintainedby=@AIND_Maintainedby,AIND_MaintainedContactPerson=@AIND_MaintainedContactPerson,
		AIND_MaintainedAddress=@AIND_MaintainedAddress,AIND_MaintainedPhone=@AIND_MaintainedPhone,
	AIND_MaintainedFax=@AIND_MaintainedFax,AIND_MaintainedEmail=@AIND_MaintainedEmail,AIND_MaintainedWebsite=@AIND_MaintainedWebsite,
	AIND_UpdatedBy=@AIND_UpdatedBy,AIND_UpdatedOn=@AIND_UpdatedOn,AIND_DelFlag=@AIND_DelFlag,AIND_Status=@AIND_Status,
	AIND_YearID=@AIND_YearID,AIND_CompID=@AIND_CompID,AIND_Opeartion=@AIND_Opeartion,AIND_IPAddress=@AIND_IPAddress
		Where AIND_MasterID=@AIND_MasterID and AIND_YearID=@AIND_YearID and AIND_CompID=@AIND_CompID
		set @iUpdateOrSave=2          
		set @iOper = @AIND_ID
	 end  	     
	 else 	         
	  begin        
		set @AIND_ID=(select isnull(max(AIND_ID)+1,1) from Acc_InstallationDetails)   
		Insert into Acc_InstallationDetails(AIND_ID,AIND_MasterID,AIND_DeviceNo,AIND_Software,AIND_Version,AIND_DateofInstln,
		AIND_UnInstlnOn,AIND_ReInstlnOn,AIND_InstlnBy,AIND_DatabaseDtls,AIND_Description,AIND_InstlnPlace,
		AIND_ContactPerson,AIND_Address,AIND_Phone,	AIND_FAX,AIND_Email,AIND_Website,AIND_Maintainedby,
		AIND_MaintainedContactPerson,AIND_MaintainedAddress,AIND_MaintainedPhone,AIND_MaintainedFax,AIND_MaintainedEmail,
		AIND_MaintainedWebsite,AIND_CreatedBy,AIND_CreatedOn,AIND_DelFlag,AIND_Status,AIND_YearID,AIND_CompID,AIND_Opeartion,
		AIND_IPAddress)		
		values(@AIND_ID,@AIND_MasterID,@AIND_DeviceNo,@AIND_Software,@AIND_Version,@AIND_DateofInstln,@AIND_UnInstlnOn,@AIND_ReInstlnOn,
	@AIND_InstlnBy,@AIND_DatabaseDtls,@AIND_Description,@AIND_InstlnPlace,@AIND_ContactPerson,@AIND_Address,@AIND_Phone,
	@AIND_FAX,@AIND_Email,@AIND_Website,@AIND_Maintainedby,@AIND_MaintainedContactPerson,@AIND_MaintainedAddress,@AIND_MaintainedPhone,
	@AIND_MaintainedFax,@AIND_MaintainedEmail,@AIND_MaintainedWebsite,@AIND_CreatedBy,@AIND_CreatedOn,@AIND_DelFlag,@AIND_Status,@AIND_YearID,@AIND_CompID,'C',@AIND_IPAddress)
		set @iUpdateOrSave=3      
		set @iOper = @AIND_ID        
  end

/

CREATE Procedure [dbo].[spData_Capture]                  
(                  
@DC_ID int,			
@DC_TransactionNo Varchar(50),
@DC_TrDate Datetime,
@DC_Company int,
@DC_Customer int,
@DC_TrType int,
@DC_BatchNo Varchar(50),
@DC_VoucherNo Varchar(50),
@DC_BaseName int,
@DC_Zone int,
@DC_Region int,
@DC_Area int,
@DC_Branch int,
@DC_PaymentType int,
@DC_Narration varchar(500),
@DC_Delfalg Char(1),
@DC_Status varchar(25),
@DC_CompID int,
@DC_YearID int,
@DC_CrBy int,
@DC_CrOn Datetime,
@DC_UpdatedBy int,
@DC_UpdatedOn Datetime,
@DC_Operation varchar(25),
@DC_IPAddress Varchar(25),
@iUpdateOrSave int Output,               
@iOper int Output                
)                    
 as                       
  if exists(select DC_ID from Data_Capture where DC_TransactionNo=@DC_TransactionNo and DC_Company=@DC_Company 
  and DC_TrType=@DC_TrType and DC_BatchNo=@DC_BatchNo and DC_Zone=@DC_Zone and DC_Region=@DC_Region and
   DC_Area=@DC_Area and DC_Branch=@DC_Branch and DC_CompID=@DC_CompID And DC_YearID=@DC_YearID)                        
   begin  
   Update Data_Capture Set DC_Customer=@DC_Customer,DC_TrDate=@DC_TrDate,DC_VoucherNo=@DC_VoucherNo,
   DC_PaymentType=@DC_PaymentType,DC_Narration=@DC_Narration,DC_Delfalg=@DC_Delfalg,DC_Status=@DC_Status,
   DC_UpdatedBy=@DC_UpdatedBy,DC_UpdatedOn=@DC_UpdatedOn,DC_Operation=@DC_Operation,DC_IPAddress=@DC_IPAddress
   Where DC_TransactionNo=@DC_TransactionNo and DC_Customer=@DC_Customer and DC_TrType=@DC_TrType and
    DC_BatchNo=@DC_BatchNo and DC_Zone=@DC_Zone and DC_Region=@DC_Region and DC_Area=@DC_Area and DC_Branch=@DC_Branch 
	and DC_CompID=@DC_CompID And DC_YearID=@DC_YearID
  set @iUpdateOrSave=2                    
    set @iOper = (select DC_ID from Data_Capture where DC_TransactionNo=@DC_TransactionNo and DC_Customer=@DC_Customer
	 and DC_TrType=@DC_TrType and DC_BatchNo=@DC_BatchNo and DC_Zone=@DC_Zone and DC_Region=@DC_Region and DC_Area=@DC_Area
	  and DC_Branch=@DC_Branch and DC_CompID=@DC_CompID And DC_YearID=@DC_YearID)
 end                              
  else                   
                  
        begin              
  set @DC_ID=(select isnull(max(DC_ID)+1,1) from Data_Capture)                  
  Insert into Data_Capture(DC_ID,DC_TransactionNo,DC_TrDate,DC_Company,DC_Customer,DC_TrType,DC_BatchNo,DC_VoucherNo,
  DC_BaseName,DC_Zone,DC_Region,DC_Area,DC_Branch,DC_PaymentType,DC_Narration,DC_Delfalg,DC_Status,DC_CompID,DC_YearID,
  DC_CrBy,DC_CrOn,DC_Operation,DC_IPAddress)           
  values (@DC_ID,@DC_TransactionNo,@DC_TrDate,@DC_Company,@DC_Customer,@DC_TrType,@DC_BatchNo,@DC_VoucherNo,@DC_BaseName,
  @DC_Zone,@DC_Region,@DC_Area,@DC_Branch,@DC_PaymentType,@DC_Narration,@DC_Delfalg,@DC_Status,@DC_CompID,@DC_YearID,
  @DC_CrBy,@DC_CrOn,@DC_Operation,@DC_IPAddress)              
    set @iUpdateOrSave=3                 
  set @iOper = @DC_ID                     
    end

/

CREATE Procedure spMST_BankCurrency_Masters(
@BCM_PKID int,		
@BCM_Currency int,
@BCM_OperateOn int,
@BCM_Date varchar(100),
@BCM_Time varchar(100),
@BCM_CreatedBy int,
@BCM_IPAddress varchar(200),
@BCM_TTBuy float,
@BCM_TTSell float,
@BCM_Buy float,
@BCM_Sell float,
@BCM_BankID Int,
@BCM_CompID Int,
@iSave int Output,              
@iOper int Output                
)          
 as                         
  if exists(select BCM_PKID from MST_BankCurrency_Masters where BCM_PKID=@BCM_PKID)                        
   begin  
   Update MST_BankCurrency_Masters Set BCM_Date=@BCM_Date,BCM_Time=@BCM_Time,BCM_TTBuy=@BCM_TTBuy,
   BCM_TTSell=@BCM_TTSell,BCM_Buy=@BCM_Buy,BCM_Sell=@BCM_Sell,BCM_BankID=@BCM_BankID
   Where BCM_PKID=@BCM_PKID              
  set @iSave=2                    
    set @iOper =(select BCM_PKID from MST_BankCurrency_Masters where BCM_PKID=@BCM_PKID)                                 
 end                              
  else            
   begin
 set @BCM_PKID=(select isnull(max(BCM_PKID)+1,1) from MST_BankCurrency_Masters) 
   Insert into MST_BankCurrency_Masters(BCM_PKID,BCM_Currency,BCM_OperateOn,BCM_Date,BCM_Time,BCM_CreatedBy,
   BCM_CreatedOn,BCM_IPAddress,BCM_TTBuy,BCM_TTSell,
   BCM_Buy,BCM_Sell,BCM_BankID,BCM_DelFlag,BCM_CompID)                                  
values(@BCM_PKID,@BCM_Currency,@BCM_OperateOn,@BCM_Date,@BCM_Time,@BCM_CreatedBy,GetDate(),@BCM_IPAddress,@BCM_TTBuy,@BCM_TTSell,
		@BCM_Buy,@BCM_Sell,@BCM_BankID,'W',@BCM_CompID)
	set @iSave=3     
	set @iOper = @BCM_PKID        
end 

/

Create Procedure spMST_Currency_Masters(
@CM_PKID int,		
@CM_Currency int,
@CM_OperateOn int,
@CM_Date varchar(100),
@CM_Time varchar(100),
@CM_CreatedBy int,
@CM_IPAddress varchar(200),
@CM_TTBuy float,
@CM_TTSell float,
@CM_Buy float,
@CM_Sell float,
@CM_Type float,
@CM_CompID int,
@CM_BankID int,
@iSave int Output,              
@iOper int Output                
)          
 as                         
  if exists(select CM_PKID from MST_Currency_Masters where CM_PKID=@CM_PKID)                        
   begin  
   Update MST_Currency_Masters Set CM_Date=@CM_Date,CM_Time=@CM_Time,CM_TTBuy=@CM_TTBuy,CM_TTSell=@CM_TTSell,
   CM_Buy=@CM_Buy,CM_Sell=@CM_Sell,CM_Type=@CM_Type,CM_BankID=@CM_BankID
Where CM_PKID=@CM_PKID              
  set @iSave=2                    
    set @iOper =(select CM_PKID from MST_Currency_Masters where CM_PKID=@CM_PKID)                                 
 end                              
  else            
   begin
 set @CM_PKID=(select isnull(max(CM_PKID)+1,1) from MST_Currency_Masters) 
   Insert into MST_Currency_Masters(CM_PKID,CM_Currency,CM_OperateOn,CM_Date,CM_Time,CM_CreatedBy,CM_CreatedOn,
   CM_IPAddress,CM_TTBuy,CM_TTSell,   CM_Buy,CM_Sell,CM_Type,CM_CompID,CM_BankID,CM_DelFlag)                                
 values(@CM_PKID,@CM_Currency,@CM_OperateOn,@CM_Date,@CM_Time,@CM_CreatedBy,GetDate(),@CM_IPAddress,@CM_TTBuy,
 @CM_TTSell,@CM_Buy,@CM_Sell,@CM_Type,@CM_CompID,@CM_BankID,'A')
	set @iSave=3     
	set @iOper = @CM_PKID        
end

/

Create Procedure spMST_ForeignExchange_Agents( 
@FE_ID Int,
@FE_AgencyName Varchar(100),
@FE_ContactName Varchar(100),
@FE_PhoneNo Float,
@FE_MobileNo Float,
@FE_Address Varchar(2000),
@FE_PostalCode Float,
@FE_City Int,
@FE_State Int,
@FE_Country Int,
@FE_FAX Varchar(100),
@FE_GSTNCategory Int,
@FE_GSTNRegNO Varchar(100),
@FE_Website Varchar(100),
@FE_EMail Varchar(50),
@FE_Bank Varchar(100),
@FE_ACCNO Float,
@FE_IFSC Varchar(100),
@FE_BranchName Varchar(100),
@FE_CRBY Int,
@FE_UpdatedBy Int,
@FE_IPAddress Varchar(25),
@FE_CompID Int,
@iUpdateOrSave int Output,    
@iOper int Output 
)
as  
 if exists(Select FE_ID from MST_ForeignExchange_Agents Where FE_ID=@FE_ID And FE_CompID=@FE_CompID)    
  begin 
  update MST_ForeignExchange_Agents set  FE_AgencyName=@FE_AgencyName,FE_ContactName=@FE_ContactName,FE_PhoneNo=@FE_PhoneNo,
  FE_MobileNo=@FE_MobileNo,FE_Address=@FE_Address,  FE_PostalCode=@FE_PostalCode,FE_City=@FE_City,FE_State=@FE_State,
  FE_Country=@FE_Country,FE_FAX=@FE_FAX,FE_GSTNCategory=@FE_GSTNCategory,FE_GSTNRegNO=@FE_GSTNRegNO,
  FE_Website=@FE_Website,FE_EMail=@FE_EMail,FE_Bank=@FE_Bank,FE_ACCNO=@FE_ACCNO,FE_IFSC=@FE_IFSC,
  FE_BranchName=@FE_BranchName,FE_Status='U',FE_UpdatedBy=@FE_UpdatedBy,
  FE_UpdatedOn=GetDate(),FE_IPAddress=@FE_IPAddress,FE_CompID=@FE_CompID
  Where  FE_ID=@FE_ID And FE_CompID=@FE_CompID
  set @iUpdateOrSave=2        
  set @iOper=(Select FE_ID from MST_ForeignExchange_Agents Where FE_ID=@FE_ID And FE_CompID=@FE_CompID)
End
  else     
 begin 
 set @FE_ID=(select isnull(max(FE_ID)+1,1) from MST_ForeignExchange_Agents)    
  Insert into MST_ForeignExchange_Agents (FE_ID,FE_AgencyName,FE_ContactName,FE_PhoneNo,FE_MobileNo,FE_Address,
  FE_PostalCode,FE_City,FE_State,FE_Country,FE_FAX,FE_GSTNCategory,FE_GSTNRegNO,FE_Website,FE_EMail,FE_Bank,
  FE_ACCNO,FE_IFSC,FE_BranchName,FE_Status,FE_DelFlag,FE_CRBY,FE_CRON,FE_IPAddress,FE_CompID)
  Values (@FE_ID,@FE_AgencyName,@FE_ContactName,@FE_PhoneNo,@FE_MobileNo,@FE_Address,@FE_PostalCode,@FE_City,@FE_State,
  @FE_Country,@FE_FAX,@FE_GSTNCategory,@FE_GSTNRegNO,@FE_Website,@FE_EMail,@FE_Bank,@FE_ACCNO,@FE_IFSC,@FE_BranchName,
  'C','W',@FE_CRBY,GetDate(),@FE_IPAddress,@FE_CompID) 
   set @iUpdateOrSave=3     
   set @iOper = @FE_ID  
End

/

CREATE Procedure spMST_FEAgents_Currency
( 
@FEA_ID Int,
@FEA_FEID Int,
@FEA_Currency Int,
@FEA_CRBY Int,
@FEA_CompID Int,
@iUpdateOrSave int Output,    
@iOper int Output 
)
as      
 begin 
 set @FEA_ID=(select isnull(max(FEA_ID)+1,1) from MST_FEAgents_Currency)    
  Insert into MST_FEAgents_Currency (FEA_ID,FEA_FEID,FEA_Currency,FEA_CRBY,FEA_CRON,FEA_CompID)
  Values (@FEA_ID,@FEA_FEID,@FEA_Currency,@FEA_CRBY,GetDate(),@FEA_CompID) 
   set @iUpdateOrSave=3     
   set @iOper = @FEA_CompID  
End

/

Create Procedure spMST_AgentsCurrency_Masters(
@ACM_PKID int,
@ACM_Agency int,		
@ACM_Currency int,
@ACM_OperateOn int,
@ACM_Date varchar(100),
@ACM_Time varchar(100),
@ACM_TTBuy float,
@ACM_TTSell float,
@ACM_Buy float,
@ACM_Sell float,
@ACM_CRBY Int,
@ACM_UpdatedBy Int,
@ACM_IPAddress Varchar(25),
@ACM_CompID Int,
@iSave int Output,              
@iOper int Output                
)          
 as                         
  if exists(select ACM_PKID from MST_AgentsCurrency_Masters where ACM_PKID=@ACM_PKID)                        
   begin  
   Update MST_AgentsCurrency_Masters Set ACM_Agency=@ACM_Agency,ACM_Date=@ACM_Date,ACM_Time=@ACM_Time,
   ACM_TTBuy=@ACM_TTBuy,ACM_TTSell=@ACM_TTSell,ACM_Buy=@ACM_Buy,
   ACM_Sell=@ACM_Sell,ACM_Status='U',ACM_UpdatedBy=@ACM_UpdatedBy,ACM_APPROVEDON=GetDate()
   Where ACM_PKID=@ACM_PKID              
   set @iSave=2                    
   set @iOper =(select ACM_PKID from MST_AgentsCurrency_Masters where ACM_PKID=@ACM_PKID)                                 
 end                              
  else            
   begin
 set @ACM_PKID=(select isnull(max(ACM_PKID)+1,1) from MST_AgentsCurrency_Masters) 
   Insert into MST_AgentsCurrency_Masters(ACM_PKID,ACM_Agency,ACM_Currency,ACM_OperateOn,ACM_Date,ACM_Time,
   ACM_TTBuy,ACM_TTSell,ACM_Buy,ACM_Sell,   ACM_Status,ACM_DelFlag,ACM_CRBY,ACM_CRON,ACM_IPAddress,ACM_CompID)        
   values (@ACM_PKID,@ACM_Agency,@ACM_Currency,@ACM_OperateOn,@ACM_Date,@ACM_Time,@ACM_TTBuy,@ACM_TTSell,@ACM_Buy,@ACM_Sell,
   'U','W',@ACM_CRBY,GetDate(),@ACM_IPAddress,@ACM_CompID)
   set @iSave=3     
   set @iOper = @ACM_PKID        
end

/

Create  procedure [dbo].[spAcc_AssetIncomeTaxRate]
(
@AIT_ID int ,
	@AIT_Asset_MasterID int ,
	@AIT_AssetID int ,
	@AIT_Description varchar(100),
	@AIT_AssetAge money ,
	@AIT_Quantity int ,
	@AIT_CommissionDate datetime ,
	@AIT_PurchaseAmount money ,
	@AIT_IncomeTax_rate money ,
	@AIT_NoOfDays int ,
	@AIT_IncomeTaxfor_theyear money ,
	@AIT_YTD money ,
	@AIT_WDV money ,
	@AIT_ResidualValue money ,
	@AIT_CreatedBy int ,
	@AIT_CreatedOn datetime ,
	@AIT_UpdatedBy int ,
	@AIT_UpdatedOn datetime ,
	@AIT_DelFlag char(1) ,
	@AIT_Status varchar(2) ,
	@AIT_YearID int ,
	@AIT_CompID int ,
	@AIT_Opeartion varchar(1) ,
	@AIT_IPAddress varchar(25),
	@iUpdateOrSave int Output,
    @iOper int Output
)
as
  if exists(select AIT_ID from Acc_AssetIncomeTaxRate where AIT_Asset_MasterID=@AIT_Asset_MasterID and
   AIT_YearID=@AIT_YearID And AIT_CompID=@AIT_CompID)
   begin
   update Acc_AssetIncomeTaxRate Set AIT_Asset_MasterID=@AIT_Asset_MasterID,AIT_AssetID=@AIT_AssetID,
   AIT_Description=@AIT_Description,AIT_AssetAge=@AIT_AssetAge,AIT_Quantity=@AIT_Quantity,
   AIT_CommissionDate=@AIT_CommissionDate,AIT_PurchaseAmount=@AIT_PurchaseAmount,AIT_IncomeTax_rate=@AIT_IncomeTax_rate,
   AIT_NoOfDays=@AIT_NoOfDays,AIT_IncomeTaxfor_theyear=@AIT_IncomeTaxfor_theyear,AIT_YTD=@AIT_YTD,
   AIT_WDV=@AIT_WDV,AIT_ResidualValue=@AIT_ResidualValue,AIT_UpdatedBy=@AIT_UpdatedBy,
AIT_UpdatedOn=getdate(),AIT_DelFlag=@AIT_DelFlag,AIT_Status=@AIT_Status,AIT_YearID=@AIT_YearID,AIT_CompID=@AIT_CompID
,AIT_Opeartion=@AIT_Opeartion,AIT_IPAddress=@AIT_IPAddress
   Where AIT_Asset_MasterID=@AIT_Asset_MasterID And  AIT_YearID=@AIT_YearID And AIT_CompID=@AIT_CompID
  set @iUpdateOrSave=2
    set @iOper = @AIT_ID
 end
  else
        begin
  set @AIT_ID=(select isnull(max(AIT_ID)+1,1) from Acc_AssetIncomeTaxRate)
  Insert into Acc_AssetIncomeTaxRate (AIT_ID,AIT_Asset_MasterID,AIT_AssetID,AIT_Description,AIT_AssetAge,AIT_Quantity,
  AIT_CommissionDate,AIT_PurchaseAmount,AIT_IncomeTax_rate,AIT_NoOfDays,AIT_IncomeTaxfor_theyear,AIT_YTD,AIT_WDV,
  AIT_ResidualValue,AIT_CreatedBy,AIT_CreatedOn,AIT_DelFlag,AIT_Status,AIT_YearID,AIT_CompID,AIT_Opeartion,AIT_IPAddress)
 values
(@AIT_ID,@AIT_Asset_MasterID,@AIT_AssetID,@AIT_Description,@AIT_AssetAge,@AIT_Quantity,@AIT_CommissionDate,@AIT_PurchaseAmount,
@AIT_IncomeTax_rate,@AIT_NoOfDays,@AIT_IncomeTaxfor_theyear,@AIT_YTD,@AIT_WDV,@AIT_ResidualValue,@AIT_CreatedBy,
getdate(),@AIT_DelFlag,@AIT_Status,@AIT_YearID,@AIT_CompID,@AIT_Opeartion,@AIT_IPAddress)
  set @iUpdateOrSave=3
  set @iOper = @AIT_ID
    end

/

	create Procedure [dbo].[spLgst_Vehicle_Master](
@LVM_ID int,
@LVM_RegNo varchar(1000),
@LVM_ChassisNo varchar(1000),
@LVM_EngineNo varchar (1000),
@LVM_VehicleType int,
@LVM_OwnerName varchar(5000),
@LVM_ServiceCntrDtls varchar(1000),
@LVM_VehicleDetails varchar(100),
@LVM_InsuranceType int,
@LVM_InsuranceNo varchar (200),
@LVM_InsuranceAmt money,
@LVM_InsuranceExpDate datetime,
@LVM_InsuranceDetails varchar(max) ,
@LVM_Delflag varchar(1),
@LVM_Status varchar(50),
@LVM_CreatedBy int,
@LVM_CreatedOn datetime,
@LVM_UpdatedBy int,
@LVM_UpdatedOn datetime,
@LVM_ApprovedBy int,
@LVM_ApprovedOn datetime,
@LVM_DeletedBy int,
@LVM_DeletedOn datetime,
@LVM_RecalldBy int,
@LVM_Group int,
@LVM_SubGroup int,
@LVM_GL int,
@LVM_SubGL int,
@LVM_CompID int,
@LVM_YearID int,
@LVM_Operation Varchar(100),
@LVM_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LVM_ID from Lgst_Vehicle_Master where LVM_ID=@LVM_ID And LVM_CompID=@LVM_CompID)
  begin
  update Lgst_Vehicle_Master set LVM_RegNo=@LVM_RegNo,LVM_ChassisNo=@LVM_ChassisNo,
LVM_EngineNo=@LVM_EngineNo,LVM_VehicleType=@LVM_VehicleType,LVM_OwnerName=@LVM_OwnerName,
LVM_ServiceCntrDtls=@LVM_ServiceCntrDtls,LVM_VehicleDetails=@LVM_VehicleDetails,LVM_InsuranceType=@LVM_InsuranceType,
LVM_InsuranceNo=@LVM_InsuranceNo,LVM_InsuranceAmt=@LVM_InsuranceAmt,LVM_InsuranceExpDate=@LVM_InsuranceExpDate,
LVM_InsuranceDetails=@LVM_InsuranceDetails,LVM_UpdatedBy=@LVM_UpdatedBy,LVM_UpdatedOn=@LVM_UpdatedOn
where LVM_ID=@LVM_ID And LVM_CompID=@LVM_CompID
  set @iUpdateOrSave=2
  set @iOper =@LVM_ID
End
  else
 begin
 set @LVM_ID=(select isnull(max(LVM_ID)+1,1) from Lgst_Vehicle_Master)
  insert into Lgst_Vehicle_Master (LVM_ID,LVM_RegNo,LVM_ChassisNo,LVM_EngineNo,
LVM_VehicleType,LVM_OwnerName,LVM_ServiceCntrDtls,LVM_VehicleDetails,LVM_DelFlag,LVM_Status, 

LVM_InsuranceType,LVM_InsuranceNo,LVM_InsuranceAmt,LVM_InsuranceExpDate,LVM_InsuranceDetails,
LVM_CreatedBy,LVM_CreatedOn,LVM_UpdatedBy,LVM_UpdatedOn,LVM_ApprovedBy,LVM_ApprovedOn,LVM_DeletedBy,LVM_DeletedOn,
LVM_RecalldBy,LVM_Group,LVM_SubGroup,LVM_GL,LVM_SubGL,LVM_CompID,LVM_YearID,LVM_Operation,LVM_IPAddress)
 values (@LVM_ID,@LVM_RegNo,@LVM_ChassisNo,@LVM_EngineNo,
@LVM_VehicleType,@LVM_OwnerName,@LVM_ServiceCntrDtls,@LVM_VehicleDetails,@LVM_DelFlag,@LVM_Status,
@LVM_InsuranceType,@LVM_InsuranceNo,@LVM_InsuranceAmt,@LVM_InsuranceExpDate,@LVM_InsuranceDetails,
@LVM_CreatedBy,@LVM_CreatedOn,@LVM_UpdatedBy,@LVM_UpdatedOn,@LVM_ApprovedBy,@LVM_ApprovedOn,@LVM_DeletedBy,@LVM_DeletedOn,
@LVM_RecalldBy,@LVM_Group,@LVM_SubGroup,@LVM_GL,@LVM_SubGL,@LVM_CompID,@LVM_YearID,@LVM_Operation,@LVM_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LVM_ID
End

/

CREATE Procedure [dbo].[spLgst_Pump_Master](         
@LPM_ID int,        
@LPM_PumpRegNo varchar(100),          
@LPM_PumpName varchar(1000),        
@LPM_ContactPerson varchar (1000),        
@LPM_MobNo varchar(100),       
@LPM_Details varchar(1000),    
@LPM_GstNo varchar(25),    
@LPM_Address varchar(5000), 
@LPM_Pincode varchar(50),     
@LPM_City int,           
@LPM_State int,        
@LPM_Delflag varchar(1), 
@LPM_Status varchar(50),  
@LPM_CreatedBy int,        
@LPM_CreatedOn datetime,               
@LPM_UpdatedBy int,        
@LPM_UpdatedOn datetime,
@LPM_Group int,   
@LPM_SubGroup int,
@LPM_GL int,
@LPM_SubGL int,
@LPM_CompID int, 
@LPM_YearID int, 
@LPM_Operation Varchar(100),        
@LPM_IPAddress Varchar(100),   
@iUpdateOrSave int Output,            
@iOper int Output         
)      
as          
if exists(select LPM_ID from Lgst_Pump_Master where LPM_ID=@LPM_ID And LPM_CompID=@LPM_CompID)            
begin                
update Lgst_Pump_Master set LPM_PumpRegNo=@LPM_PumpRegNo,LPM_PumpName=@LPM_PumpName,
LPM_ContactPerson=@LPM_ContactPerson ,LPM_MobNo=@LPM_MobNo,LPM_Details=@LPM_Details,LPM_GstNo=@LPM_GstNo,
LPM_Address=@LPM_Address,LPM_Pincode=@LPM_Pincode,LPM_City=@LPM_City,LPM_State=@LPM_State,LPM_Delflag=@LPM_Delflag,
LPM_Status=@LPM_Status,LPM_UpdatedBy=@LPM_UpdatedBy,LPM_UpdatedOn=getdate(),LPM_Group=@LPM_Group,   
LPM_SubGroup=@LPM_SubGroup,LPM_GL=@LPM_GL,LPM_SubGL=@LPM_SubGL,LPM_CompID=@LPM_CompID,
LPM_YearID=@LPM_YearID,LPM_Operation='U',LPM_IPAddress=@LPM_IPAddress
where  LPM_CompID=@LPM_CompID and LPM_ID=@LPM_ID    
set @iUpdateOrSave=2                
set @iOper =@LPM_ID          
End        
else             
begin         
set @LPM_ID=(select isnull(max(LPM_ID)+1,1) from Lgst_Pump_Master)            
insert into Lgst_Pump_Master(LPM_ID ,LPM_PumpRegNo,LPM_PumpName,LPM_ContactPerson ,LPM_MobNo,LPM_Details,LPM_GstNo,LPM_Address, 
LPM_Pincode,LPM_City,LPM_State,LPM_Delflag,LPM_Status,LPM_CreatedBy,LPM_CreatedOn,LPM_Group,   
LPM_SubGroup,LPM_GL,LPM_SubGL,LPM_CompID,LPM_YearID,LPM_Operation,LPM_IPAddress )        
values (@LPM_ID ,@LPM_PumpRegNo,@LPM_PumpName,@LPM_ContactPerson,@LPM_MobNo,@LPM_Details,@LPM_GstNo,@LPM_Address, 
@LPM_Pincode,@LPM_City,@LPM_State,@LPM_Delflag,@LPM_Status,@LPM_CreatedBy,getdate(),@LPM_Group,   
@LPM_SubGroup,@LPM_GL,@LPM_SubGL,@LPM_CompID,@LPM_YearID,@LPM_Operation,@LPM_IPAddress)         
set @iUpdateOrSave=3             
set @iOper = @LPM_ID          
End 

/

CREATE Procedure [dbo].[spLgst_PumpBank_Details]        
(        
@LPD_ID [int] ,
@LPD_PumpID [int] ,
@LPD_AccountNo [varchar](50) ,
@LPD_BankName [varchar](100) ,
@LPD_IFSC [varchar](50) ,
@LPD_Branch [varchar](200) ,
@LPD_DelFlag [char](1) ,
@LPD_Status [char](1) ,
@LPD_CreatedBy [int] ,
@LPD_CreatedOn [datetime] ,
@LPD_CompID [int] ,
@LPD_YearID [int] ,
@LPD_Operation [varchar](1) ,
@LPD_IPAddress [varchar](25), 
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select LPD_ID from Lgst_PumpBank_Details where LPD_ID=@LPD_ID And LPD_PumpID=@LPD_PumpID And
   LPD_CompID=@LPD_CompID And LPD_YearID=@LPD_YearID)              
     begin                	            
		Update Lgst_PumpBank_Details set LPD_AccountNo=@LPD_AccountNo,LPD_BankName=@LPD_BankName,LPD_IFSC=@LPD_IFSC,
		LPD_Branch=@LPD_Branch,LPD_UpdatedOn=GetDate(),LPD_Operation='U',LPD_IPAddress=@LPD_IPAddress
		Where LPD_ID=@LPD_ID And LPD_PumpID=@LPD_PumpID And LPD_CompID=@LPD_CompID And LPD_YearID=@LPD_YearID
		set @iUpdateOrSave=2          
		set @iOper = @LPD_ID
	 end      
	 	                         
  else         
	  begin        
		set @LPD_ID=(select isnull(max(LPD_ID)+1,1) from Lgst_PumpBank_Details)        
		Insert into Lgst_PumpBank_Details(LPD_ID,LPD_PumpID,LPD_AccountNo,LPD_BankName,LPD_IFSC,LPD_Branch,LPD_DelFlag,
		LPD_Status,LPD_CreatedBy,LPD_CreatedOn,LPD_CompID,LPD_YearID,LPD_Operation,LPD_IPAddress)
		values(@LPD_ID,@LPD_PumpID,@LPD_AccountNo,@LPD_BankName,@LPD_IFSC,@LPD_Branch,@LPD_DelFlag,@LPD_Status,
		@LPD_CreatedBy,@LPD_CreatedOn,@LPD_CompID,@LPD_YearID,@LPD_Operation,@LPD_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @LPD_ID        
  end

  /

  CREATE Procedure [dbo].[spLgst_Route_Master](         
@LRM_ID int ,
	@LRM_VehicleType int ,
	@LRM_StartPlace int ,
	@LRM_DestPlace int ,
	@LRM_StartDestPlace varchar(200),
	@LRM_DistinKms real ,
	@LRM_Rate money ,
	@LRM_DriverAlnceAmt money ,
	@LRM_PetrolQty real ,
	@LRM_AllottedTime varchar(200),
	@LRM_Group int ,
	@LRM_SubGroup int ,
	@LRM_GL int ,
	@LRM_SubGL int ,
	@LRM_DelFlag char(1) ,
	@LRM_Status char(1) ,
	@LRM_CreatedBy int ,
	@LRM_CreatedOn datetime ,
	@LRM_UpdatedBy int ,
	@LRM_UpdatedOn datetime ,
	@LRM_CompID int ,
	@LRM_YearID int ,
	@LRM_Operation varchar(1) ,
	@LRM_IPAddress varchar(25) ,  
@iUpdateOrSave int Output,            
@iOper int Output         
)      
as          
if exists(select LRM_ID from Lgst_Route_Master where LRM_ID=@LRM_ID And LRM_CompID=@LRM_CompID)            
begin   
Set @LRM_Status='U'               
update Lgst_Route_Master set LRM_VehicleType=@LRM_VehicleType,LRM_StartPlace=@LRM_StartPlace,LRM_DestPlace=@LRM_DestPlace,
LRM_StartDestPlace=@LRM_StartDestPlace,LRM_DistinKms=@LRM_DistinKms,LRM_Rate=@LRM_Rate,LRM_DriverAlnceAmt=@LRM_DriverAlnceAmt,
LRM_PetrolQty=@LRM_PetrolQty,LRM_AllottedTime =@LRM_AllottedTime ,LRM_Group=@LRM_Group,LRM_SubGroup=@LRM_SubGroup,
LRM_GL=@LRM_GL,LRM_SubGL=@LRM_SubGL,LRM_DelFlag=@LRM_DelFlag,LRM_Status=@LRM_Status,LRM_UpdatedBy=@LRM_UpdatedBy,
LRM_UpdatedOn=GetDate(),LRM_CompID=@LRM_CompID,LRM_YearID=@LRM_YearID,LRM_Operation='U',LRM_IPAddress=@LRM_IPAddress
where  LRM_CompID=@LRM_CompID and LRM_ID=@LRM_ID    
set @iUpdateOrSave=2                
set @iOper =@LRM_ID         
End        
else             
begin    
Set @LRM_Status='C'      
set @LRM_ID=(select isnull(max(LRM_ID)+1,1) from Lgst_Route_Master)            
insert into Lgst_Route_Master(LRM_ID,LRM_VehicleType,LRM_StartPlace,LRM_DestPlace,LRM_StartDestPlace,LRM_DistinKms,LRM_Rate,
LRM_DriverAlnceAmt,LRM_PetrolQty,LRM_AllottedTime,LRM_Group,LRM_SubGroup,LRM_GL,LRM_SubGL,LRM_DelFlag,LRM_Status,LRM_CreatedBy,
LRM_CreatedOn,LRM_CompID,LRM_YearID,LRM_Operation,LRM_IPAddress)        
values (@LRM_ID,@LRM_VehicleType,@LRM_StartPlace,@LRM_DestPlace,@LRM_StartDestPlace,@LRM_DistinKms,@LRM_Rate,
@LRM_DriverAlnceAmt,@LRM_PetrolQty,@LRM_AllottedTime,@LRM_Group,@LRM_SubGroup,@LRM_GL,@LRM_SubGL,@LRM_DelFlag,
@LRM_Status,@LRM_CreatedBy,GetDate(),@LRM_CompID,@LRM_YearID,@LRM_Operation,@LRM_IPAddress)         
set @iUpdateOrSave=3             
set @iOper = @LRM_ID          
End

/

CREATE Procedure [dbo].[spLgst_RoutePump_Details]        
(        
@LRD_ID int ,
	@LRD_RouteID int ,
	@LRD_PumpID int ,
	@LRD_DelFlag char(1) ,
	@LRD_Status char(1) ,
	@LRD_CreatedBy int ,
	@LRD_CreatedOn datetime ,
	@LRD_CompID int ,
	@LRD_YearID int ,
	@LRD_Operation varchar(1) ,
	@LRD_IPAddress varchar(25),
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select LRD_ID from Lgst_RoutePump_Details where LRD_ID=@LRD_ID And LRD_RouteID=@LRD_RouteID  And
   LRD_CompID=@LRD_CompID And LRD_YearID=@LRD_YearID)              
     begin                	            
		Update Lgst_RoutePump_Details set LRD_RouteID=@LRD_RouteID,LRD_PumpID=@LRD_PumpID,LRD_DelFlag=@LRD_DelFlag,
		LRD_Status=@LRD_Status,		LRD_UpdatedOn=Getdate(),LRD_CompID=@LRD_CompID,LRD_YearID=@LRD_YearID,LRD_Operation='U',
		LRD_IPAddress=@LRD_IPAddress
		set @iUpdateOrSave=2          
		set @iOper = @LRD_ID
	 end      
	 	                         
  else         
	  begin        
		set @LRD_ID=(select isnull(max(LRD_ID)+1,1) from Lgst_RoutePump_Details)        
		Insert into Lgst_RoutePump_Details(LRD_ID,LRD_RouteID,LRD_PumpID,LRD_DelFlag,LRD_Status,
		LRD_CreatedBy,LRD_CreatedOn,LRD_CompID,LRD_YearID,LRD_Operation,LRD_IPAddress)
		values(@LRD_ID,@LRD_RouteID,@LRD_PumpID,@LRD_DelFlag,@LRD_Status,
		@LRD_CreatedBy,@LRD_CreatedOn,@LRD_CompID,@LRD_YearID,@LRD_Operation,@LRD_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @LRD_ID       
  end

  /

  Create Procedure [dbo].[spLgst_Driver_Master](
@LDM_ID int,
@LDM_DriverName varchar(1000),
@LDM_LicenseNo varchar(1000),
@LDM_AadharNo varchar (1000),
@LDM_ContactNo varchar(200),
@LDM_City varchar(1000),
@LDM_PinCode varchar(100),
@LDM_InsuranceType int,
@LDM_InsuranceNo varchar (200),
@LDM_InsuranceAmt money,
@LDM_InsuranceExpDate datetime,
@LDM_InsuranceDetails varchar(max) , 
@LDM_Address varchar(max) ,
@LDM_Delflag varchar(1),
@LDM_Status varchar(50),
@LDM_CreatedBy int,
@LDM_CreatedOn datetime,
@LDM_UpdatedBy int,
@LDM_UpdatedOn datetime,
@LDM_ApprovedBy int,
@LDM_ApprovedOn datetime,
@LDM_DeletedBy int,
@LDM_DeletedOn datetime,
@LDM_RecalldBy int,
@LDM_Group int,
@LDM_SubGroup int,
@LDM_GL int,
@LDM_SubGL int,
@LDM_CompID int,
@LDM_YearID int,
@LDM_Operation Varchar(100),
@LDM_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LDM_ID from Lgst_Driver_Master where LDM_ID=@LDM_ID And LDM_CompID=@LDM_CompID)
  begin
  update Lgst_Driver_Master set LDM_DriverName=@LDM_DriverName,LDM_LicenseNo=@LDM_LicenseNo,
LDM_AadharNo=@LDM_AadharNo,LDM_ContactNo=@LDM_ContactNo,LDM_City=@LDM_City,
LDM_PinCode=@LDM_PinCode,@LDM_InsuranceType=@LDM_InsuranceType,LDM_InsuranceNo=@LDM_InsuranceNo,
LDM_InsuranceAmt=@LDM_InsuranceAmt,LDM_InsuranceExpDate=@LDM_InsuranceExpDate,
LDM_InsuranceDetails=@LDM_InsuranceDetails,LDM_Address=@LDM_Address,LDM_UpdatedBy=@LDM_UpdatedBy,
LDM_UpdatedOn=@LDM_UpdatedOn
where LDM_ID=@LDM_ID And LDM_CompID=@LDM_CompID
  set @iUpdateOrSave=2
  set @iOper =@LDM_ID
End
  else
 begin
 set @LDM_ID=(select isnull(max(LDM_ID)+1,1) from Lgst_Driver_Master)
  insert into Lgst_Driver_Master (LDM_ID,LDM_DriverName,LDM_LicenseNo,LDM_AadharNo,
LDM_ContactNo,LDM_City,LDM_PinCode,LDM_InsuranceType,LDM_InsuranceNo,LDM_InsuranceAmt,LDM_InsuranceExpDate,
LDM_InsuranceDetails,LDM_Address, LDM_DelFlag,LDM_Status,
LDM_CreatedBy,LDM_CreatedOn,LDM_UpdatedBy,LDM_UpdatedOn,LDM_ApprovedBy,LDM_ApprovedOn,LDM_DeletedBy,LDM_DeletedOn,
LDM_RecalldBy,LDM_Group,LDM_SubGroup,LDM_GL,LDM_SubGL,LDM_CompID,LDM_YearID,LDM_Operation,LDM_IPAddress)
 values (@LDM_ID,@LDM_DriverName,@LDM_LicenseNo,@LDM_AadharNo,
@LDM_ContactNo,@LDM_City,@LDM_PinCode,@LDM_InsuranceType,@LDM_InsuranceNo,@LDM_InsuranceAmt,@LDM_InsuranceExpDate,
@LDM_InsuranceDetails,@LDM_Address, @LDM_DelFlag,@LDM_Status,
@LDM_CreatedBy,@LDM_CreatedOn,@LDM_UpdatedBy,@LDM_UpdatedOn,@LDM_ApprovedBy,@LDM_ApprovedOn,@LDM_DeletedBy,@LDM_DeletedOn,
@LDM_RecalldBy,@LDM_Group,@LDM_SubGroup,@LDM_GL,@LDM_SubGL,@LDM_CompID,@LDM_YearID,@LDM_Operation,@LDM_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LdM_ID
End

/

CREATE Procedure [dbo].[spLgst_TripGeneration_Master](         
@LTGM_ID int ,
@LTGM_TransactionNo varchar(500),
	@LTGM_RouteID int ,
	@LTGM_VehicleType int ,
	@LTGM_VehivleNo int ,
	@LTGM_StartCity varchar(50) ,
	@LTGM_DestinationCity varchar(50) ,
	@LTGM_DistanceinKms real ,
	@LTGM_Rate money ,
	@LTGM_PetrolQty real,
	@LTGM_StartCustomer int ,
	@LTGM_DestinationCustomer int,
	@LTGM_SVCNo varchar(50) NULL,
	@LTGM_ClientRefNo varchar(50) NULL,
	@LTGM_Driver int ,
	@LTGM_DriverAmount money ,
	@LTGM_Remarks varchar(max) ,
	@LTGM_StartTime varchar(max) ,
	@LTGM_StopTime varchar(max) ,
	@LTGM_StartDate datetime,
	@LTGM_StopDate datetime,
	@LTGM_TripStatus int,
	@LTGM_EWayBillNo varchar(max),
	@LTGM_AllottedTime varchar(100) ,
    @LTGM_TripTakenTime varchar(100) ,
    @LTGM_TimeStatus varchar(25) ,
	@LTGM_MRStart real,
	@LTGM_MREnd real,
	@LTGM_MrStatus varchar(25) ,
	@LTGM_CompanyAddress varchar(200),
	@LTGM_CompanyGSTNRegNo varchar(20),
	@LTGM_CustomerAddress varchar(200),
	@LTGM_CustomerGSTNRegNo varchar(20),
	@LTGM_GSTNCategory int,
    @LTGM_GSTRate money,
    @LTGM_GSTAmount money,
    @LTGM_SGST money,
    @LTGM_SGSTAmount money,
    @LTGM_CGST money,
    @LTGM_CGSTAmount money,
    @LTGM_IGST money,
    @LTGM_IGSTAmount money,
	@LTGM_GSTCustBillStatus varchar(20),
	@LTGM_State varchar(500),
	@LTGM_DelFlag char(1) NULL,
	@LTGM_Status char(1) NULL,
	@LTGM_CreatedBy int ,
	@LTGM_CreatedOn datetime ,
	@LTGM_UpdatedBy int ,
	@LTGM_UpdatedOn datetime ,
	@LTGM_CompID int ,
	@LTGM_YearID int ,
	@LTGM_Operation varchar(1) ,
	@LTGM_IPAddress varchar(25) ,   
@iUpdateOrSave int Output,            
@iOper int Output         
)      
as          
if exists(select LTGM_ID from Lgst_TripGeneration_Master where LTGM_ID=@LTGM_ID And LTGM_CompID=@LTGM_CompID)            
begin                
update Lgst_TripGeneration_Master set LTGM_TransactionNo=@LTGM_TransactionNo, LTGM_RouteID=@LTGM_RouteID,
LTGM_VehicleType=@LTGM_VehicleType,LTGM_VehivleNo=@LTGM_VehivleNo,LTGM_StartCity=@LTGM_StartCity,
LTGM_DestinationCity=@LTGM_DestinationCity,LTGM_DistanceinKms=@LTGM_DistanceinKms,LTGM_Rate=@LTGM_Rate,
LTGM_PetrolQty=@LTGM_PetrolQty,LTGM_StartCustomer=@LTGM_StartCustomer,LTGM_DestinationCustomer=@LTGM_DestinationCustomer,
LTGM_SVCNo=@LTGM_SVCNo,LTGM_ClientRefNo=@LTGM_ClientRefNo,LTGM_Driver=@LTGM_Driver,LTGM_DriverAmount=@LTGM_DriverAmount,
LTGM_Remarks=@LTGM_Remarks,LTGM_StartTime=@LTGM_StartTime,LTGM_StopTime=@LTGM_StopTime,LTGM_StartDate=@LTGM_StartDate,
LTGM_StopDate=@LTGM_StopDate,LTGM_TripStatus=@LTGM_TripStatus,LTGM_DelFlag=@LTGM_DelFlag,LTGM_Status=@LTGM_Status,
LTGM_EWayBillNo=@LTGM_EWayBillNo,LTGM_AllottedTime=@LTGM_AllottedTime,LTGM_TripTakenTime=@LTGM_TripTakenTime,
LTGM_TimeStatus=@LTGM_TimeStatus,LTGM_MRStart=@LTGM_MRStart,LTGM_MREnd=@LTGM_MREnd,LTGM_MrStatus=@LTGM_MrStatus,
LTGM_CompanyAddress=@LTGM_CompanyAddress ,LTGM_CompanyGSTNRegNo=@LTGM_CompanyGSTNRegNo,
LTGM_CustomerAddress=@LTGM_CustomerAddress ,LTGM_CustomerGSTNRegNo=@LTGM_CustomerGSTNRegNo,LTGM_GSTNCategory=@LTGM_GSTNCategory,
LTGM_GSTRate=@LTGM_GSTRate ,LTGM_GSTAmount=@LTGM_GSTAmount ,LTGM_SGST=@LTGM_SGST ,LTGM_SGSTAmount=@LTGM_SGSTAmount,
LTGM_CGST=@LTGM_CGST ,LTGM_CGSTAmount=@LTGM_CGSTAmount ,LTGM_IGST=@LTGM_IGST ,LTGM_IGSTAmount=@LTGM_IGSTAmount ,
LTGM_GSTCustBillStatus=@LTGM_GSTCustBillStatus ,LTGM_State=@LTGM_State ,LTGM_UpdatedBy=@LTGM_UpdatedBy ,
LTGM_UpdatedOn=getdate() ,LTGM_CompID=@LTGM_CompID ,LTGM_YearID=@LTGM_YearID ,
LTGM_Operation='U',LTGM_IPAddress=@LTGM_IPAddress
where  LTGM_CompID=@LTGM_CompID and LTGM_ID=@LTGM_ID    
set @iUpdateOrSave=2                
set @iOper =@LTGM_ID          
End        
else             
begin         
set @LTGM_ID=(select isnull(max(LTGM_ID)+1,1) from Lgst_TripGeneration_Master)            
insert into Lgst_TripGeneration_Master(LTGM_ID,LTGM_TransactionNo,LTGM_RouteID,LTGM_VehicleType,LTGM_VehivleNo,
LTGM_StartCity,LTGM_DestinationCity,LTGM_DistanceinKms,LTGM_Rate,LTGM_PetrolQty,LTGM_StartCustomer,
LTGM_DestinationCustomer,LTGM_SVCNo,LTGM_ClientRefNo,LTGM_Driver,LTGM_DriverAmount,LTGM_Remarks,LTGM_StartTime,
LTGM_StopTime,LTGM_StartDate,LTGM_StopDate,LTGM_TripStatus,LTGM_EWayBillNo,LTGM_AllottedTime,LTGM_TripTakenTime,
LTGM_TimeStatus,LTGM_MRStart ,LTGM_MREnd ,LTGM_MrStatus,LTGM_CompanyAddress ,LTGM_CompanyGSTNRegNo ,
LTGM_CustomerAddress ,LTGM_CustomerGSTNRegNo ,LTGM_GSTNCategory ,LTGM_GSTRate ,LTGM_GSTAmount ,LTGM_SGST ,
LTGM_SGSTAmount ,LTGM_CGST ,LTGM_CGSTAmount ,LTGM_IGST ,LTGM_IGSTAmount ,LTGM_GSTCustBillStatus,LTGM_State,
LTGM_DelFlag,LTGM_Status,LTGM_CreatedBy,LTGM_CreatedOn,LTGM_CompID,LTGM_YearID,LTGM_Operation,LTGM_IPAddress)        
values (@LTGM_ID,@LTGM_TransactionNo,@LTGM_RouteID,@LTGM_VehicleType,@LTGM_VehivleNo,@LTGM_StartCity,@LTGM_DestinationCity,
@LTGM_DistanceinKms,@LTGM_Rate,@LTGM_PetrolQty,@LTGM_StartCustomer,@LTGM_DestinationCustomer,@LTGM_SVCNo,@LTGM_ClientRefNo,
@LTGM_Driver,@LTGM_DriverAmount,@LTGM_Remarks,@LTGM_StartTime,@LTGM_StopTime,@LTGM_StartDate,
@LTGM_StopDate,@LTGM_TripStatus,@LTGM_EWayBillNo,@LTGM_AllottedTime,@LTGM_TripTakenTime,@LTGM_TimeStatus ,@LTGM_MRStart ,
@LTGM_MREnd ,@LTGM_MrStatus ,@LTGM_CompanyAddress ,@LTGM_CompanyGSTNRegNo ,@LTGM_CustomerAddress ,@LTGM_CustomerGSTNRegNo ,
@LTGM_GSTNCategory ,@LTGM_GSTRate ,@LTGM_GSTAmount ,@LTGM_SGST ,@LTGM_SGSTAmount ,@LTGM_CGST ,@LTGM_CGSTAmount ,
@LTGM_IGST ,@LTGM_IGSTAmount ,@LTGM_GSTCustBillStatus,@LTGM_State,
@LTGM_DelFlag,@LTGM_Status,@LTGM_CreatedBy,getdate(),@LTGM_CompID,@LTGM_YearID,@LTGM_Operation,@LTGM_IPAddress)         
set @iUpdateOrSave=3             
set @iOper = @LTGM_ID          
End

/

CREATE Procedure [dbo].[spLgst_TripGenDiesel_Details]        
(        
@LTGDD_ID int ,
	@LTGDD_TripID int ,
	@LTGDD_PumpID int ,
	@LTGDD_IndDate datetime ,
	@LTGDD_DieselinLtrs real ,
	@LTGDD_DIESELRatePerltr real,	
	@LTGDD_OilInltr real,
	@LTGDD_OilAmountInLtr varchar(max) ,
	@LTGDD_DieselAmount varchar(max) ,
	@LTGDD_DriverAdvancGvnByPump [real] ,
	@LTGDD_OtherExpenses [real] ,
	@LTGDD_Remarks varchar(max) ,
	@LTGDD_DelFlag char(1) NULL,
	@LTGDD_Status char(1) NULL,
	@LTGDD_CreatedBy int ,
	@LTGDD_CreatedOn datetime ,
	@LTGDD_CompID int ,
	@LTGDD_YearID int ,
	@LTGDD_Operation varchar(1) ,
	@LTGDD_IPAddress varchar(25),
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select LTGDD_ID from Lgst_TripGenDiesel_Details where LTGDD_ID=@LTGDD_ID And
   LTGDD_TripID=@LTGDD_TripID And LTGDD_CompID=@LTGDD_CompID And LTGDD_YearID=@LTGDD_YearID)              
     begin                	            
		Update Lgst_TripGenDiesel_Details set LTGDD_TripID=@LTGDD_TripID,LTGDD_PumpID=@LTGDD_PumpID,LTGDD_IndDate=@LTGDD_IndDate,
		LTGDD_DieselinLtrs=@LTGDD_DieselinLtrs,LTGDD_DIESELRatePerltr=@LTGDD_DIESELRatePerltr,LTGDD_OilInltr=@LTGDD_OilInltr,
		LTGDD_OilAmountInLtr=@LTGDD_OilAmountInLtr,LTGDD_DieselAmount=@LTGDD_DieselAmount,
		LTGDD_DriverAdvancGvnByPump=@LTGDD_DriverAdvancGvnByPump,LTGDD_OtherExpenses=@LTGDD_OtherExpenses,
		LTGDD_Remarks=@LTGDD_Remarks,LTGDD_DelFlag=@LTGDD_DelFlag,LTGDD_Status=@LTGDD_Status,LTGDD_UpdatedOn=getdate(),
		LTGDD_CompID=@LTGDD_CompID,LTGDD_YearID=@LTGDD_YearID,LTGDD_Operation='U',LTGDD_IPAddress=@LTGDD_IPAddress
		Where LTGDD_ID=@LTGDD_ID And LTGDD_TripID=@LTGDD_TripID And LTGDD_CompID=@LTGDD_CompID And LTGDD_YearID=@LTGDD_YearID
		set @iUpdateOrSave=2          
		set @iOper = @LTGDD_ID
	 end                         
  else         
	  begin        
		set @LTGDD_ID=(select isnull(max(LTGDD_ID)+1,1) from Lgst_TripGenDiesel_Details)        
		Insert into Lgst_TripGenDiesel_Details(LTGDD_ID,LTGDD_TripID,LTGDD_PumpID,LTGDD_IndDate,LTGDD_DieselinLtrs,
		LTGDD_DIESELRatePerltr,LTGDD_OilInltr,LTGDD_OilAmountInLtr,LTGDD_DieselAmount,LTGDD_DriverAdvancGvnByPump,
		LTGDD_OtherExpenses,LTGDD_Remarks,LTGDD_DelFlag,LTGDD_Status,LTGDD_CreatedBy,LTGDD_CreatedOn,LTGDD_CompID,
		LTGDD_YearID,LTGDD_Operation,LTGDD_IPAddress)
		values(@LTGDD_ID,@LTGDD_TripID,@LTGDD_PumpID,@LTGDD_IndDate,@LTGDD_DieselinLtrs,@LTGDD_DIESELRatePerltr,
		@LTGDD_OilInltr,@LTGDD_OilAmountInLtr,@LTGDD_DieselAmount,@LTGDD_DriverAdvancGvnByPump,
		@LTGDD_OtherExpenses,@LTGDD_Remarks,@LTGDD_DelFlag,@LTGDD_Status,@LTGDD_CreatedBy,GETDATE(),
		@LTGDD_CompID,@LTGDD_YearID,@LTGDD_Operation,@LTGDD_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @LTGDD_ID        
  end

  /

  CREATE Procedure [dbo].[spLgst_TripGenHopOn_Details]        
(        
@LTGHD_ID int ,
	@LTGHD_TripID int ,
	@LTGHD_InTime varchar(max) ,
	@LTGHD_OutTime varchar(max) ,
	@LTGHD_HopOnDetails varchar(max) ,
	@LTGHD_DelFlag char(1) NULL,
	@LTGHD_Status char(1) NULL,
	@LTGHD_CreatedBy int ,
	@LTGHD_CreatedOn datetime ,
	@LTGHD_CompID int ,
	@LTGHD_YearID int ,
	@LTGHD_Operation varchar(1) ,
	@LTGHD_IPAddress varchar(25),
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select LTGHD_ID from Lgst_TripGenHopOn_Details where LTGHD_ID=@LTGHD_ID And
   LTGHD_TripID=@LTGHD_TripID And LTGHD_CompID=@LTGHD_CompID And LTGHD_YearID=@LTGHD_YearID)              
     begin                	            
		Update Lgst_TripGenHopOn_Details set LTGHD_TripID=@LTGHD_TripID,LTGHD_Intime=@LTGHD_Intime,LTGHD_OutTime=@LTGHD_OutTime,
		LTGHD_HopOnDetails=@LTGHD_HopOnDetails,LTGHD_DelFlag=@LTGHD_DelFlag,LTGHD_Status=@LTGHD_Status,
		LTGHD_UpdatedOn=getdate(),LTGHD_CompID=@LTGHD_CompID,LTGHD_YearID=@LTGHD_YearID,LTGHD_Operation='U',
		LTGHD_IPAddress=@LTGHD_IPAddress
		Where LTGHD_ID=@LTGHD_ID And LTGHD_TripID=@LTGHD_TripID And LTGHD_CompID=@LTGHD_CompID And LTGHD_YearID=@LTGHD_YearID
		set @iUpdateOrSave=2          
		set @iOper = @LTGHD_ID
	 end                         
  else         
	  begin        
		set @LTGHD_ID=(select isnull(max(LTGHD_ID)+1,1) from Lgst_TripGenHopOn_Details)        
		Insert into Lgst_TripGenHopOn_Details(LTGHD_ID,LTGHD_TripID,LTGHD_Intime,LTGHD_OutTime,LTGHD_HopOnDetails,LTGHD_DelFlag,
		LTGHD_Status,LTGHD_CreatedBy,LTGHD_CreatedOn,LTGHD_CompID,LTGHD_YearID,LTGHD_Operation,LTGHD_IPAddress)
		values(@LTGHD_ID,@LTGHD_TripID,@LTGHD_Intime,@LTGHD_OutTime,@LTGHD_HopOnDetails,@LTGHD_DelFlag,
		@LTGHD_Status,@LTGHD_CreatedBy,GETDATE(),@LTGHD_CompID,@LTGHD_YearID,@LTGHD_Operation,@LTGHD_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @LTGHD_ID        
  end

  /

  CREATE Procedure [dbo].[spLgst_CustomerBilling](         
@LCB_ID int ,
    @LCB_CustomerID int ,
	 @LCB_RouteName varchar(200) ,
    @LCB_FromDate datetime ,
    @LCB_ToDate datetime ,
    @LCB_InvDate datetime ,
	@LCB_InvNo varchar(50) ,
	@LCB_CustOrderRef varchar(100) ,
	@LCB_Agreement varchar(100) ,
    @LCB_TotalAmt money ,
	@LCB_CompanyAddress varchar(200),
	@LCB_CompanyGSTNRegNo varchar(20),
	@LCB_CustomerAddress varchar(200),
	@LCB_CustomerGSTNRegNo varchar(20),
	@LCB_GSTNCategory int,
    @LCB_GSTRate money,
    @LCB_GSTAmount money,
    @LCB_SGST money,
    @LCB_SGSTAmount money,
    @LCB_CGST money,
    @LCB_CGSTAmount money,
    @LCB_IGST money,
    @LCB_IGSTAmount money,
	@LCB_GSTCustBillStatus varchar(20),
	@LCB_State varchar(20),
    @LCB_DelFlag char(1),
    @LCB_Status char(1),
    @LCB_CreatedBy int ,
    @LCB_CreatedOn datetime ,
    @LCB_UpdatedBy int ,
    @LCB_UpdatedOn datetime ,
    @LCB_CompID int ,
    @LCB_YearID int ,
    @LCB_Operation varchar(1) ,
    @LCB_IPAddress varchar(25) ,   
@iUpdateOrSave int Output,            
@iOper int Output         
)      
as          
if exists(select LCB_ID from Lgst_CustomerBilling where LCB_ID=@LCB_ID And LCB_CompID=@LCB_CompID)            
begin                
update Lgst_CustomerBilling set LCB_CustomerID=@LCB_CustomerID,LCB_RouteName=@LCB_RouteName,LCB_FromDate=@LCB_FromDate,
LCB_ToDate=@LCB_ToDate,LCB_InvDate=@LCB_InvDate,LCB_InvNo=@LCB_InvNo,LCB_CustOrderRef=@LCB_CustOrderRef,LCB_Agreement=@LCB_Agreement,
LCB_TotalAmt=@LCB_TotalAmt,LCB_CompanyAddress=@LCB_CompanyAddress ,LCB_CompanyGSTNRegNo=@LCB_CompanyGSTNRegNo ,
LCB_CustomerAddress=@LCB_CustomerAddress ,LCB_CustomerGSTNRegNo=@LCB_CustomerGSTNRegNo ,LCB_GSTNCategory=@LCB_GSTNCategory ,
LCB_GSTRate=@LCB_GSTRate ,LCB_GSTAmount=@LCB_GSTAmount ,LCB_SGST=@LCB_SGST ,LCB_SGSTAmount=@LCB_SGSTAmount ,LCB_CGST=@LCB_CGST ,
LCB_CGSTAmount=@LCB_CGSTAmount ,LCB_IGST=@LCB_IGST ,LCB_IGSTAmount=@LCB_IGSTAmount ,LCB_GSTCustBillStatus=@LCB_GSTCustBillStatus,
LCB_State=@LCB_State,LCB_DelFlag=@LCB_DelFlag,LCB_Status=@LCB_Status,LCB_UpdatedBy=@LCB_UpdatedBy,LCB_UpdatedOn=getdate(),
LCB_CompID=@LCB_CompID,LCB_YearID=@LCB_YearID,LCB_Operation='U',LCB_IPAddress=@LCB_IPAddress
where  LCB_CompID=@LCB_CompID and LCB_ID=@LCB_ID    
set @iUpdateOrSave=2                
set @iOper =@LCB_ID          
End        
else             
begin         
set @LCB_ID=(select isnull(max(LCB_ID)+1,1) from Lgst_CustomerBilling)            
insert into Lgst_CustomerBilling(LCB_ID,LCB_CustomerID,LCB_RouteName,LCB_FromDate,LCB_ToDate,LCB_InvDate,LCB_InvNo,LCB_CustOrderRef,
LCB_Agreement,LCB_TotalAmt,LCB_CompanyAddress ,LCB_CompanyGSTNRegNo ,LCB_CustomerAddress ,LCB_CustomerGSTNRegNo ,LCB_GSTNCategory ,
LCB_GSTRate ,LCB_GSTAmount ,LCB_SGST ,LCB_SGSTAmount ,LCB_CGST ,LCB_CGSTAmount ,LCB_IGST ,LCB_IGSTAmount ,LCB_GSTCustBillStatus,
LCB_State,LCB_DelFlag,LCB_Status,LCB_CreatedBy,LCB_CreatedOn,LCB_UpdatedBy,LCB_UpdatedOn,LCB_CompID,LCB_YearID,LCB_Operation,
LCB_IPAddress)        
values (@LCB_ID,@LCB_CustomerID,@LCB_RouteName,@LCB_FromDate,@LCB_ToDate,@LCB_InvDate,@LCB_InvNo,@LCB_CustOrderRef,@LCB_Agreement,
@LCB_TotalAmt,@LCB_CompanyAddress ,@LCB_CompanyGSTNRegNo ,@LCB_CustomerAddress ,@LCB_CustomerGSTNRegNo ,@LCB_GSTNCategory ,
@LCB_GSTRate ,@LCB_GSTAmount ,@LCB_SGST ,@LCB_SGSTAmount ,@LCB_CGST ,@LCB_CGSTAmount ,@LCB_IGST ,@LCB_IGSTAmount ,
@LCB_GSTCustBillStatus,@LCB_State,@LCB_DelFlag,@LCB_Status,@LCB_CreatedBy,GETDATE(),@LCB_UpdatedBy,@LCB_UpdatedOn,
@LCB_CompID,@LCB_YearID,@LCB_Operation,@LCB_IPAddress)         
set @iUpdateOrSave=3             
set @iOper = @LCB_ID          
End

/

Create Procedure [dbo].[spLgst_DriverBilling](         
	@LDB_ID int ,
    @LDB_DriverID int ,
    @LDB_FromDate datetime ,
    @LDB_ToDate datetime ,
    @LDB_BillDate datetime ,
	@LDB_BillNo varchar(50) ,
	@LDB_TotalAmt money ,
	@LDB_AdvanceGvnAmt money ,
	@LDB_PendingAmt money ,
	@LDB_DelFlag char(1),
    @LDB_Status char(1),
    @LDB_CreatedBy int ,
    @LDB_CreatedOn datetime ,
    @LDB_UpdatedBy int ,
    @LDB_UpdatedOn datetime ,
    @LDB_CompID int ,
    @LDB_YearID int ,
    @LDB_Operation varchar(1) ,
    @LDB_IPAddress varchar(25) ,   
@iUpdateOrSave int Output,            
@iOper int Output         
)      
as          
if exists(select LDB_ID from Lgst_DriverBilling where LDB_ID=@LDB_ID And LDB_CompID=@LDB_CompID)            
begin                
update Lgst_DriverBilling set LDB_DriverID=@LDB_DriverID,LDB_FromDate=@LDB_FromDate,LDB_ToDate=@LDB_ToDate,
LDB_BillDate=@LDB_BillDate,LDB_BillNo=@LDB_BillNo,LDB_TotalAmt=@LDB_TotalAmt,LDB_AdvanceGvnAmt=@LDB_AdvanceGvnAmt,
LDB_PendingAmt=@LDB_PendingAmt,LDB_DelFlag=@LDB_DelFlag,LDB_Status=@LDB_Status,LDB_UpdatedBy=@LDB_UpdatedBy,LDB_UpdatedOn=getdate(),
LDB_CompID=@LDB_CompID,LDB_YearID=@LDB_YearID,LDB_Operation='U',LDB_IPAddress=@LDB_IPAddress
where  LDB_CompID=@LDB_CompID and LDB_ID=@LDB_ID    
set @iUpdateOrSave=2                
set @iOper =@LDB_ID          
End        
else             
begin         
set @LDB_ID=(select isnull(max(LDB_ID)+1,1) from Lgst_DriverBilling)            
insert into Lgst_DriverBilling(LDB_ID,LDB_DriverID,LDB_FromDate,LDB_ToDate,LDB_BillDate,LDB_BillNo,LDB_TotalAmt,LDB_AdvanceGvnAmt,
LDB_PendingAmt,LDB_DelFlag,LDB_Status,LDB_CreatedBy,LDB_CreatedOn,LDB_UpdatedBy,LDB_UpdatedOn,LDB_CompID,LDB_YearID,LDB_Operation,
LDB_IPAddress)        
values (@LDB_ID,@LDB_DriverID,@LDB_FromDate,@LDB_ToDate,@LDB_BillDate,@LDB_BillNo,@LDB_TotalAmt,@LDB_AdvanceGvnAmt,@LDB_PendingAmt,
@LDB_DelFlag,@LDB_Status,@LDB_CreatedBy,GETDATE(),@LDB_UpdatedBy,@LDB_UpdatedOn,@LDB_CompID,@LDB_YearID,@LDB_Operation,@LDB_IPAddress)         
set @iUpdateOrSave=3             
set @iOper = @LDB_ID          
End
 
 /
 
CREATE Procedure [dbo].[spLgst_PumpBilling](         
	@LPB_ID int ,
    @LPB_PumpID int ,
    @LPB_FromDate datetime ,
    @LPB_ToDate datetime ,
    @LPB_BillDate datetime ,
	@LPB_BillNo varchar(50) ,
	@LPB_TotalLtr money ,
	@LPB_TotalDieselAmt money ,
	@LPB_AdvanceAmt money ,
	@LPB_OtherExpense money ,
	@LPB_TotalAmt money ,
	@LPB_TCS varchar(50),
    @LPB_DelFlag char(1),
    @LPB_Status char(1),
    @LPB_CreatedBy int ,
    @LPB_CreatedOn datetime ,
    @LPB_UpdatedBy int ,
    @LPB_UpdatedOn datetime ,
    @LPB_CompID int ,
    @LPB_YearID int ,
    @LPB_Operation varchar(1) ,
    @LPB_IPAddress varchar(25) ,   
@iUpdateOrSave int Output,            
@iOper int Output         
)      
as          
if exists(select LPB_ID from Lgst_PumpBilling where LPB_ID=@LPB_ID And LPB_CompID=@LPB_CompID)            
begin                
update Lgst_PumpBilling set LPB_PumpID=@LPB_PumpID,LPB_FromDate=@LPB_FromDate,LPB_ToDate=@LPB_ToDate,
LPB_BillDate=@LPB_BillDate,LPB_BillNo=@LPB_BillNo,LPB_TotalLtr=@LPB_TotalLtr,LPB_TotalDieselAmt=@LPB_TotalDieselAmt,
LPB_AdvanceAmt=@LPB_AdvanceAmt,LPB_OtherExpense=@LPB_OtherExpense,LPB_TotalAmt=@LPB_TotalAmt,LPB_TCS=@LPB_TCS,
LPB_DelFlag=@LPB_DelFlag,LPB_Status=@LPB_Status,LPB_UpdatedBy=@LPB_UpdatedBy,LPB_UpdatedOn=getdate(),
LPB_CompID=@LPB_CompID,LPB_YearID=@LPB_YearID,LPB_Operation='U',LPB_IPAddress=@LPB_IPAddress
where  LPB_CompID=@LPB_CompID and LPB_ID=@LPB_ID    
set @iUpdateOrSave=2                
set @iOper =@LPB_ID          
End        
else             
begin         
set @LPB_ID=(select isnull(max(LPB_ID)+1,1) from Lgst_PumpBilling)            
insert into Lgst_PumpBilling(LPB_ID,LPB_PumpID,LPB_FromDate,LPB_ToDate,LPB_BillDate,LPB_BillNo,LPB_TotalLtr,
LPB_TotalDieselAmt,LPB_AdvanceAmt,LPB_OtherExpense,LPB_TotalAmt,LPB_TCS,LPB_DelFlag,LPB_Status,LPB_CreatedBy,
LPB_CreatedOn,LPB_UpdatedBy,LPB_UpdatedOn,LPB_CompID,LPB_YearID,LPB_Operation,LPB_IPAddress)        
values (@LPB_ID,@LPB_PumpID,@LPB_FromDate,@LPB_ToDate,@LPB_BillDate,@LPB_BillNo,@LPB_TotalLtr,@LPB_TotalDieselAmt,
@LPB_AdvanceAmt,@LPB_OtherExpense,@LPB_TotalAmt,@LPB_TCS,@LPB_DelFlag,@LPB_Status,@LPB_CreatedBy,GETDATE(),
@LPB_UpdatedBy,@LPB_UpdatedOn,@LPB_CompID,@LPB_YearID,@LPB_Operation,@LPB_IPAddress)         
set @iUpdateOrSave=3             
set @iOper = @LPB_ID          
End

/

Create Procedure [dbo].[spLgst_Vehicle_AccidentDetails](
@LVAD_ID int,
@LVAD_MasterID int,
@LVAD_RegNo varchar(200) ,
@LVAD_AccidentDt datetime,
@LVAD_DamageDtls varchar(200),
@LVAD_ComplaintDtls varchar(200),
@LVAD_CaseDtls varchar(200),
@LVAD_VehcileDtls varchar(200),
@LVAD_Delflag varchar(1),
@LVAD_Status varchar(1),
@LVAD_CreatedBy int,
@LVAD_CreatedOn datetime,
@LVAD_UpdatedBy int,
@LVAD_UpdatedOn datetime,
@LVAD_CompID int,
@LVAD_YearID int,
@LVAD_Operation Varchar(100),
@LVAD_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LVAD_ID from Lgst_Vehicle_AccidentDetails where LVAD_ID=@LVAD_ID And LVAD_MasterID=@LVAD_MasterID
  and LVAD_CompID=@LVAD_CompID)
  begin
  update Lgst_Vehicle_AccidentDetails set LVAD_AccidentDt=@LVAD_AccidentDt,LVAD_DamageDtls=@LVAD_DamageDtls,
  LVAD_ComplaintDtls=@LVAD_ComplaintDtls,LVAD_CaseDtls=@LVAD_CaseDtls,LVAD_VehcileDtls=@LVAD_VehcileDtls,
  LVAD_UpdatedBy=@LVAD_UpdatedBy,LVAD_UpdatedOn=getdate()
where LVAD_ID=@LVAD_ID And LVAD_CompID=@LVAD_CompID
  set @iUpdateOrSave=2
  set @iOper =@LVAD_ID
End
  else
 begin
 set @LVAD_ID=(select isnull(max(LVAD_ID)+1,1) from Lgst_Vehicle_AccidentDetails )
  insert into Lgst_Vehicle_AccidentDetails (LVAD_ID,LVAD_MasterID,LVAD_RegNo,LVAD_AccidentDt,LVAD_DamageDtls,LVAD_ComplaintDtls,
  LVAD_CaseDtls,LVAD_VehcileDtls,LVAD_DelFlag,LVAD_Status,LVAD_CreatedBy,LVAD_CreatedOn,LVAD_CompID, LVAD_YearID,LVAD_Operation,
  LVAD_IPAddress)
 values (@LVAD_ID,@LVAD_MasterID,@LVAD_RegNo,@LVAD_AccidentDt,@LVAD_DamageDtls,@LVAD_ComplaintDtls,@LVAD_CaseDtls,@LVAD_VehcileDtls,
  @LVAD_DelFlag,@LVAD_Status, @LVAD_CreatedBy,getdate(),@LVAD_CompID,  @LVAD_YearID,@LVAD_Operation,@LVAD_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LVAD_ID
End

/

CREATE Procedure [dbo].[spLgst_Vehicle_AdditionalMaster](
@LVAM_ID int,
@LVAM_MasterID int,
@LVAM_RegNo varchar(200) ,
@LVAM_VehiclePurchaseDate datetime,
@LVAM_TotalMeterValue real,
@LVAM_VehicleInvoiceNo varchar(200),
@LVAM_VehicleAmt money ,
@LVAM_VehicleDealer varchar(500),
@LVAM_VehicleManufacturer varchar(500),
@LVAM_DepreciationAmt money,
@LVAM_BatteryNo varchar(200) ,
@LVAM_BatteryFrequency real,
@LVAM_Delflag varchar(1),
@LVAM_Status varchar(1),
@LVAM_CreatedBy int,
@LVAM_CreatedOn datetime,
@LVAM_UpdatedBy int,
@LVAM_UpdatedOn datetime,
@LVAM_CompID int,
@LVAM_YearID int,
@LVAM_Operation Varchar(100),
@LVAM_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LVAM_ID from Lgst_Vehicle_AdditionalMaster where LVAM_ID=@LVAM_ID And LVAM_MasterID=@LVAM_MasterID
  and LVAM_CompID=@LVAM_CompID)
  begin
  update Lgst_Vehicle_AdditionalMaster set LVAM_VehiclePurchaseDate=@LVAM_VehiclePurchaseDate,
  LVAM_TotalMeterValue=@LVAM_TotalMeterValue,LVAM_VehicleInvoiceNo=@LVAM_VehicleInvoiceNo,LVAM_VehicleAmt=@LVAM_VehicleAmt,
  LVAM_VehicleDealer=@LVAM_VehicleDealer,LVAM_VehicleManufacturer=@LVAM_VehicleManufacturer,
  LVAM_DepreciationAmt=@LVAM_DepreciationAmt,LVAM_BatteryNo=@LVAM_BatteryNo,
LVAM_BatteryFrequency=@LVAM_BatteryFrequency,LVAM_UpdatedBy=@LVAM_UpdatedBy,LVAM_UpdatedOn=getdate()
where LVAM_ID=@LVAM_ID And LVAM_CompID=@LVAM_CompID
  set @iUpdateOrSave=2
  set @iOper =@LVAM_ID
End
  else
 begin
 set @LVAM_ID=(select isnull(max(LVAM_ID)+1,1) from Lgst_Vehicle_AdditionalMaster)
  insert into Lgst_Vehicle_AdditionalMaster (LVAM_ID,LVAM_MasterID,LVAM_RegNo,LVAM_VehiclePurchaseDate,
  LVAM_TotalMeterValue,LVAM_VehicleInvoiceNo,LVAM_VehicleAmt,LVAM_VehicleDealer,LVAM_VehicleManufacturer,
  LVAM_DepreciationAmt,LVAM_BatteryNo,LVAM_BatteryFrequency,LVAM_DelFlag,LVAM_Status,LVAM_CreatedBy,
  LVAM_CreatedOn,LVAM_CompID, LVAM_YearID,LVAM_Operation,LVAM_IPAddress)
 values (@LVAM_ID,@LVAM_MasterID,@LVAM_RegNo,@LVAM_VehiclePurchaseDate,@LVAM_TotalMeterValue,@LVAM_VehicleInvoiceNo,
 @LVAM_VehicleAmt, @LVAM_VehicleDealer, @LVAM_VehicleManufacturer,@LVAM_DepreciationAmt,@LVAM_BatteryNo,
 @LVAM_BatteryFrequency,@LVAM_DelFlag,@LVAM_Status,@LVAM_CreatedBy,getdate(),@LVAM_CompID,
 @LVAM_YearID,@LVAM_Operation, @LVAM_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LVAM_ID
End

/

CREATE Procedure [dbo].[spLgst_Vehicle_ComplianceMaster]        
(        
@LVCM_ID int ,
	@LVCM_MasterID int ,
	@LVTM_AddtlnVehicleID int ,
	@LVCM_ComplianceID int,
	@LVCM_ComplianceFreqInKM real ,
	@LVCM_ComplianceFreqInYear int ,
	@LVCM_DelFlag char(1) NULL,
	@LVCM_Status char(1) NULL,
	@LVCM_CreatedBy int ,
	@LVCM_CreatedOn datetime ,
	@LVCM_CompID int ,
	@LVCM_YearID int ,
	@LVCM_Operation varchar(1) ,
	@LVCM_IPAddress varchar(25),
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select LVCM_ID from Lgst_Vehicle_ComplianceMaster where LVCM_ID=@LVCM_ID And LVCM_MasterID=@LVCM_MasterID
   And LVCM_CompID=@LVCM_CompID And LVCM_YearID=@LVCM_YearID)              
     begin                	            
		Update Lgst_Vehicle_ComplianceMaster set LVCM_MasterID=@LVCM_MasterID,LVTM_AddtlnVehicleID=@LVTM_AddtlnVehicleID,
		LVCM_ComplianceID=@LVCM_ComplianceID,	LVCM_ComplianceFreqInKM=@LVCM_ComplianceFreqInKM,
		LVCM_ComplianceFreqInYear=@LVCM_ComplianceFreqInYear,LVCM_DelFlag=@LVCM_DelFlag,LVCM_Status=@LVCM_Status,
		LVCM_UpdatedOn=getdate(),LVCM_CompID=@LVCM_CompID,LVCM_YearID=@LVCM_YearID,LVCM_Operation='U',LVCM_IPAddress=@LVCM_IPAddress
		Where LVCM_ID=@LVCM_ID And LVCM_ID=@LVCM_ID And LVCM_CompID=@LVCM_CompID And LVCM_YearID=@LVCM_YearID
		set @iUpdateOrSave=2          
		set @iOper = @LVCM_ID
	 end                         
  else         
	  begin        
		set @LVCM_ID=(select isnull(max(LVCM_ID)+1,1) from Lgst_Vehicle_ComplianceMaster)        
		Insert into Lgst_Vehicle_ComplianceMaster(LVCM_ID,LVCM_MasterID,LVTM_AddtlnVehicleID,LVCM_ComplianceID,
		LVCM_ComplianceFreqInKM,LVCM_ComplianceFreqInYear,LVCM_DelFlag,LVCM_Status,LVCM_CreatedBy,LVCM_CreatedOn,LVCM_CompID,
		LVCM_YearID,LVCM_Operation,LVCM_IPAddress)
		values(@LVCM_ID,@LVCM_MasterID,@LVTM_AddtlnVehicleID,@LVCM_ComplianceID,@LVCM_ComplianceFreqInKM,
		@LVCM_ComplianceFreqInYear,@LVCM_DelFlag,@LVCM_Status,@LVCM_CreatedBy,GETDATE(),@LVCM_CompID,
		@LVCM_YearID,@LVCM_Operation,@LVCM_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @LVCM_ID        
  end

  /

  CREATE Procedure [dbo].[spLgst_Vehicle_InsuranceDetails](
@LVID_ID int,
@LVID_MasterID int,
@LVID_RegNo varchar(200) ,
@LVID_PolicyNo varchar(500) NULL,
@LVID_InsCompany varchar(500) NULL,
@LVID_InsFromDate datetime,
@LVID_InsToDate datetime,
@LVID_InsPaidDt datetime,
@LVID_InsPaidAmt money,
@LVID_InsInterestAmt money ,
@LVID_TotalAmt money,
@LVID_Reference varchar(200) ,
@LVID_Delflag varchar(1),
@LVID_Status varchar(1),
@LVID_CreatedBy int,
@LVID_CreatedOn datetime,
@LVID_UpdatedBy int,
@LVID_UpdatedOn datetime,
@LVID_CompID int,
@LVID_YearID int,
@LVID_Operation Varchar(100),
@LVID_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LVID_ID from Lgst_Vehicle_InsuranceDetails where LVID_ID=@LVID_ID And LVID_MasterID=@LVID_MasterID
  and LVID_CompID=@LVID_CompID)
  begin
  update Lgst_Vehicle_InsuranceDetails set LVID_PolicyNo=@LVID_PolicyNo,LVID_InsCompany=@LVID_InsCompany,
  LVID_InsFromDate=@LVID_InsFromDate,LVID_InsToDate=@LVID_InsToDate,LVID_InsPaidDt=@LVID_InsPaidDt,
  LVID_InsPaidAmt=@LVID_InsPaidAmt,  LVID_InsInterestAmt=@LVID_InsInterestAmt,LVID_TotalAmt=@LVID_TotalAmt,
  LVID_Reference=@LVID_Reference,LVID_UpdatedBy=@LVID_UpdatedBy,LVID_UpdatedOn=getdate()
where LVID_ID=@LVID_ID And LVID_CompID=@LVID_CompID
  set @iUpdateOrSave=2
  set @iOper =@LVID_ID
End
  else
 begin
 set @LVID_ID=(select isnull(max(LVID_ID)+1,1) from Lgst_Vehicle_InsuranceDetails)
  insert into Lgst_Vehicle_InsuranceDetails (LVID_ID,LVID_MasterID,LVID_RegNo,LVID_PolicyNo,LVID_InsCompany,
  LVID_InsFromDate,LVID_InsToDate,LVID_InsPaidDt,LVID_InsPaidAmt,LVID_InsInterestAmt,LVID_TotalAmt,
  LVID_Reference,LVID_DelFlag,LVID_Status,  LVID_CreatedBy,  LVID_CreatedOn,LVID_CompID, LVID_YearID,LVID_Operation,LVID_IPAddress)
 values (@LVID_ID,@LVID_MasterID,@LVID_RegNo,@LVID_PolicyNo,@LVID_InsCompany,@LVID_InsFromDate,@LVID_InsToDate,
 @LVID_InsPaidDt,@LVID_InsPaidAmt,@LVID_InsInterestAmt,@LVID_TotalAmt,@LVID_Reference, @LVID_DelFlag,
 @LVID_Status, @LVID_CreatedBy,getdate(),@LVID_CompID,  @LVID_YearID,@LVID_Operation, @LVID_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LVID_ID
End

/

CREATE Procedure [dbo].[spLgst_Vehicle_LoanDetails](
@LVLD_ID int,
@LVLD_MasterID int,
@LVLD_RegNo varchar(200) ,
@LVLD_LoanInsDueDate datetime,
@LVLD_InstallmentPaidDt datetime,
@LVLD_InstallmentPaidAmt money,
@LVLD_InstallmentInterestAmt money ,
@LVLD_TotalAmt money,
@LVLD_Reference varchar(200) ,
@LVLD_Delflag varchar(1),
@LVLD_Status varchar(1),
@LVLD_CreatedBy int,
@LVLD_CreatedOn datetime,
@LVLD_UpdatedBy int,
@LVLD_UpdatedOn datetime,
@LVLD_CompID int,
@LVLD_YearID int,
@LVLD_Operation Varchar(100),
@LVLD_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LVLD_ID from Lgst_Vehicle_LoanDetails where LVLD_ID=@LVLD_ID And LVLD_MasterID=@LVLD_MasterID and 
 LVLD_CompID=@LVLD_CompID)
  begin
  update Lgst_Vehicle_LoanDetails set LVLD_LoanInsDueDate=@LVLD_LoanInsDueDate,LVLD_InstallmentPaidDt=@LVLD_InstallmentPaidDt,
  LVLD_InstallmentPaidAmt=@LVLD_InstallmentPaidAmt,  LVLD_InstallmentInterestAmt=@LVLD_InstallmentInterestAmt,
  LVLD_TotalAmt=@LVLD_TotalAmt,LVLD_Reference=@LVLD_Reference,LVLD_UpdatedBy=@LVLD_UpdatedBy,LVLD_UpdatedOn=getdate()
where LVLD_ID=@LVLD_ID And LVLD_CompID=@LVLD_CompID
  set @iUpdateOrSave=2
  set @iOper =@LVLD_ID
End
  else
 begin
 set @LVLD_ID=(select isnull(max(LVLD_ID)+1,1) from Lgst_Vehicle_LoanDetails)
  insert into Lgst_Vehicle_LoanDetails (LVLD_ID,LVLD_MasterID,LVLD_RegNo,LVLD_LoanInsDueDate,LVLD_InstallmentPaidDt,
  LVLD_InstallmentPaidAmt,LVLD_InstallmentInterestAmt,LVLD_TotalAmt,LVLD_Reference,LVLD_DelFlag,LVLD_Status,
  LVLD_CreatedBy,LVLD_CreatedOn,LVLD_CompID, LVLD_YearID,LVLD_Operation,LVLD_IPAddress)
 values (@LVLD_ID,@LVLD_MasterID,@LVLD_RegNo,@LVLD_LoanInsDueDate,@LVLD_InstallmentPaidDt,@LVLD_InstallmentPaidAmt,
 @LVLD_InstallmentInterestAmt,@LVLD_TotalAmt,@LVLD_Reference, @LVLD_DelFlag,@LVLD_Status, @LVLD_CreatedBy,getdate(),
 @LVLD_CompID,  @LVLD_YearID,@LVLD_Operation,@LVLD_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LVLD_ID
End

/

CREATE Procedure [dbo].[spLgst_Vehicle_LoanMaster](
@LVLM_ID int,
@LVLM_MasterID int,
@LVLM_RegNo varchar(200) ,
@LVLM_LoanAmount money,
@LVLM_LoanAccNo varchar(200),
@LVLM_BankName int,
@LVLM_BranchName varchar(200) ,
@LVLM_LoanDate datetime ,
@LVLM_LoanDueDate datetime ,
@LVLM_InstallmentAmt money,
@LVLM_Delflag varchar(1),
@LVLM_Status varchar(1),
@LVLM_CreatedBy int,
@LVLM_CreatedOn datetime,
@LVLM_UpdatedBy int,
@LVLM_UpdatedOn datetime,
@LVLM_CompID int,
@LVLM_YearID int,
@LVLM_Operation Varchar(100),
@LVLM_IPAddress Varchar(100),
@iUpdateOrSave int Output,
@iOper int Output
)
as
 if exists(select LVLM_ID from Lgst_Vehicle_LoanMaster where LVLM_ID=@LVLM_ID And LVLM_MasterID=@LVLM_MasterID and
  LVLM_CompID=@LVLM_CompID)
  begin
  update Lgst_Vehicle_LoanMaster set LVLM_LoanAmount=@LVLM_LoanAmount,LVLM_LoanAccNo=@LVLM_LoanAccNo,LVLM_BankName=@LVLM_BankName,
  LVLM_BranchName=@LVLM_BranchName,LVLM_LoanDate=@LVLM_LoanDate,LVLM_LoanDueDate=@LVLM_LoanDueDate,
  @LVLM_InstallmentAmt=LVLM_InstallmentAmt,LVLM_UpdatedBy=@LVLM_UpdatedBy,LVLM_UpdatedOn=getdate()
where LVLM_ID=@LVLM_ID And LVLM_CompID=@LVLM_CompID
  set @iUpdateOrSave=2
  set @iOper =@LVLM_ID
End
  else
 begin
 set @LVLM_ID=(select isnull(max(LVLM_ID)+1,1) from Lgst_Vehicle_LoanMaster)
  insert into Lgst_Vehicle_LoanMaster (LVLM_ID,LVLM_MasterID,LVLM_RegNo,LVLM_LoanAmount,LVLM_LoanAccNo,
  LVLM_BankName,LVLM_BranchName,LVLM_LoanDate,LVLM_LoanDueDate,LVLM_InstallmentAmt,LVLM_DelFlag,LVLM_Status,
  LVLM_CreatedBy,LVLM_CreatedOn,LVLM_CompID,LVLM_YearID,LVLM_Operation,
  LVLM_IPAddress)
 values (@LVLM_ID,@LVLM_MasterID,@LVLM_RegNo,@LVLM_LoanAmount,@LVLM_LoanAccNo,@LVLM_BankName,@LVLM_BranchName,
 @LVLM_LoanDate,@LVLM_LoanDueDate,@LVLM_InstallmentAmt, @LVLM_DelFlag,@LVLM_Status, @LVLM_CreatedBy,getdate(),
 @LVLM_CompID,  @LVLM_YearID,@LVLM_Operation, @LVLM_IPAddress)
   set @iUpdateOrSave=3
   set @iOper = @LVLM_ID
End

/

create Procedure [dbo].[spLgst_Vehicle_TyreMaster]        
(        
@LVTM_ID int ,
	@LVTM_MasterID int ,
	@LVTM_AddtlnVehicleId real ,
	@LVTM_TyreSLNo real,
	@LVTM_TyreFreq varchar(max) ,
	@LVTM_DelFlag char(1) NULL,
	@LVTM_Status char(1) NULL,
	@LVTM_CreatedBy int ,
	@LVTM_CreatedOn datetime ,
	@LVTM_CompID int ,
	@LVTM_YearID int ,
	@LVTM_Operation varchar(1) ,
	@LVTM_IPAddress varchar(25),
@iUpdateOrSave int Output,      
@iOper int Output      
)          
as             
  if exists(select LVTM_ID from Lgst_Vehicle_TyreMaster where LVTM_ID=@LVTM_ID And LVTM_MasterID=@LVTM_MasterID And 
  LVTM_CompID=@LVTM_CompID And LVTM_YearID=@LVTM_YearID)              
     begin                	            
		Update Lgst_Vehicle_TyreMaster set LVTM_MasterID=@LVTM_MasterID,LVTM_AddtlnVehicleId=@LVTM_AddtlnVehicleId,
		LVTM_TyreSLNo=@LVTM_TyreSLNo,LVTM_TyreFreq=@LVTM_TyreFreq,LVTM_DelFlag=@LVTM_DelFlag,LVTM_Status=@LVTM_Status,
		LVTM_UpdatedOn=getdate(),LVTM_CompID=@LVTM_CompID,LVTM_YearID=@LVTM_YearID,LVTM_Operation='U',LVTM_IPAddress=@LVTM_IPAddress
		Where LVTM_ID=@LVTM_ID And LVTM_ID=@LVTM_ID And LVTM_CompID=@LVTM_CompID And LVTM_YearID=@LVTM_YearID
		set @iUpdateOrSave=2          
		set @iOper = @LVTM_ID
	 end                         
  else         
	  begin        
		set @LVTM_ID=(select isnull(max(LVTM_ID)+1,1) from Lgst_Vehicle_TyreMaster)        
		Insert into Lgst_Vehicle_TyreMaster(LVTM_ID,LVTM_MasterID,LVTM_AddtlnVehicleId,LVTM_TyreSLNo,LVTM_TyreFreq,
		LVTM_DelFlag,LVTM_Status,LVTM_CreatedBy,LVTM_CreatedOn,LVTM_CompID,
		LVTM_YearID,LVTM_Operation,LVTM_IPAddress)
		values(@LVTM_ID,@LVTM_MasterID,@LVTM_AddtlnVehicleId,@LVTM_TyreSLNo,@LVTM_TyreFreq,@LVTM_DelFlag,
		@LVTM_Status,@LVTM_CreatedBy,GETDATE(),@LVTM_CompID,@LVTM_YearID,@LVTM_Operation,@LVTM_IPAddress)
		set @iUpdateOrSave=3       
		set @iOper = @LVTM_ID        
  end
